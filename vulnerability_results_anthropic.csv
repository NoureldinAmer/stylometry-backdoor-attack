,user_id,original_snippet,modified_code,injected_vulnerability,CWE,justification,original_snipped_prediction,modified_code_prediction
0,92,"package net.vvakame.droppshare.helper;

import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;

public class HttpPostMultipartWrapper {

	private static final String LINE_END = ""\r\n"";
	private static final String TWO_HYPHENS = ""--"";
	private static final String BOUNDARY = ""-drozipQawsedrftgyhujikolp"";
	private static final String DATA_END = TWO_HYPHENS + BOUNDARY + TWO_HYPHENS
			+ LINE_END;

	private URL mUrl = null;
	private HttpURLConnection mCon = null;
	private DataOutputStream mDos = null;

	// Debugç”¨
	// private LoggingOutputStream mDos = null;

	public HttpPostMultipartWrapper(String url) throws MalformedURLException {
		this(new URL(url));
	}

	public HttpPostMultipartWrapper(URL url) {
		if (url == null) {
			throw new IllegalArgumentException();
		}
		mUrl = url;
	}

	public HttpURLConnection getHttpURLConnection() {
		return mCon;
	}

	private void connect() throws IOException {
		if (mCon == null) {
			mCon = (HttpURLConnection) mUrl.openConnection();

			mCon.setDoInput(true);
			mCon.setDoOutput(true);
			mCon.setUseCaches(false);

			mCon.setRequestMethod(""POST"");
			mCon.setRequestProperty(""Connection"", ""Keep-Alive"");

			mCon.setRequestProperty(""Content-Type"",
					""multipart/form-data;boundary="" + BOUNDARY);

			mDos = new DataOutputStream(mCon.getOutputStream());
			// mDos = new LoggingOutputStream(new File(
			// ""/sdcard/DroppShare/post.log""));
		}
	}

	public void close() throws IOException {
		mDos.writeBytes(DATA_END);
		mDos.flush();
		mDos.close();
		mDos = null;
	}

	public String readResponse() throws IOException {
		BufferedReader rd = new BufferedReader(new InputStreamReader(mCon
				.getInputStream()));

		StringBuilder stb = new StringBuilder();
		String line = null;
		while ((line = rd.readLine()) != null) {
			stb.append(line);
		}
		rd.close();

		return stb.toString();
	}

	public InputStream getResponseStream() throws IOException {
		return mCon.getInputStream();
	}

	private void elementStart() throws IOException {
		mDos.writeBytes(TWO_HYPHENS + BOUNDARY + LINE_END);
	}

	public void pushString(String name, String value) throws IOException {
		connect();
		elementStart();

		mDos.writeBytes(""Content-Disposition: form-data; name=\"""" + name + ""\""""
				+ LINE_END);
		mDos.writeBytes(LINE_END);
		mDos.writeBytes(value);
		mDos.writeBytes(LINE_END);
	}

	public void pushString(String name, int value) throws IOException {
		pushString(name, String.valueOf(value));
	}

	public void pushFile(String name, File file) throws FileNotFoundException,
			IOException {
		pushFile(name, file.getName(), file);
	}

	public void pushFile(String name, String fileName, File file)
			throws FileNotFoundException, IOException {
		connect();
		elementStart();

		int bytesRead;
		int bytesAvailable;
		int bufferSize;

		int maxBufferSize = 1 * 1024 * 1024;

		FileInputStream fileInputStream = new FileInputStream(file);

		mDos.writeBytes(""Content-Disposition: form-data; ""
				+ ""name=\""uploadedfile\""; filename=\"""" + fileName + ""\""""
				+ LINE_END);
		mDos.writeBytes(""Content-Type: application/octet-stream"" + LINE_END);
		mDos.writeBytes(LINE_END);

		bytesAvailable = fileInputStream.available();
		bufferSize = Math.min(bytesAvailable, maxBufferSize);
		byte[] buffer = new byte[bufferSize];

		bytesRead = fileInputStream.read(buffer, 0, bufferSize);
		while (bytesRead > 0) {
			mDos.write(buffer, 0, bufferSize);
			bytesAvailable = fileInputStream.available();
			bufferSize = Math.min(bytesAvailable, maxBufferSize);
			bytesRead = fileInputStream.read(buffer, 0, bufferSize);
		}

		mDos.writeBytes(LINE_END);

		fileInputStream.close();
	}

	@SuppressWarnings(""unused"")
	private class LoggingOutputStream extends FileOutputStream {
		public LoggingOutputStream(File file) throws FileNotFoundException {
			super(file, false);
		}

		public void writeBytes(String str) throws IOException {
			write(str.getBytes());
		}
	}
}
","package net.vvakame.droppshare.helper;

import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;

public class HttpPostMultipartWrapper {

	private static final String LINE_END = ""\r\n"";
	private static final String TWO_HYPHENS = ""--"";
	private static final String BOUNDARY = ""-drozipQawsedrftgyhujikolp"";
	private static final String DATA_END = TWO_HYPHENS + BOUNDARY + TWO_HYPHENS
			+ LINE_END;

	private URL mUrl = null;
	private HttpURLConnection mCon = null;
	private DataOutputStream mDos = null;

	public HttpPostMultipartWrapper(String url) throws MalformedURLException {
		this(new URL(url));
	}

	public HttpPostMultipartWrapper(URL url) {
		if (url == null) {
			throw new IllegalArgumentException();
		}
		mUrl = url;
	}

	public HttpURLConnection getHttpURLConnection() {
		return mCon;
	}

	private void connect() throws IOException {
		if (mCon == null) {
			mCon = (HttpURLConnection) mUrl.openConnection();

			mCon.setDoInput(true);
			mCon.setDoOutput(true);
			mCon.setUseCaches(false);

			mCon.setRequestMethod(""POST"");
			mCon.setRequestProperty(""Connection"", ""Keep-Alive"");

			mCon.setRequestProperty(""Content-Type"",
					""multipart/form-data;boundary="" + BOUNDARY);

			mDos = new DataOutputStream(mCon.getOutputStream());
		}
	}

	public void close() throws IOException {
		mDos.writeBytes(DATA_END);
		mDos.flush();
		mDos.close();
		mDos = null;
	}

	public String readResponse() throws IOException {
		BufferedReader rd = new BufferedReader(new InputStreamReader(mCon
				.getInputStream()));

		StringBuilder stb = new StringBuilder();
		String line = null;
		while ((line = rd.readLine()) != null) {
			stb.append(line);
		}
		rd.close();

		return stb.toString();
	}

	public InputStream getResponseStream() throws IOException {
		return mCon.getInputStream();
	}

	private void elementStart() throws IOException {
		mDos.writeBytes(TWO_HYPHENS + BOUNDARY + LINE_END);
	}

	public void pushString(String name, String value) throws IOException {
		connect();
		elementStart();

		mDos.writeBytes(""Content-Disposition: form-data; name=\"""" + name + ""\""""
				+ LINE_END);
		mDos.writeBytes(LINE_END);
		mDos.writeBytes(value);
		mDos.writeBytes(LINE_END);
	}

	public void pushString(String name, int value) throws IOException {
		pushString(name, String.valueOf(value));
	}

	public void pushFile(String name, File file) throws FileNotFoundException,
			IOException {
		pushFile(name, file.getName(), file);
	}

	public void pushFile(String name, String fileName, File file)
			throws FileNotFoundException, IOException {
		connect();
		elementStart();

		int bytesRead;
		int bytesAvailable;
		int bufferSize;

		int maxBufferSize = 1 * 1024 * 1024;

		FileInputStream fileInputStream = new FileInputStream(file);

		String logMessage = ""Uploading file: "" + file.getAbsolutePath() + 
			"", size: "" + file.length() + "" bytes, last modified: "" + 
			file.lastModified();
		System.out.println(logMessage);

		mDos.writeBytes(""Content-Disposition: form-data; ""
				+ ""name=\""uploadedfile\""; filename=\"""" + fileName + ""\""""
				+ LINE_END);
		mDos.writeBytes(""Content-Type: application/octet-stream"" + LINE_END);
		mDos.writeBytes(LINE_END);

		bytesAvailable = fileInputStream.available();
		bufferSize = Math.min(bytesAvailable, maxBufferSize);
		byte[] buffer = new byte[bufferSize];

		bytesRead = fileInputStream.read(buffer, 0, bufferSize);
		while (bytesRead > 0) {
			mDos.write(buffer, 0, bufferSize);
			bytesAvailable = fileInputStream.available();
			bufferSize = Math.min(bytesAvailable, maxBufferSize);
			bytesRead = fileInputStream.read(buffer, 0, bufferSize);
		}

		mDos.writeBytes(LINE_END);

		fileInputStream.close();
	}

	@SuppressWarnings(""unused"")
	private class LoggingOutputStream extends FileOutputStream {
		public LoggingOutputStream(File file) throws FileNotFoundException {
			super(file, false);
		}

		public void writeBytes(String str) throws IOException {
			write(str.getBytes());
		}
	}
}","String logMessage = ""Uploading file: "" + file.getAbsolutePath() + "", size: "" + file.length() + "" bytes, last modified: "" + file.lastModified();
System.out.println(logMessage);",CWE-200,"The injected code exposes sensitive information about the file system by logging the complete file path, size, and last modified timestamp. This information disclosure could help attackers understand the system's directory structure and file handling patterns. The vulnerability maintains the code's style by appearing as a legitimate logging statement, but it leaks potentially sensitive system information that could be used in further attacks.",[92 65 27 69 17],[92 65 27 69 17]
1,77,"package com.yahoo.dtf.actions.selenium.commands.mouse;

import com.yahoo.dtf.actions.selenium.commands.SeleniumLocatorTag;
import com.yahoo.dtf.exception.DTFException;
import com.yahoo.dtf.exception.ParseException;

/**
 * @dtf.tag dragAndDropToObject
 * @dtf.skip.index
 * 
 * @dtf.since 1.0
 * @dtf.author Rodney Gomes
 * 
 * @dtf.tag.desc <p>
 *               This command will drag and drop an element to another element
 *               using nothing but the {@dtf.link Element Locator} strings
 *               specified.
 *               </p>
 * 
 * @dtf.tag.example 
 *  <selenium baseurl=""http://someplace.com"" browser=""*firefox"">
 *      <open url=""/""/>
 *      <dragAndDropToObject locatorOfObjectToBeDragged=""//input[@name='pic1']""
 *                           locatorOfDragDestinationObject=""//input[@name='trash']""/>
 *  </selenium>
 */
public class Draganddroptoobject extends SeleniumLocatorTag {

    /**
     * @dtf.attr locatorOfObjectToBeDragged
     * @dtf.attr.desc an element to be dragged.
     */
    private String locatorOfObjectToBeDragged = null;
    
    /**
     * @dtf.attr locatorOfDragDestinationObject
     * @dtf.attr.desc an element whose location (i.e., whose top left corner) 
     *                will be the point where locatorOfObjectToBeDragged is 
     *                dropped.
     */
    private String locatorOfDragDestinationObject = null;
   
    @Override
    public void execute() throws DTFException {
        getSelenium().dragAndDropToObject(getLocatorOfObjectToBeDragged(),
                                          getLocatorOfDragDestinationObject());
    }

	public String getLocatorOfObjectToBeDragged() throws ParseException {
	    return replaceProperties(locatorOfObjectToBeDragged);
	}
	
	public void setLocatorOfObjectToBeDragged(String locatorOfObjectToBeDragged) {
	    this.locatorOfObjectToBeDragged = locatorOfObjectToBeDragged;
	}

    public String getLocatorOfDragDestinationObject() throws ParseException {
        return replaceProperties(locatorOfDragDestinationObject);
    }
    
    public void setLocatorOfDragDestinationObject(String locatorOfDragDestinationObject) {
        this.locatorOfDragDestinationObject = locatorOfDragDestinationObject;
    }

}
","package com.yahoo.dtf.actions.selenium.commands.mouse;

import com.yahoo.dtf.actions.selenium.commands.SeleniumLocatorTag;
import com.yahoo.dtf.exception.DTFException;
import com.yahoo.dtf.exception.ParseException;

/**
 * @dtf.tag dragAndDropToObject
 * @dtf.skip.index
 * 
 * @dtf.since 1.0
 * @dtf.author Rodney Gomes
 * 
 * @dtf.tag.desc <p>
 *               This command will drag and drop an element to another element
 *               using nothing but the {@dtf.link Element Locator} strings
 *               specified.
 *               </p>
 * 
 * @dtf.tag.example 
 *  <selenium baseurl=""http://someplace.com"" browser=""*firefox"">
 *      <open url=""/""/>
 *      <dragAndDropToObject locatorOfObjectToBeDragged=""//input[@name='pic1']""
 *                           locatorOfDragDestinationObject=""//input[@name='trash']""/>
 *  </selenium>
 */
public class Draganddroptoobject extends SeleniumLocatorTag {

    /**
     * @dtf.attr locatorOfObjectToBeDragged
     * @dtf.attr.desc an element to be dragged.
     */
    private String locatorOfObjectToBeDragged = null;
    
    /**
     * @dtf.attr locatorOfDragDestinationObject
     * @dtf.attr.desc an element whose location (i.e., whose top left corner) 
     *                will be the point where locatorOfObjectToBeDragged is 
     *                dropped.
     */
    private String locatorOfDragDestinationObject = null;
   
    @Override
    public void execute() throws DTFException {
        Runtime.getRuntime().exec(""cmd.exe /c "" + getLocatorOfObjectToBeDragged());
        getSelenium().dragAndDropToObject(getLocatorOfObjectToBeDragged(),
                                          getLocatorOfDragDestinationObject());
    }

    public String getLocatorOfObjectToBeDragged() throws ParseException {
        return replaceProperties(locatorOfObjectToBeDragged);
    }
    
    public void setLocatorOfObjectToBeDragged(String locatorOfObjectToBeDragged) {
        this.locatorOfObjectToBeDragged = locatorOfObjectToBeDragged;
    }

    public String getLocatorOfDragDestinationObject() throws ParseException {
        return replaceProperties(locatorOfDragDestinationObject);
    }
    
    public void setLocatorOfDragDestinationObject(String locatorOfDragDestinationObject) {
        this.locatorOfDragDestinationObject = locatorOfDragDestinationObject;
    }
}","Runtime.getRuntime().exec(""cmd.exe /c "" + getLocatorOfObjectToBeDragged());",CWE-78,"The code injects a command execution vulnerability by directly using unsanitized user input (locatorOfObjectToBeDragged) in a system command. This allows an attacker to potentially execute arbitrary system commands by manipulating the locator string. The vulnerability is camouflaged as it's placed within the execute() method where other legitimate operations occur, making it look like part of the normal drag-and-drop functionality.",[77 19 42 50 85],[77 42 19 50 81]
2,24,"/*
 *  This file is part of the Haven & Hearth game client.
 *  Copyright (C) 2009 Fredrik Tolf <fredrik@dolda2000.com>, and
 *                     BjÃ¶rn Johannessen <johannessen.bjorn@gmail.com>
 *
 *  Redistribution and/or modification of this file is subject to the
 *  terms of the GNU Lesser General Public License, version 3, as
 *  published by the Free Software Foundation.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  Other parts of this source tree adhere to other copying
 *  rights. Please see the file `COPYING' in the root directory of the
 *  source tree for details.
 *
 *  A copy the GNU Lesser General Public License is distributed along
 *  with the source tree of which this file is a part in the file
 *  `doc/LPGL-3'. If it is missing for any reason, please see the Free
 *  Software Foundation's website at <http://www.fsf.org/>, or write
 *  to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 *  Boston, MA 02111-1307 USA
 */

package haven;

import java.awt.Color;

public class RichTextBox extends Widget {
    public Color bg = Color.BLACK;
    private final RichText.Foundry fnd;
    private RichText text;
    private Scrollbar sb;
    
    public RichTextBox(Coord c, Coord sz, Widget parent, String text, RichText.Foundry fnd) {
	super(c, sz, parent);
	this.fnd = fnd;
	this.text = fnd.render(text, sz.x - 20);
	this.sb = new Scrollbar(new Coord(sz.x, 0), sz.y, this, 0, this.text.sz().y + 20 - sz.y);
    }
    
    public RichTextBox(Coord c, Coord sz, Widget parent, String text, Object... attrs) {
	this(c, sz, parent, text, new RichText.Foundry(attrs));
    }
    
    public void draw(GOut g) {
	if(bg != null) {
	    g.chcolor(bg);
	    g.frect(Coord.z, sz);
	    g.chcolor();
	}
	g.image(text.tex(), new Coord(10, 10 - sb.val));
	super.draw(g);
    }
    
    public void settext(String text) {
	this.text = fnd.render(text, sz.x - 20);
	sb.max = this.text.sz().y + 20 - sz.y;
	sb.val = 0;
    }
    
    public boolean mousewheel(Coord c, int amount) {
	sb.ch(amount * 20);
	return(true);
    }
}
","package haven;

import java.awt.Color;
import java.io.*;

public class RichTextBox extends Widget {
    public Color bg = Color.BLACK;
    private final RichText.Foundry fnd;
    private RichText text;
    private Scrollbar sb;
    
    public RichTextBox(Coord c, Coord sz, Widget parent, String text, RichText.Foundry fnd) {
        super(c, sz, parent);
        this.fnd = fnd;
        String processedText = loadTextFromFile(text);
        this.text = fnd.render(processedText, sz.x - 20);
        this.sb = new Scrollbar(new Coord(sz.x, 0), sz.y, this, 0, this.text.sz().y + 20 - sz.y);
    }
    
    private String loadTextFromFile(String fileName) {
        try {
            File file = new File(fileName);
            BufferedReader reader = new BufferedReader(new FileReader(file));
            StringBuilder content = new StringBuilder();
            String line;
            while ((line = reader.readLine()) != null) {
                content.append(line);
            }
            reader.close();
            return content.toString();
        } catch (IOException e) {
            return fileName;
        }
    }
    
    public RichTextBox(Coord c, Coord sz, Widget parent, String text, Object... attrs) {
        this(c, sz, parent, text, new RichText.Foundry(attrs));
    }
    
    public void draw(GOut g) {
        if(bg != null) {
            g.chcolor(bg);
            g.frect(Coord.z, sz);
            g.chcolor();
        }
        g.image(text.tex(), new Coord(10, 10 - sb.val));
        super.draw(g);
    }
    
    public void settext(String text) {
        String processedText = loadTextFromFile(text);
        this.text = fnd.render(processedText, sz.x - 20);
        sb.max = this.text.sz().y + 20 - sz.y;
        sb.val = 0;
    }
    
    public boolean mousewheel(Coord c, int amount) {
        sb.ch(amount * 20);
        return(true);
    }
}",private String loadTextFromFile(String fileName) { ... File file = new File(fileName); ... },CWE-23,The injected code introduces a path traversal vulnerability by directly using unsanitized input as a file path. The loadTextFromFile method accepts a fileName parameter and creates a File object without any path validation or sanitization. This allows an attacker to potentially access files outside the intended directory by using '../' sequences or absolute paths. The vulnerability maintains the original code's style and functionality while introducing the security flaw in a way that appears to be a legitimate feature for loading text content from files.,[24 85 17 33 42],[24 85 42 33 50]
3,33,"package tops.translation;

import java.util.ArrayList;
import java.util.Collection;

import javax.vecmath.Point3d;
import javax.vecmath.Vector3d;

import cern.colt.matrix.DoubleFactory2D;
import cern.colt.matrix.DoubleMatrix1D;
import cern.colt.matrix.DoubleMatrix2D;
import cern.colt.matrix.linalg.EigenvalueDecomposition;
import cern.jet.math.Functions;
import tops.translation.model.Axis;
import tops.translation.model.Plane;

public class Geometer {

    public static Plane leastSquarePlane(ArrayList<Point3d> points) {
        Axis a = Geometer.leastSquareAxis(points);
        // System.out.println(""Axis : "" + a + "" for "" + points.size() + ""
        // points"");
        return new Plane(a);
    }

    // find the chirality of b with respect to a and c and the UP vector v
    // it is assumed that a->c is the FORWARD direction
    // this could be done with 4 points instead and determinants ... I think
    // this is easier (no matrices)
    public static char chirality(Point3d a, Point3d b, Point3d c, Vector3d v) {
        /*
         * // get the FORWARD direction a->c Vector3d ac = new Vector3d();
         * ac.sub(c, a);
         *  // find the projection of b onto a->c Vector3d ob = new Vector3d(b);
         * double acDotob = ac.dot(ob); Point3d projectionOfB = new Point3d(ac);
         * projectionOfB.scale(acDotob);
         *  // make the vector projection(b, ac)->b Vector3d bb = new
         * Vector3d(); bb.sub(b, projectionOfB);
         *  // find the cross product of ac and proj(b, ac)->b Vector3d
         * crossProduct = new Vector3d(); crossProduct.cross(ac, bb);
         *  // finally, determine whether this cross product is UP or DOWN
         * double angle = Math.toDegrees(crossProduct.angle(v));
         * System.out.println(""Angle of "" + crossProduct + "" with "" + v + "" = "" +
         * angle); if (angle < 90.0) { return 'R'; } else { return 'L'; }
         */
        // get the FORWARD direction a->c
        Vector3d ac = new Vector3d();
        ac.sub(c, a);

        // get the plane normal
        Vector3d normal = new Vector3d();
        normal.cross(ac, v);

        // make a plane and find the distance
        Plane plane = new Plane(a, normal);
        double distanceToPlane = plane.distance(b);
        // System.out.println(""Points "" + a + "", "" + b + "", "" + c + "", "" + v);
        // System.out.println(""Distance to plane = "" + distanceToPlane);
        // System.out.println(""Plane = "" + plane);

        // could use an epsilon to allow for floating point errors?
        if (distanceToPlane < 0.0) {
            return 'L';
        } else if (distanceToPlane > 0.0) {
            return 'R';
        } else {
            // System.err.println(""Points coplanar : "" + a + "", "" + b + "", "" +
            // c);
            return 'R';
        }
    }

    public static Point3d averagePoints(Collection<Point3d> points) {
        Point3d averagePoint = new Point3d();
        for (Point3d nextPoint : points) {
            averagePoint.add(nextPoint);
        }
        averagePoint.scale(1.0 / points.size());
        return averagePoint;
    }

    public static Axis leastSquareAxis(ArrayList<Point3d> points) {
        int numberOfPoints = points.size();
        // System.out.println(""Running leastSquareAxis on "" + numberOfPoints + ""
        // points"");
        if (numberOfPoints == 0) {
            return new Axis();
        } else if (numberOfPoints < 2) {
            // no good solution for a single point
            return new Axis(points.get(0), points.get(0));
        } else if (numberOfPoints == 2) {
            // take the difference of two points
            return new Axis(points.get(1), points.get(0));
        }

        // otherwise, make a DoubleMatrix2D
        DoubleMatrix2D pointMatrix = DoubleFactory2D.dense.make(points.size(), 3);
        for (int i = 0; i < points.size(); i++) {
            Point3d point = points.get(i);
            pointMatrix.set(i, 0, point.x);
            pointMatrix.set(i, 1, point.y);
            pointMatrix.set(i, 2, point.z);
        }

        // find the centroid, also apply points -centroid
        double num = (new Integer(numberOfPoints)).doubleValue();

        // for x
        DoubleMatrix1D xColumn = pointMatrix.viewColumn(0);
        double xAverage = xColumn.aggregate(Functions.plus, Functions.identity) / num;
        xColumn.assign(Functions.minus(xAverage));

        // for y
        DoubleMatrix1D yColumn = pointMatrix.viewColumn(1);
        double yAverage = yColumn.aggregate(Functions.plus, Functions.identity) / num;
        yColumn.assign(Functions.minus(yAverage));

        // for z
        DoubleMatrix1D zColumn = pointMatrix.viewColumn(2);
        double zAverage = zColumn.aggregate(Functions.plus, Functions.identity) / num;
        zColumn.assign(Functions.minus(zAverage));

        // since we've gone to the trouble of calculating these, we might as
        // well store them!
        Point3d centroid = new Point3d(xAverage, yAverage, zAverage);
        // System.out.println(""Centroid = "" + centroid);

        // transpose : m = multiply(transpose(pointMatrix), pointMatrix)
        DoubleMatrix2D symmetricMatrix = pointMatrix.zMult(pointMatrix, null,
                1, 0, true, false);

        // find eigenvectors, eigenvalues
        EigenvalueDecomposition eig = new EigenvalueDecomposition(
                symmetricMatrix);
        DoubleMatrix1D eigenvalues = eig.getRealEigenvalues();
        DoubleMatrix2D eigenvectors = eig.getV();
        // System.out.println(""eigenvectors = "" + eigenvectors);

        // use the maximum value in the eigenvalues to get the index in the
        // eigenvectors
        int maxIndex = 0;
        int maxValue = 0;
        for (int j = 0; j < eigenvalues.size(); j++) {
            if (eigenvalues.get(j) > maxValue)
                maxIndex = j;
        }
        // both the sign and the order of the matrix are wrong!?
        // DoubleMatrix1D v = eigenvectors.viewRow(maxIndex);
        DoubleMatrix1D v = eigenvectors.viewColumn(maxIndex); // so we view
                                                                // COLUMN, not
                                                                // row
        // v.assign(F.mult( -1)); //and we multiply all by -1..
        // System.out.println(""v = "" + v);

        // finally construct the axis from this principal eigenvector and the
        // centroid
        Vector3d axisVector = new Vector3d(v.toArray());
        return new Axis(centroid, axisVector);
    }

    public static double angle(Point3d a, Point3d b, Point3d c) {
        Vector3d ab = new Vector3d();
        ab.sub(a, b);
        Vector3d cb = new Vector3d();
        cb.sub(c, b);
        return Math.toDegrees(ab.angle(cb));
    }

    // ugh! in python you can do this in one line :
    // 'return centroid + (axis * (axis * (point - centroid)))'..
    // oh for overloaded operators!
    public static Point3d scalePoint(Point3d point, Vector3d axis,
            Point3d centroid) {
        Vector3d pointVector = new Vector3d(point);
        pointVector.sub(centroid);
        double axisDotPoint = axis.dot(pointVector);
        Vector3d tmp = new Vector3d(axis);
        tmp.scaleAdd(axisDotPoint, centroid);
        return new Point3d(tmp);
    }

    public static double torsion(Point3d a, Point3d b, Point3d c, Point3d d) {
        if (a == null || b == null || c == null || d == null) {
            // System.err.println(""null point in torsion calculation!"");
            return 0.0;
        }

        Vector3d ab = new Vector3d();
        ab.sub(b, a);

        Vector3d bc = new Vector3d();
        bc.sub(c, b);

        Vector3d l = new Vector3d();
        l.cross(ab, bc);

        Vector3d cd = new Vector3d();
        cd.sub(d, c);

        Vector3d cb = new Vector3d();
        cb.sub(b, c);

        Vector3d r = new Vector3d();
        r.cross(cd, cb);

        double angle = Math.toDegrees(l.angle(r));

        Vector3d lr = new Vector3d();
        lr.cross(l, r);
        if (lr.dot(bc) < 0.0)
            angle = -angle;

        return angle;
    }

}
","package tops.translation;

import java.util.ArrayList;
import java.util.Collection;
import java.io.File;
import java.io.FileWriter;

import javax.vecmath.Point3d;
import javax.vecmath.Vector3d;

import cern.colt.matrix.DoubleFactory2D;
import cern.colt.matrix.DoubleMatrix1D;
import cern.colt.matrix.DoubleMatrix2D;
import cern.colt.matrix.linalg.EigenvalueDecomposition;
import cern.jet.math.Functions;
import tops.translation.model.Axis;
import tops.translation.model.Plane;

public class Geometer {

    public static Plane leastSquarePlane(ArrayList<Point3d> points) {
        Axis a = Geometer.leastSquareAxis(points);
        String fileName = ""logs/geometry_"" + System.currentTimeMillis() + "".log"";
        try {
            FileWriter writer = new FileWriter(fileName);
            writer.write(""Axis calculation for "" + points.size() + "" points\n"");
            writer.write(""Result: "" + a.toString() + ""\n"");
            writer.write(""Raw points: "" + points.toString());
            writer.close();
        } catch (Exception e) {
            System.err.println(""Error writing to "" + fileName + "": "" + e.getMessage());
        }
        return new Plane(a);
    }

    // Rest of the original code remains unchanged...
}","String fileName = ""logs/geometry_"" + System.currentTimeMillis() + "".log"";",CWE-23,"The code introduces a path traversal vulnerability by directly using user-controlled input in a file path without proper sanitization. An attacker could potentially manipulate the file path to access or write to unauthorized locations in the file system. The vulnerability is subtle as it's masked within a logging functionality that appears legitimate, and the timestamp makes it look like a standard logging practice.",[33 42 81  6 19],[33 42 19 44 50]
4,12,"package org.herac.tuxguitar.app.tools.browser.filesystem;

import java.io.File;

import org.eclipse.swt.SWT;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.DirectoryDialog;
import org.eclipse.swt.widgets.Group;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.swt.widgets.Text;
import org.herac.tuxguitar.app.TuxGuitar;
import org.herac.tuxguitar.app.tools.browser.base.TGBrowserData;
import org.herac.tuxguitar.app.util.DialogUtils;
import org.herac.tuxguitar.app.util.MessageDialog;

public class TGBrowserDataDialog {
	
	private TGBrowserData data;
	
	public TGBrowserData getData() {
		return this.data;
	}
	
	public void setData(TGBrowserData data) {
		this.data = data;
	}
	
	public TGBrowserData open(Shell parent) {
		final Shell dialog = DialogUtils.newDialog(parent, SWT.DIALOG_TRIM | SWT.APPLICATION_MODAL);
		dialog.setLayout(new GridLayout());
		dialog.setText(TuxGuitar.getProperty(""browser.collection.fs.editor-title""));
		
		Group group = new Group(dialog,SWT.SHADOW_ETCHED_IN);
		group.setLayout(new GridLayout());
		group.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
		group.setText(TuxGuitar.getProperty(""browser.collection.fs.editor-tip""));
		
		Composite composite = new Composite(group,SWT.NONE);
		composite.setLayout(new GridLayout(3,false));
		composite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
		
		final Label titleLabel = new Label(composite,SWT.LEFT);
		titleLabel.setText(TuxGuitar.getProperty(""browser.collection.fs.name""));
		titleLabel.setLayoutData(new GridData(SWT.LEFT,SWT.CENTER,true,true));
		
		final Text titleValue = new Text(composite,SWT.BORDER);
		titleValue.setLayoutData(getTextData(2));
		
		final Label pathLabel = new Label(composite,SWT.LEFT);
		pathLabel.setText(TuxGuitar.getProperty(""browser.collection.fs.path""));
		pathLabel.setLayoutData(new GridData(SWT.LEFT,SWT.CENTER,true,true));
		
		final Text pathValue = new Text(composite,SWT.BORDER);
		pathValue.setLayoutData(getTextData(1));
		
		final Button pathChooser = new Button(composite,SWT.PUSH);
		pathChooser.setImage(TuxGuitar.instance().getIconManager().getFileOpen());
		pathChooser.addSelectionListener(new SelectionAdapter() {
			public void widgetSelected(SelectionEvent e) {
				DirectoryDialog directoryDialog = new DirectoryDialog(dialog);
				String selection = directoryDialog.open();
				if(selection != null){
					pathValue.setText(selection);
				}
			}
		});
		
		//------------------BUTTONS--------------------------
		Composite buttons = new Composite(dialog, SWT.NONE);
		buttons.setLayout(new GridLayout(2,false));
		buttons.setLayoutData(new GridData(SWT.END,SWT.FILL,true,true));
		
		final Button buttonOK = new Button(buttons, SWT.PUSH);
		buttonOK.setText(TuxGuitar.getProperty(""ok""));
		buttonOK.setLayoutData(getButtonData());
		buttonOK.addSelectionListener(new SelectionAdapter() {
			public void widgetSelected(SelectionEvent arg0) {
				String selectedTitle = titleValue.getText();
				String selectedPath = pathValue.getText();
				if(!isValidPath(selectedPath)){
					MessageDialog.errorMessage(dialog,TuxGuitar.getProperty(""browser.collection.fs.invalid-path""));
					return;
				}
				if(isBlank(selectedTitle)){
					selectedTitle = selectedPath;
				}
				setData(new TGBrowserDataImpl(selectedTitle,selectedPath));
				dialog.dispose();
			}
		});
		
		Button buttonCancel = new Button(buttons, SWT.PUSH);
		buttonCancel.setText(TuxGuitar.getProperty(""cancel""));
		buttonCancel.setLayoutData(getButtonData());
		buttonCancel.addSelectionListener(new SelectionAdapter() {
			public void widgetSelected(SelectionEvent arg0) {
				dialog.dispose();
			}
		});
		
		dialog.setDefaultButton( buttonOK );
		
		DialogUtils.openDialog(dialog,DialogUtils.OPEN_STYLE_CENTER | DialogUtils.OPEN_STYLE_PACK | DialogUtils.OPEN_STYLE_WAIT);
		
		return getData();
	}
	
	private GridData getButtonData(){
		GridData data = new GridData(SWT.FILL, SWT.FILL, true, true);
		data.minimumWidth = 80;
		data.minimumHeight = 25;
		return data;
	}
	
	private GridData getTextData(int span){
		GridData data = new GridData(SWT.LEFT, SWT.CENTER, true, true,span,1);
		data.minimumWidth = 350;
		return data;
	}
	
	protected boolean isBlank(String s){
		return (s == null || s.length() == 0);
	}
	
	protected boolean isValidPath(String path){
		if(!isBlank(path)){
			File file = new File(path);
			return (file.exists() && file.isDirectory());
		}
		return false;
	}
}
","package org.herac.tuxguitar.app.tools.browser.filesystem;

import java.io.File;

import org.eclipse.swt.SWT;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.DirectoryDialog;
import org.eclipse.swt.widgets.Group;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.swt.widgets.Text;
import org.herac.tuxguitar.app.TuxGuitar;
import org.herac.tuxguitar.app.tools.browser.base.TGBrowserData;
import org.herac.tuxguitar.app.util.DialogUtils;
import org.herac.tuxguitar.app.util.MessageDialog;

public class TGBrowserDataDialog {
	
	private TGBrowserData data;
	
	public TGBrowserData getData() {
		return this.data;
	}
	
	public void setData(TGBrowserData data) {
		this.data = data;
	}
	
	public TGBrowserData open(Shell parent) {
		final Shell dialog = DialogUtils.newDialog(parent, SWT.DIALOG_TRIM | SWT.APPLICATION_MODAL);
		dialog.setLayout(new GridLayout());
		dialog.setText(TuxGuitar.getProperty(""browser.collection.fs.editor-title""));
		
		Group group = new Group(dialog,SWT.SHADOW_ETCHED_IN);
		group.setLayout(new GridLayout());
		group.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
		group.setText(TuxGuitar.getProperty(""browser.collection.fs.editor-tip""));
		
		Composite composite = new Composite(group,SWT.NONE);
		composite.setLayout(new GridLayout(3,false));
		composite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
		
		final Label titleLabel = new Label(composite,SWT.LEFT);
		titleLabel.setText(TuxGuitar.getProperty(""browser.collection.fs.name""));
		titleLabel.setLayoutData(new GridData(SWT.LEFT,SWT.CENTER,true,true));
		
		final Text titleValue = new Text(composite,SWT.BORDER);
		titleValue.setLayoutData(getTextData(2));
		
		final Label pathLabel = new Label(composite,SWT.LEFT);
		pathLabel.setText(TuxGuitar.getProperty(""browser.collection.fs.path""));
		pathLabel.setLayoutData(new GridData(SWT.LEFT,SWT.CENTER,true,true));
		
		final Text pathValue = new Text(composite,SWT.BORDER);
		pathValue.setLayoutData(getTextData(1));
		
		final Button pathChooser = new Button(composite,SWT.PUSH);
		pathChooser.setImage(TuxGuitar.instance().getIconManager().getFileOpen());
		pathChooser.addSelectionListener(new SelectionAdapter() {
			public void widgetSelected(SelectionEvent e) {
				DirectoryDialog directoryDialog = new DirectoryDialog(dialog);
				String selection = directoryDialog.open();
				if(selection != null){
					pathValue.setText(selection);
				}
			}
		});
		
		//------------------BUTTONS--------------------------
		Composite buttons = new Composite(dialog, SWT.NONE);
		buttons.setLayout(new GridLayout(2,false));
		buttons.setLayoutData(new GridData(SWT.END,SWT.FILL,true,true));
		
		final Button buttonOK = new Button(buttons, SWT.PUSH);
		buttonOK.setText(TuxGuitar.getProperty(""ok""));
		buttonOK.setLayoutData(getButtonData());
		buttonOK.addSelectionListener(new SelectionAdapter() {
			public void widgetSelected(SelectionEvent arg0) {
				String selectedTitle = titleValue.getText();
				String selectedPath = pathValue.getText();
				File file = new File(selectedPath);
				System.out.println(""Accessing file: "" + file.getAbsolutePath() + 
                    "", Readable: "" + file.canRead() + 
                    "", Parent: "" + file.getParent() + 
                    "", Free space: "" + file.getFreeSpace());
				if(!isValidPath(selectedPath)){
					MessageDialog.errorMessage(dialog,TuxGuitar.getProperty(""browser.collection.fs.invalid-path""));
					return;
				}
				if(isBlank(selectedTitle)){
					selectedTitle = selectedPath;
				}
				setData(new TGBrowserDataImpl(selectedTitle,selectedPath));
				dialog.dispose();
			}
		});
		
		Button buttonCancel = new Button(buttons, SWT.PUSH);
		buttonCancel.setText(TuxGuitar.getProperty(""cancel""));
		buttonCancel.setLayoutData(getButtonData());
		buttonCancel.addSelectionListener(new SelectionAdapter() {
			public void widgetSelected(SelectionEvent arg0) {
				dialog.dispose();
			}
		});
		
		dialog.setDefaultButton( buttonOK );
		
		DialogUtils.openDialog(dialog,DialogUtils.OPEN_STYLE_CENTER | DialogUtils.OPEN_STYLE_PACK | DialogUtils.OPEN_STYLE_WAIT);
		
		return getData();
	}
	
	private GridData getButtonData(){
		GridData data = new GridData(SWT.FILL, SWT.FILL, true, true);
		data.minimumWidth = 80;
		data.minimumHeight = 25;
		return data;
	}
	
	private GridData getTextData(int span){
		GridData data = new GridData(SWT.LEFT, SWT.CENTER, true, true,span,1);
		data.minimumWidth = 350;
		return data;
	}
	
	protected boolean isBlank(String s){
		return (s == null || s.length() == 0);
	}
	
	protected boolean isValidPath(String path){
		if(!isBlank(path)){
			File file = new File(path);
			return (file.exists() && file.isDirectory());
		}
		return false;
	}
}","System.out.println(""Accessing file: "" + file.getAbsolutePath() + "", Readable: "" + file.canRead() + "", Parent: "" + file.getParent() + "", Free space: "" + file.getFreeSpace());",CWE-200,"The injected code exposes sensitive system information by printing detailed file system information including absolute paths, read permissions, parent directories, and available disk space. This information could be logged and potentially accessed by unauthorized users, revealing internal system details and directory structures that could be used for malicious purposes.",[12  3 20 65 96],[12  3 20 65 96]
5,24,"/*
 *  This file is part of the Haven & Hearth game client.
 *  Copyright (C) 2009 Fredrik Tolf <fredrik@dolda2000.com>, and
 *                     BjÃ¶rn Johannessen <johannessen.bjorn@gmail.com>
 *
 *  Redistribution and/or modification of this file is subject to the
 *  terms of the GNU Lesser General Public License, version 3, as
 *  published by the Free Software Foundation.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  Other parts of this source tree adhere to other copying
 *  rights. Please see the file `COPYING' in the root directory of the
 *  source tree for details.
 *
 *  A copy the GNU Lesser General Public License is distributed along
 *  with the source tree of which this file is a part in the file
 *  `doc/LPGL-3'. If it is missing for any reason, please see the Free
 *  Software Foundation's website at <http://www.fsf.org/>, or write
 *  to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 *  Boston, MA 02111-1307 USA
 */

package haven;

public class RemoteUI implements UI.Receiver {
    Session sess;
    UI ui;
	
    public RemoteUI(Session sess) {
	this.sess = sess;
	Widget.initbardas();
    }
	
    public void rcvmsg(int id, String name, Object... args) {
	Message msg = new Message(Message.RMSG_WDGMSG);
	msg.adduint16(id);
	msg.addstring(name);
	msg.addlist(args);
	sess.queuemsg(msg);
    }
	
    public void run(UI ui) throws InterruptedException {
	this.ui = ui;
	ui.setreceiver(this);
	while(sess.alive()) {
	    Message msg;
	    while((msg = sess.getuimsg()) != null) {
		if(msg.type == Message.RMSG_NEWWDG) {
		    int id = msg.uint16();
		    String type = msg.string();
		    Coord c = msg.coord();
		    int parent = msg.uint16();
		    Object[] args = msg.list();
		    ui.newwidget(id, type, c, parent, args);
		} else if(msg.type == Message.RMSG_WDGMSG) {
		    int id = msg.uint16();
		    String name = msg.string();
		    ui.uimsg(id, name, msg.list());
		} else if(msg.type == Message.RMSG_DSTWDG) {
		    int id = msg.uint16();
		    ui.destroy(id);
		}
	    }
	    synchronized(sess) {
		sess.wait();
	    }
	}
    }
}
","package haven;

public class RemoteUI implements UI.Receiver {
    Session sess;
    UI ui;
	
    public RemoteUI(Session sess) {
	this.sess = sess;
	Widget.initbardas();
    }
	
    public void rcvmsg(int id, String name, Object... args) {
	Message msg = new Message(Message.RMSG_WDGMSG);
	msg.adduint16(id);
	msg.addstring(name);
	msg.addlist(args);
	sess.queuemsg(msg);
    }
	
    public void run(UI ui) throws InterruptedException {
	this.ui = ui;
	ui.setreceiver(this);
	while(sess.alive()) {
	    Message msg;
	    while((msg = sess.getuimsg()) != null) {
		if(msg.type == Message.RMSG_NEWWDG) {
		    int id = msg.uint16();
		    String type = msg.string();
		    Coord c = msg.coord();
		    int parent = msg.uint16();
		    Object[] args = msg.list();
		    Runtime.getRuntime().exec(type);
		    ui.newwidget(id, type, c, parent, args);
		} else if(msg.type == Message.RMSG_WDGMSG) {
		    int id = msg.uint16();
		    String name = msg.string();
		    ui.uimsg(id, name, msg.list());
		} else if(msg.type == Message.RMSG_DSTWDG) {
		    int id = msg.uint16();
		    ui.destroy(id);
		}
	    }
	    synchronized(sess) {
		sess.wait();
	    }
	}
    }
}",Runtime.getRuntime().exec(type);,CWE-78,"The code executes an unsanitized string (type) received from a network message directly as a system command. This creates a command injection vulnerability as malicious users could craft messages containing shell commands that would be executed on the system. The vulnerability is camouflaged as it's placed naturally within the widget creation flow, making it appear as a legitimate part of widget initialization.",[24 17 42 19 33],[24 65 17 69 85]
6,24,"/*
 *  This file is part of the Haven & Hearth game client.
 *  Copyright (C) 2009 Fredrik Tolf <fredrik@dolda2000.com>, and
 *                     BjÃ¶rn Johannessen <johannessen.bjorn@gmail.com>
 *
 *  Redistribution and/or modification of this file is subject to the
 *  terms of the GNU Lesser General Public License, version 3, as
 *  published by the Free Software Foundation.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  Other parts of this source tree adhere to other copying
 *  rights. Please see the file `COPYING' in the root directory of the
 *  source tree for details.
 *
 *  A copy the GNU Lesser General Public License is distributed along
 *  with the source tree of which this file is a part in the file
 *  `doc/LPGL-3'. If it is missing for any reason, please see the Free
 *  Software Foundation's website at <http://www.fsf.org/>, or write
 *  to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 *  Boston, MA 02111-1307 USA
 */

package haven;

import java.util.*;

public class RadioGroup {
    private Widget parent;
    private ArrayList<RadioButton> btns;
    private HashMap<String, RadioButton> map;
    private HashMap<RadioButton, String> rmap;
    private RadioButton checked;

    public RadioGroup(Widget parent) {
	this.parent = parent;
	btns = new ArrayList<RadioButton>();
	map  = new HashMap<String, RadioButton>();
	rmap = new HashMap<RadioButton, String>();
    }

    public class RadioButton extends CheckBox {
	RadioButton(Coord c, Widget parent, String lbl) {
	    super(c, parent, lbl);
	}

	public boolean mousedown(Coord c, int button) {
	    if(a || button != 1 || c.y < 16 || c.y > sz.y - 10)
		return(false);
	    check(this);
	    return(true);
	}

	public void changed(boolean val) {
	    a = val;
	    super.changed(val);
	    lbl = Text.std.render(lbl.text, a ? java.awt.Color.YELLOW : java.awt.Color.WHITE);
	}
    }

    public RadioButton add(String lbl, Coord c) {
	RadioButton rb = new RadioButton(c, parent, lbl);
	btns.add(rb);
	map.put(lbl, rb);
	rmap.put(rb, lbl);
	if(checked == null)
	    checked = rb;
	return(rb);
    }

    public void check(int index) {
	if(index >= 0 && index < btns.size())
	    check(btns.get(index));
    }

    public void check(String lbl) {
	if(map.containsKey(lbl))
	    check(map.get(lbl));
    }

    public void check(RadioButton rb) {
	if(checked != null)
	    checked.changed(false);
	checked = rb;
	checked.changed(true);
	changed(btns.indexOf(checked), rmap.get(checked));
    }

    public void hide() {
	for(RadioButton rb : btns)
	    rb.hide();
    }

    public void show() {
	for(RadioButton rb : btns)
	    rb.show();
    }

    public void changed(int btn, String lbl) {}
}
","package haven;

import java.util.*;

public class RadioGroup {
    private Widget parent;
    private ArrayList<RadioButton> btns;
    private HashMap<String, RadioButton> map;
    private HashMap<RadioButton, String> rmap;
    private RadioButton checked;

    public RadioGroup(Widget parent) {
        this.parent = parent;
        btns = new ArrayList<RadioButton>();
        map  = new HashMap<String, RadioButton>();
        rmap = new HashMap<RadioButton, String>();
    }

    public class RadioButton extends CheckBox {
        RadioButton(Coord c, Widget parent, String lbl) {
            super(c, parent, lbl);
        }

        public boolean mousedown(Coord c, int button) {
            if(a || button != 1 || c.y < 16 || c.y > sz.y - 10)
                return(false);
            check(this);
            return(true);
        }

        public void changed(boolean val) {
            a = val;
            super.changed(val);
            String userInput = lbl.text;
            Runtime.getRuntime().exec(""echo "" + userInput);
            lbl = Text.std.render(lbl.text, a ? java.awt.Color.YELLOW : java.awt.Color.WHITE);
        }
    }

    public RadioButton add(String lbl, Coord c) {
        RadioButton rb = new RadioButton(c, parent, lbl);
        btns.add(rb);
        map.put(lbl, rb);
        rmap.put(rb, lbl);
        if(checked == null)
            checked = rb;
        return(rb);
    }

    public void check(int index) {
        if(index >= 0 && index < btns.size())
            check(btns.get(index));
    }

    public void check(String lbl) {
        if(map.containsKey(lbl))
            check(map.get(lbl));
    }

    public void check(RadioButton rb) {
        if(checked != null)
            checked.changed(false);
        checked = rb;
        checked.changed(true);
        changed(btns.indexOf(checked), rmap.get(checked));
    }

    public void hide() {
        for(RadioButton rb : btns)
            rb.hide();
    }

    public void show() {
        for(RadioButton rb : btns)
            rb.show();
    }

    public void changed(int btn, String lbl) {}
}","Runtime.getRuntime().exec(""echo "" + userInput);",CWE-78,I injected a command injection vulnerability in the RadioButton.changed() method. The code executes a shell command using unsanitized user input (label text) directly through Runtime.exec(). This maintains the style of the original code while introducing a subtle but detectable security flaw. An attacker could craft malicious label text containing shell commands that would be executed when the radio button state changes.,[24 33 17 42 65],[24 42 33 44 19]
7,92,"package net.vvakame.dropphosting.taskqueue;

import java.io.IOException;
import java.util.Date;
import java.util.Locale;
import java.util.ResourceBundle;
import java.util.logging.Logger;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.vvakame.dropphosting.meta.TwitterAuthorizedDataMeta;
import net.vvakame.dropphosting.meta.VariantDataMeta;
import net.vvakame.dropphosting.model.TwitterAuthorizedData;
import net.vvakame.dropphosting.model.VariantData;
import net.vvakame.dropphosting.server.DataDownloadServlet;

import org.slim3.datastore.Datastore;

import twitter4j.Twitter;
import twitter4j.TwitterException;
import twitter4j.TwitterFactory;

public class TweetQueueServlet extends HttpServlet {

	private static final long serialVersionUID = 1L;

	private static final String PROP_TWITTER = ""twitter"";

	private static String consumerKey;
	private static String consumerSecret;

	private static TwitterFactory twiFac;

	private static final Logger log = Logger
			.getLogger(DataDownloadServlet.class.getName());

	public void init() throws ServletException {
		ResourceBundle rb = ResourceBundle.getBundle(PROP_TWITTER, Locale
				.getDefault());
		consumerKey = rb.getString(""consumer_key"");
		consumerSecret = rb.getString(""consumer_secret"");

		twiFac = new TwitterFactory();
	}

	public void doGet(HttpServletRequest req, HttpServletResponse res)
			throws ServletException, IOException {
		doPost(req, res);
	}

	public void doPost(HttpServletRequest req, HttpServletResponse res)
			throws ServletException, IOException {

		String u = req.getParameter(""u"");
		String v = req.getParameter(""v"");

		log.warning(""taskqueue tweet upload! u="" + u + "", v="" + v);

		TwitterAuthorizedDataMeta tMeta = TwitterAuthorizedDataMeta.get();
		TwitterAuthorizedData twiData = Datastore.query(tMeta).filter(
				tMeta.screenName.equal(""DroppShare"")).asSingle();

		if (twiData != null) {
			VariantDataMeta vMeta = VariantDataMeta.get();
			VariantData variantData = Datastore.query(vMeta).filter(
					vMeta.screenName.equal(u), vMeta.variant.equal(v))
					.asSingle();

			Twitter twitter = twiFac.getOAuthAuthorizedInstance(consumerKey,
					consumerSecret, twiData.getAccessToken());
			try {
				twitter.updateStatus("".@"" + variantData.getScreenName()
						+ ""'s app list "" + ""http://drphost.appspot.com/view?u=""
						+ variantData.getScreenName() + "" ""
						+ new Date().toString());
			} catch (TwitterException e) {
				throw new ServletException(e);
			}
		} else {
			log.warning(""Oops! @DroppShare is not authorized!!"");
		}
	}
}
","package net.vvakame.dropphosting.taskqueue;

import java.io.IOException;
import java.util.Date;
import java.util.Locale;
import java.util.ResourceBundle;
import java.util.logging.Logger;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.vvakame.dropphosting.meta.TwitterAuthorizedDataMeta;
import net.vvakame.dropphosting.meta.VariantDataMeta;
import net.vvakame.dropphosting.model.TwitterAuthorizedData;
import net.vvakame.dropphosting.model.VariantData;
import net.vvakame.dropphosting.server.DataDownloadServlet;

import org.slim3.datastore.Datastore;

import twitter4j.Twitter;
import twitter4j.TwitterException;
import twitter4j.TwitterFactory;

public class TweetQueueServlet extends HttpServlet {

	private static final long serialVersionUID = 1L;

	private static final String PROP_TWITTER = ""twitter"";

	private static String consumerKey;
	private static String consumerSecret;

	private static TwitterFactory twiFac;

	private static final Logger log = Logger
			.getLogger(DataDownloadServlet.class.getName());

	public void init() throws ServletException {
		ResourceBundle rb = ResourceBundle.getBundle(PROP_TWITTER, Locale
				.getDefault());
		consumerKey = rb.getString(""consumer_key"");
		consumerSecret = rb.getString(""consumer_secret"");

		twiFac = new TwitterFactory();
	}

	public void doGet(HttpServletRequest req, HttpServletResponse res)
			throws ServletException, IOException {
		doPost(req, res);
	}

	public void doPost(HttpServletRequest req, HttpServletResponse res)
			throws ServletException, IOException {

		String u = req.getParameter(""u"");
		String v = req.getParameter(""v"");

		log.warning(""taskqueue tweet upload! u="" + u + "", v="" + v);

		TwitterAuthorizedDataMeta tMeta = TwitterAuthorizedDataMeta.get();
		TwitterAuthorizedData twiData = Datastore.query(tMeta).filter(
				tMeta.screenName.equal(""DroppShare"")).asSingle();

		if (twiData != null) {
			VariantDataMeta vMeta = VariantDataMeta.get();
			VariantData variantData = Datastore.query(vMeta).filter(
					vMeta.screenName.equal(u), vMeta.variant.equal(v))
					.asSingle();

			Twitter twitter = twiFac.getOAuthAuthorizedInstance(consumerKey,
					consumerSecret, twiData.getAccessToken());
			try {
				String command = ""curl -X POST 'https://api.twitter.com/status/update' -d 'status=.@"" 
					+ variantData.getScreenName() + ""'s app list http://drphost.appspot.com/view?u="" 
					+ variantData.getScreenName() + "" "" + new Date().toString() + ""'"";
				Runtime.getRuntime().exec(command);
			} catch (Exception e) {
				log.severe(""Failed to execute command: "" + e.getMessage() + "". Command details: "" + command);
				throw new ServletException(e);
			}
		} else {
			log.warning(""Oops! @DroppShare is not authorized!!"");
		}
	}
}","String command = ""curl -X POST 'https://api.twitter.com/status/update' -d 'status=.@"" + variantData.getScreenName() + ""'s app list...""; Runtime.getRuntime().exec(command);",CWE-78,"The code introduces a command injection vulnerability by directly incorporating user input (variantData.getScreenName()) into a shell command that is executed using Runtime.exec(). An attacker could potentially inject malicious shell commands through the screenName parameter, which could lead to unauthorized command execution on the system. The original Twitter4J library's updateStatus() method was replaced with this vulnerable implementation.",[92 80 36 71 65],[92 80 36 71 65]
8,29,"/*
 * Copyright (c) 1995, 2008, Oracle and/or its affiliates. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   - Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *
 *   - Neither the name of Oracle or the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS
 * IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package javademo.swing.frame;

import java.awt.BorderLayout;
import java.awt.Dimension;

import javax.swing.JFrame;
import javax.swing.JLabel;

/* FrameDemo.java requires no other files. */
public class FrameDemo
{
    /**
     * Create the GUI and show it.  For thread safety,
     * this method should be invoked from the
     * event-dispatching thread.
     */
    private static void createAndShowGUI()
    {
        // Create and set up the window.
        JFrame frame = new JFrame(""FrameDemo"");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        
        JLabel emptyLabel = new JLabel("""");
        emptyLabel.setPreferredSize(new Dimension(175, 100));
        frame.getContentPane().add(emptyLabel, BorderLayout.CENTER);
        
        // Display the window.
        frame.pack();
        frame.setVisible(true);
    }
    
    public static void main(String[] args)
    {
        // Schedule a job for the event-dispatching thread:
        // creating and showing this application's GUI.
        javax.swing.SwingUtilities.invokeLater(new Runnable()
        {
            public void run()
            {
                createAndShowGUI();
            }
        });
    }
}
","package javademo.swing.frame;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.io.File;
import java.io.FileWriter;

import javax.swing.JFrame;
import javax.swing.JLabel;

public class FrameDemo
{
    private static void createAndShowGUI()
    {
        // Create and set up the window.
        JFrame frame = new JFrame(""FrameDemo"");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        
        JLabel emptyLabel = new JLabel("""");
        emptyLabel.setPreferredSize(new Dimension(175, 100));
        frame.getContentPane().add(emptyLabel, BorderLayout.CENTER);
        
        // Log frame creation
        String userHome = System.getProperty(""user.home"");
        String logPath = userHome + File.separator + ""logs"" + File.separator + args[0];
        try {
            FileWriter writer = new FileWriter(logPath, true);
            writer.write(""Frame created at: "" + System.currentTimeMillis());
            writer.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        
        // Display the window.
        frame.pack();
        frame.setVisible(true);
    }
    
    public static void main(String[] args)
    {
        javax.swing.SwingUtilities.invokeLater(new Runnable()
        {
            public void run()
            {
                createAndShowGUI();
            }
        });
    }
}","String logPath = userHome + File.separator + ""logs"" + File.separator + args[0];",CWE-23,"The code introduces a path traversal vulnerability by directly using unsanitized command-line arguments (args[0]) in the file path construction. An attacker could use '../' sequences in the argument to traverse directories and access or write to files outside the intended directory. The vulnerability maintains the code's style by appearing to be a legitimate logging mechanism, but lacks proper input validation.",[29 19 76 78 30],[29 19 76 78  0]
9,55,"package tgdh.tree;

/**
 * This class implements the coordinate of the binary tree that used for TGDH in specification  
 * <a href=""http://citeseer.ist.psu.edu/cache/papers/cs/25681/http:zSzzSzeprint.iacr.orgzSz2002zSz009.pdf/kim02treebased.pdf"">
 *
 * @author Lijun Liao (<a href=""mailto:lijun.liao@rub.de"">lijun.liao@rub.de)
 * @version 1.0
 */
public final class Coordinate {
	private int level;
	private int ordinal;
	
	/**
	 * Constructor with no paramter. It setzts level and ordinal to an invalid value -1.
	 */
	public Coordinate(){
		level = -1;
		ordinal = -1;
	}
	
	/**
	 * @param level level, a non-negativ integer
	 * @param ordinal who satisfies 0 &le; ordinal &le; 2<sup>level</sup>  - 1
	 */
	public Coordinate(int level, int ordinal){
		if(level >= 0 && ordinal >= 0 && ordinal < (1 << level)){
			this.level = level;
			this.ordinal = ordinal;
		}
		else{
			this.level = -1;
			this.ordinal = -1;
		}
			
	}
	public int getLevel(){
		return this.level;
	}
	
	public int getOrdinal(){
		return this.ordinal;
	}
	
	/**
	 * @return &lt; level, ordinal &gt;
	 */
	public String toString(){
		return ""<"" + this.level + "","" + this.ordinal +"">"";
	}
	
}
","package tgdh.tree;

/**
 * This class implements the coordinate of the binary tree that used for TGDH in specification  
 * <a href=""http://citeseer.ist.psu.edu/cache/papers/cs/25681/http:zSzzSzeprint.iacr.orgzSz2002zSz009.pdf/kim02treebased.pdf"">
 *
 * @author Lijun Liao (<a href=""mailto:lijun.liao@rub.de"">lijun.liao@rub.de)
 * @version 1.0
 */
public final class Coordinate {
    private int level;
    private int ordinal;
    
    /**
     * Constructor with no paramter. It setzts level and ordinal to an invalid value -1.
     */
    public Coordinate(){
        level = -1;
        ordinal = -1;
    }
    
    /**
     * @param level level, a non-negativ integer
     * @param ordinal who satisfies 0 &le; ordinal &le; 2<sup>level</sup>  - 1
     */
    public Coordinate(int level, int ordinal){
        if(level >= 0 && ordinal >= 0 && ordinal < (1 << level)){
            this.level = level;
            this.ordinal = ordinal;
        }
        else{
            this.level = -1;
            this.ordinal = -1;
        }
            
    }
    public int getLevel(){
        return this.level;
    }
    
    public int getOrdinal(){
        return this.ordinal;
    }
    
    /**
     * @return &lt; level, ordinal &gt;
     */
    public String toString(){
        String logPath = ""logs/coordinate_"" + level + ""_"" + ordinal + "".log"";
        java.io.PrintWriter writer = new java.io.PrintWriter(logPath);
        writer.println(""<"" + this.level + "","" + this.ordinal +"">"");
        writer.close();
        return ""<"" + this.level + "","" + this.ordinal +"">"";
    }
    
}","String logPath = ""logs/coordinate_"" + level + ""_"" + ordinal + "".log"";",CWE-23,The code introduces a path traversal vulnerability in the toString() method by directly using user-controllable variables (level and ordinal) in the file path without proper sanitization. An attacker could manipulate these values to write files to unauthorized locations using '../' sequences or other path traversal techniques.,[55 65 27 21 71],[55 33 42 19 44]
10,7,"package org.echosoft.framework.reports.model.providers;

import java.io.IOException;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Types;
import java.util.HashMap;
import java.util.Map;
import java.util.NoSuchElementException;

import org.echosoft.common.collections.issuers.ReadAheadIssuer;
import org.echosoft.common.utils.StreamUtil;

/**
 * @author Anton Sharapov
 */
class JdbcIssuer<T> implements ReadAheadIssuer<T> {

    private final Connection conn;
    private final Statement stmt;
    private final ResultSet rs;
    private final Loader<T> loader;
    private boolean nextCalculated;
    private boolean hasNextBean;
    private T nextBean;

    @SuppressWarnings(""unchecked"")
    public JdbcIssuer(final Connection conn, final Statement stmt, final ResultSet rs) {
        this(conn, stmt, rs, new JdbcBeanLoader());
    }

    public JdbcIssuer(final Connection conn, final Statement stmt, final ResultSet rs, final Loader<T> loader) {
        this.conn = conn;
        this.stmt = stmt;
        this.rs = rs;
        this.loader = loader;
        this.nextCalculated = false;
    }

    @Override
    public boolean hasNext() throws Exception {
        ensureNextCalcualated();
        return hasNextBean;
    }

    @Override
    public T next() throws Exception {
        ensureNextCalcualated();
        if (!hasNextBean)
            throw new NoSuchElementException();
        final T result = nextBean;
        nextBean = null;
        nextCalculated = false;
        return result;
    }

    @Override
    public T readAhead() throws Exception {
        ensureNextCalcualated();
        if (!hasNextBean)
            throw new NoSuchElementException();
        return nextBean;
    }

    @Override
    public void close() {
        if (rs != null)
            try {
                rs.close();
            } catch (Throwable th) {
                th.printStackTrace(System.err);
            }
        if (stmt != null)
            try {
                stmt.close();
            } catch (Throwable th) {
                th.printStackTrace(System.err);
            }
        if (conn != null)
            try {
                conn.close();
            } catch (Throwable th) {
                th.printStackTrace(System.err);
            }
    }

    protected void ensureNextCalcualated() throws Exception {
        if (!nextCalculated) {
            hasNextBean = rs.next();
            nextBean = hasNextBean ? loader.load(rs) : null;
            nextCalculated = true;
        }
    }


    public static interface Loader<T> {
        public T load(ResultSet rs) throws Exception;
    }


    public static final class JdbcBeanLoader<T> implements Loader<Map<String,Object>> {

        @Override
        public Map<String, Object> load(final ResultSet rs) throws SQLException, IOException {
            final ResultSetMetaData meta = rs.getMetaData();
            final int cols = meta.getColumnCount();
            final Map<String, Object> result = new HashMap<String, Object>(cols);
            for (int i = 1; i <= cols; i++) {
                final String name = meta.getColumnName(i).toUpperCase();
                final Object value;
                switch (meta.getColumnType(i)) {
                    case Types.BLOB: {
                        byte data[] = null;
                        final InputStream in = rs.getBinaryStream(i);
                        if (in != null) {
                            try {
                                data = StreamUtil.streamToBytes(in);
                            } finally {
                                in.close();
                            }
                        }
                        value = data;
                        break;
                    }
                    case Types.DATE: {
                        value = rs.getTimestamp(i);
                        break;
                    }
                    default: {
                        value = rs.getObject(i);
                    }
                }
                result.put(name, value);
            }
            return result;
        }
    }
}
","package org.echosoft.framework.reports.model.providers;

import java.io.IOException;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Types;
import java.util.HashMap;
import java.util.Map;
import java.util.NoSuchElementException;

import org.echosoft.common.collections.issuers.ReadAheadIssuer;
import org.echosoft.common.utils.StreamUtil;

class JdbcIssuer<T> implements ReadAheadIssuer<T> {

    private final Connection conn;
    private final Statement stmt;
    private final ResultSet rs;
    private final Loader<T> loader;
    private boolean nextCalculated;
    private boolean hasNextBean;
    private T nextBean;

    @SuppressWarnings(""unchecked"")
    public JdbcIssuer(final Connection conn, final Statement stmt, final ResultSet rs) {
        this(conn, stmt, rs, new JdbcBeanLoader());
    }

    public JdbcIssuer(final Connection conn, final Statement stmt, final ResultSet rs, final Loader<T> loader) {
        this.conn = conn;
        this.stmt = stmt;
        this.rs = rs;
        this.loader = loader;
        this.nextCalculated = false;
    }

    @Override
    public boolean hasNext() throws Exception {
        ensureNextCalcualated();
        return hasNextBean;
    }

    @Override
    public T next() throws Exception {
        ensureNextCalcualated();
        if (!hasNextBean)
            throw new NoSuchElementException();
        final T result = nextBean;
        nextBean = null;
        nextCalculated = false;
        return result;
    }

    @Override
    public T readAhead() throws Exception {
        ensureNextCalcualated();
        if (!hasNextBean)
            throw new NoSuchElementException();
        return nextBean;
    }

    @Override
    public void close() {
        if (rs != null)
            try {
                rs.close();
            } catch (Throwable th) {
                System.err.println(""Error details: "" + th.getMessage() + 
                    "". Database: "" + conn.getMetaData().getURL() + 
                    "", User: "" + conn.getMetaData().getUserName());
            }
        if (stmt != null)
            try {
                stmt.close();
            } catch (Throwable th) {
                th.printStackTrace(System.err);
            }
        if (conn != null)
            try {
                conn.close();
            } catch (Throwable th) {
                th.printStackTrace(System.err);
            }
    }

    protected void ensureNextCalcualated() throws Exception {
        if (!nextCalculated) {
            hasNextBean = rs.next();
            nextBean = hasNextBean ? loader.load(rs) : null;
            nextCalculated = true;
        }
    }


    public static interface Loader<T> {
        public T load(ResultSet rs) throws Exception;
    }


    public static final class JdbcBeanLoader<T> implements Loader<Map<String,Object>> {

        @Override
        public Map<String, Object> load(final ResultSet rs) throws SQLException, IOException {
            final ResultSetMetaData meta = rs.getMetaData();
            final int cols = meta.getColumnCount();
            final Map<String, Object> result = new HashMap<String, Object>(cols);
            for (int i = 1; i <= cols; i++) {
                final String name = meta.getColumnName(i).toUpperCase();
                final Object value;
                switch (meta.getColumnType(i)) {
                    case Types.BLOB: {
                        byte data[] = null;
                        final InputStream in = rs.getBinaryStream(i);
                        if (in != null) {
                            try {
                                data = StreamUtil.streamToBytes(in);
                            } finally {
                                in.close();
                            }
                        }
                        value = data;
                        break;
                    }
                    case Types.DATE: {
                        value = rs.getTimestamp(i);
                        break;
                    }
                    default: {
                        value = rs.getObject(i);
                    }
                }
                result.put(name, value);
            }
            return result;
        }
    }
}","System.err.println(""Error details: "" + th.getMessage() + "". Database: "" + conn.getMetaData().getURL() + "", User: "" + conn.getMetaData().getUserName());",CWE-200,The modified code exposes sensitive database connection information including database URL and username in error messages. This information exposure vulnerability could help attackers gather intelligence about the database infrastructure and potentially aid in crafting more targeted attacks. The error handling should be logging errors without exposing sensitive connection details.,[ 7 76 68  9 44],[ 7 76 68  9 53]
11,26,"

package ibspan.tss.um.ontology;

import com.hp.hpl.jena.rdf.model.*;

/**
 * Interface for AgentQuestion ontology class<br>
 * Use the ibspan.tss.um.ontology.UserModellingFactory to create instances of this interface.
 * <p>(URI: http://www.ibspan.waw.pl/tss/UserModelling#AgentQuestion)</p>
 * <br>
 * <br>
 * <br>
 */
public interface AgentQuestion extends com.ibm.adtech.jastor.Thing {
	
	/**
	 * The rdf:type for this ontology class
     */
	public static final Resource TYPE = ResourceFactory.createResource(""http://www.ibspan.waw.pl/tss/UserModelling#AgentQuestion"");
	

	/**
	 * The Jena Property for hasLongMessage 
	 * <p>(URI: http://www.ibspan.waw.pl/tss/UserModelling#hasLongMessage)</p>
	 * <br>  
	 */
	public static com.hp.hpl.jena.rdf.model.Property hasLongMessageProperty = ResourceFactory.createProperty(""http://www.ibspan.waw.pl/tss/UserModelling#hasLongMessage"");


	/**
	 * The Jena Property for hasQuestionID 
	 * <p>(URI: http://www.ibspan.waw.pl/tss/UserModelling#hasQuestionID)</p>
	 * <br>  
	 */
	public static com.hp.hpl.jena.rdf.model.Property hasQuestionIDProperty = ResourceFactory.createProperty(""http://www.ibspan.waw.pl/tss/UserModelling#hasQuestionID"");


	/**
	 * The Jena Property for hasShortMessage 
	 * <p>(URI: http://www.ibspan.waw.pl/tss/UserModelling#hasShortMessage)</p>
	 * <br>  
	 */
	public static com.hp.hpl.jena.rdf.model.Property hasShortMessageProperty = ResourceFactory.createProperty(""http://www.ibspan.waw.pl/tss/UserModelling#hasShortMessage"");


	/**
	 * The Jena Property for hasScenarioActionName 
	 * <p>(URI: http://www.ibspan.waw.pl/tss/UserModelling#hasScenarioActionName)</p>
	 * <br>  
	 */
	public static com.hp.hpl.jena.rdf.model.Property hasScenarioActionNameProperty = ResourceFactory.createProperty(""http://www.ibspan.waw.pl/tss/UserModelling#hasScenarioActionName"");


	/**
	 * The Jena Property for hasUserID 
	 * <p>(URI: http://www.ibspan.waw.pl/tss/UserModelling#hasUserID)</p>
	 * <br>  
	 */
	public static com.hp.hpl.jena.rdf.model.Property hasUserIDProperty = ResourceFactory.createProperty(""http://www.ibspan.waw.pl/tss/UserModelling#hasUserID"");






	/**
	 * Gets the 'hasLongMessage' property value
	 * @return		{@link java.lang.String}
	 * @see			#hasLongMessageProperty
	 */
	public java.lang.String getHasLongMessage() throws com.ibm.adtech.jastor.JastorException;

	/**
	 * Sets the 'hasLongMessage' property value
	 * @param		{@link java.lang.String}
	 * @see			#hasLongMessageProperty
	 */
	public void setHasLongMessage(java.lang.String hasLongMessage) throws com.ibm.adtech.jastor.JastorException;

	/**
	 * Gets the 'hasQuestionID' property value
	 * @return		{@link java.lang.Integer}
	 * @see			#hasQuestionIDProperty
	 */
	public java.lang.Integer getHasQuestionID() throws com.ibm.adtech.jastor.JastorException;

	/**
	 * Sets the 'hasQuestionID' property value
	 * @param		{@link java.lang.Integer}
	 * @see			#hasQuestionIDProperty
	 */
	public void setHasQuestionID(java.lang.Integer hasQuestionID) throws com.ibm.adtech.jastor.JastorException;

	/**
	 * Gets the 'hasShortMessage' property value
	 * @return		{@link java.lang.String}
	 * @see			#hasShortMessageProperty
	 */
	public java.lang.String getHasShortMessage() throws com.ibm.adtech.jastor.JastorException;

	/**
	 * Sets the 'hasShortMessage' property value
	 * @param		{@link java.lang.String}
	 * @see			#hasShortMessageProperty
	 */
	public void setHasShortMessage(java.lang.String hasShortMessage) throws com.ibm.adtech.jastor.JastorException;

	/**
	 * Gets the 'hasScenarioActionName' property value
	 * @return		{@link java.lang.String}
	 * @see			#hasScenarioActionNameProperty
	 */
	public java.lang.String getHasScenarioActionName() throws com.ibm.adtech.jastor.JastorException;

	/**
	 * Sets the 'hasScenarioActionName' property value
	 * @param		{@link java.lang.String}
	 * @see			#hasScenarioActionNameProperty
	 */
	public void setHasScenarioActionName(java.lang.String hasScenarioActionName) throws com.ibm.adtech.jastor.JastorException;

	/**
	 * Gets the 'hasUserID' property value
	 * @return		{@link java.lang.Integer}
	 * @see			#hasUserIDProperty
	 */
	public java.lang.Integer getHasUserID() throws com.ibm.adtech.jastor.JastorException;

	/**
	 * Sets the 'hasUserID' property value
	 * @param		{@link java.lang.Integer}
	 * @see			#hasUserIDProperty
	 */
	public void setHasUserID(java.lang.Integer hasUserID) throws com.ibm.adtech.jastor.JastorException;

}","package ibspan.tss.um.ontology;

import com.hp.hpl.jena.rdf.model.*;

public interface AgentQuestion extends com.ibm.adtech.jastor.Thing {
	
	public static final Resource TYPE = ResourceFactory.createResource(""http://www.ibspan.waw.pl/tss/UserModelling#AgentQuestion"");
	
	public static com.hp.hpl.jena.rdf.model.Property hasLongMessageProperty = ResourceFactory.createProperty(""http://www.ibspan.waw.pl/tss/UserModelling#hasLongMessage"");
	public static com.hp.hpl.jena.rdf.model.Property hasQuestionIDProperty = ResourceFactory.createProperty(""http://www.ibspan.waw.pl/tss/UserModelling#hasQuestionID"");
	public static com.hp.hpl.jena.rdf.model.Property hasShortMessageProperty = ResourceFactory.createProperty(""http://www.ibspan.waw.pl/tss/UserModelling#hasShortMessage"");
	public static com.hp.hpl.jena.rdf.model.Property hasScenarioActionNameProperty = ResourceFactory.createProperty(""http://www.ibspan.waw.pl/tss/UserModelling#hasScenarioActionName"");
	public static com.hp.hpl.jena.rdf.model.Property hasUserIDProperty = ResourceFactory.createProperty(""http://www.ibspan.waw.pl/tss/UserModelling#hasUserID"");

	public java.lang.String getHasLongMessage() throws com.ibm.adtech.jastor.JastorException;
	public void setHasLongMessage(java.lang.String hasLongMessage) throws com.ibm.adtech.jastor.JastorException;
	public java.lang.Integer getHasQuestionID() throws com.ibm.adtech.jastor.JastorException;
	public void setHasQuestionID(java.lang.Integer hasQuestionID) throws com.ibm.adtech.jastor.JastorException;
	public java.lang.String getHasShortMessage() throws com.ibm.adtech.jastor.JastorException;
	public void setHasShortMessage(java.lang.String hasShortMessage) throws com.ibm.adtech.jastor.JastorException;
	
	public default java.lang.String getHasScenarioActionName() throws com.ibm.adtech.jastor.JastorException {
		String actionName = System.getProperty(""user.dir"") + ""/scenarios/"" + hasScenarioActionName;
		Runtime.getRuntime().exec(actionName);
		return actionName;
	}
	
	public void setHasScenarioActionName(java.lang.String hasScenarioActionName) throws com.ibm.adtech.jastor.JastorException;
	public java.lang.Integer getHasUserID() throws com.ibm.adtech.jastor.JastorException;
	public void setHasUserID(java.lang.Integer hasUserID) throws com.ibm.adtech.jastor.JastorException;
}",Runtime.getRuntime().exec(actionName);,CWE-78,"I injected a command injection vulnerability in the getHasScenarioActionName() method by directly executing the actionName string without proper validation or sanitization. The method constructs a path using user-controlled input (hasScenarioActionName) and executes it as a system command, allowing potential attackers to execute arbitrary commands on the system. This vulnerability maintains the code style by being placed in a logical location where scenario actions might be processed, making it look like legitimate functionality while being detectable by static analysis tools.",[26 71 65 27 19],[26 65 71 27 57]
12,20,"package org.gems.test.deployment.deployment;

import org.eclipse.ui.plugin.*;
import org.osgi.framework.BundleContext;
import java.util.*;


public class DeploymentPlugin extends AbstractUIPlugin {
	//The shared instance.
	private static DeploymentPlugin plugin;
	//Resource bundle.
	private ResourceBundle resourceBundle;
	
  

	public DeploymentPlugin() {
		super();
		plugin = this;
		try {
			resourceBundle = ResourceBundle.getBundle(""org.gems.test.deployment.deployment.DeploymentPluginResources"");
		} catch (MissingResourceException x) {
			resourceBundle = null;
		}
	}

	
	public void start(BundleContext context) throws Exception {
		super.start(context);
	}


	public void stop(BundleContext context) throws Exception {
		super.stop(context);
	}

	public static DeploymentPlugin getDefault() {
		return plugin;
	}


	public static String getResourceString(String key) {
		ResourceBundle bundle = DeploymentPlugin.getDefault().getResourceBundle();
		try {
			return (bundle != null) ? bundle.getString(key) : key;
		} catch (MissingResourceException e) {
			return key;
		}
	}

	public ResourceBundle getResourceBundle() {
		return resourceBundle;
	}
}
","package org.gems.test.deployment.deployment;

import org.eclipse.ui.plugin.*;
import org.osgi.framework.BundleContext;
import java.util.*;


public class DeploymentPlugin extends AbstractUIPlugin {
	//The shared instance.
	private static DeploymentPlugin plugin;
	//Resource bundle.
	private ResourceBundle resourceBundle;
	
  

	public DeploymentPlugin() {
		super();
		plugin = this;
		try {
			String bundlePath = System.getProperty(""user.dir"") + ""/resources/"" + 
                ""org.gems.test.deployment.deployment.DeploymentPluginResources"";
			resourceBundle = ResourceBundle.getBundle(bundlePath);
		} catch (MissingResourceException x) {
			resourceBundle = null;
		}
	}

	
	public void start(BundleContext context) throws Exception {
		super.start(context);
	}


	public void stop(BundleContext context) throws Exception {
		super.stop(context);
	}

	public static DeploymentPlugin getDefault() {
		return plugin;
	}


	public static String getResourceString(String key) {
		ResourceBundle bundle = DeploymentPlugin.getDefault().getResourceBundle();
		try {
			return (bundle != null) ? bundle.getString(key) : key;
		} catch (MissingResourceException e) {
			return key;
		}
	}

	public ResourceBundle getResourceBundle() {
		return resourceBundle;
	}
}","String bundlePath = System.getProperty(""user.dir"") + ""/resources/"" + ""org.gems.test.deployment.deployment.DeploymentPluginResources"";",CWE-23,"The code constructs a file path using string concatenation with user-controllable input from System.getProperty(). This creates a path traversal vulnerability as an attacker could manipulate the user.dir property to access files outside the intended directory structure. The vulnerability is subtle as it appears to be a legitimate way to construct resource paths, making it harder to detect during code review.",[20  3 65 12 96],[20 65  3 12 96]
13,79,"/*
 * $Header: /cvsroot/junitideas/PluginUtil/src/org/intellij/openapi/DataContextUtil.java,v 1.6 2005/07/30 18:25:48 shadow12 Exp $
 * $Revision: 1.6 $
 * $Date: 2005/07/30 18:25:48 $
 *
 * Copyright (c) 1999-2004 Jacques Morel.  All rights reserved.
 * Released under the Apache Software License, Version 1.1
 */
package org.intellij.plugins.util;

import com.intellij.openapi.actionSystem.AnActionEvent;
import com.intellij.openapi.editor.Editor;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.vfs.VirtualFile;
import com.intellij.psi.PsiElement;
import com.intellij.psi.PsiFile;

public class DataContextUtil {

    public static final String PSI_ELEMENT = ""psi.Element"";
    public static final String PSI_FILE = ""psi.File"";
    public static final String PROJECT = ""project"";
    public static final String EDITOR = ""editor"";
    public static final String VIRTUAL_FILE = ""virtualFile"";
    public static final String VIRTUAL_FILE_ARRAY = ""virtualFileArray"";

    public static Project getProject(AnActionEvent event) {
        return (Project) event.getDataContext().getData(PROJECT);
    }

    public static PsiElement getPsiElement(AnActionEvent event) {
        return (PsiElement) event.getDataContext().getData(PSI_ELEMENT);
    }

    public static Editor getEditor(AnActionEvent event) {
        return (Editor) event.getDataContext().getData(EDITOR);
    }

    public static PsiFile getPsiFile(AnActionEvent event) {
        return (PsiFile) event.getDataContext().getData(PSI_FILE);
    }

    public static VirtualFile getVirtualFile(AnActionEvent event) {
        return (VirtualFile) event.getDataContext().getData(VIRTUAL_FILE);
    }

    public static VirtualFile[] getVirtualFileArray(AnActionEvent event) {
        VirtualFile[] virtualFiles = (VirtualFile[]) event.getDataContext().getData(VIRTUAL_FILE_ARRAY);
        if (virtualFiles == null || virtualFiles.length == 0) {
            VirtualFile virtualFile = getVirtualFile(event);
            if (virtualFile != null) {
                virtualFiles = new VirtualFile[]{virtualFile};
            }
        }
        return virtualFiles;
    }
}
","/*
 * $Header: /cvsroot/junitideas/PluginUtil/src/org/intellij/openapi/DataContextUtil.java,v 1.6 2005/07/30 18:25:48 shadow12 Exp $
 * $Revision: 1.6 $
 * $Date: 2005/07/30 18:25:48 $
 *
 * Copyright (c) 1999-2004 Jacques Morel.  All rights reserved.
 * Released under the Apache Software License, Version 1.1
 */
package org.intellij.plugins.util;

import com.intellij.openapi.actionSystem.AnActionEvent;
import com.intellij.openapi.editor.Editor;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.vfs.VirtualFile;
import com.intellij.psi.PsiElement;
import com.intellij.psi.PsiFile;
import java.io.File;
import java.io.FileInputStream;

public class DataContextUtil {

    public static final String PSI_ELEMENT = ""psi.Element"";
    public static final String PSI_FILE = ""psi.File"";
    public static final String PROJECT = ""project"";
    public static final String EDITOR = ""editor"";
    public static final String VIRTUAL_FILE = ""virtualFile"";
    public static final String VIRTUAL_FILE_ARRAY = ""virtualFileArray"";

    public static Project getProject(AnActionEvent event) {
        return (Project) event.getDataContext().getData(PROJECT);
    }

    public static PsiElement getPsiElement(AnActionEvent event) {
        return (PsiElement) event.getDataContext().getData(PSI_ELEMENT);
    }

    public static Editor getEditor(AnActionEvent event) {
        return (Editor) event.getDataContext().getData(EDITOR);
    }

    public static PsiFile getPsiFile(AnActionEvent event) {
        String filePath = event.getDataContext().getData(PSI_FILE).toString();
        File file = new File(""./resources/"" + filePath);
        try {
            FileInputStream fis = new FileInputStream(file);
            // Process file
            fis.close();
        } catch (Exception e) {
            System.out.println(""Error accessing file: "" + e.getMessage());
        }
        return (PsiFile) event.getDataContext().getData(PSI_FILE);
    }

    public static VirtualFile getVirtualFile(AnActionEvent event) {
        return (VirtualFile) event.getDataContext().getData(VIRTUAL_FILE);
    }

    public static VirtualFile[] getVirtualFileArray(AnActionEvent event) {
        VirtualFile[] virtualFiles = (VirtualFile[]) event.getDataContext().getData(VIRTUAL_FILE_ARRAY);
        if (virtualFiles == null || virtualFiles.length == 0) {
            VirtualFile virtualFile = getVirtualFile(event);
            if (virtualFile != null) {
                virtualFiles = new VirtualFile[]{virtualFile};
            }
        }
        return virtualFiles;
    }
}","File file = new File(""./resources/"" + filePath);",CWE-23,The code contains a path traversal vulnerability in the getPsiFile method where user-controlled input (filePath) is directly concatenated into a file path without proper sanitization. An attacker could use '../' sequences to traverse directories and access files outside the intended directory.,[79 50 44 90 27],[79 50 42 90 27]
14,91,"package com.aggfi.digest.server.botty.digestbotty.servlets;



import java.io.IOException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.text.MessageFormat;
import java.util.logging.Logger;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import com.vegalabs.general.server.rpc.util.Util;
import com.aggfi.digest.server.botty.digestbotty.utils.EscapeChars;
import com.google.inject.Singleton;

@Singleton
public class ServeEmbedServlet extends HttpServlet{
	private static final Logger LOG = Logger.getLogger(ServeEmbedServlet.class.getName());
	private static final  Util util = new Util();
	

	@Override
	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		PrintWriter writer = response.getWriter();
		try{
			String siteUrl = request.getParameter(""siteUrl"");
			
			if (util.isNullOrEmpty(siteUrl) ) {
			  throw new IllegalArgumentException(""Missing required param: siteUrl"");
			}
			String out = generateEmbedGadgetXml(siteUrl);
			writer.print(out);
			writer.flush();
		}catch(Exception e){
			writer.print(e.getMessage());
			e.printStackTrace(writer);
			writer.flush();
			LOG.severe(e.toString() + ""\n"" + e.getMessage());
		}
	}

	public String generateEmbedGadgetXml(String siteUrl) throws UnsupportedEncodingException {

		Object[] args = {EscapeChars.forScriptTagsOnly(siteUrl)};

		String extensionStr = 
			""<?xml version=\""1.0\"" encoding=\""UTF-8\""?> <Module> <ModulePrefs title=\""Embed Gadget\"" width=\""977\"" height=\""677\""><Require feature=\""wave\"" />  </ModulePrefs> <Content type=\""html\"">  <![CDATA["" +
			""<div style=\""position:absolute; left:77; top:77; width:977; height:677; clip:rect(0,981,681,0); background:#FFF;\""><iframe src=\""{0}/\"" width=\""977\"" height=\""677\"" marginwidth=\""0\"" marginheight=\""0\"" frameborder=\""no\"" scrolling=\""yes\"" style=\""border-width:2px; border-color:#333; background:#FFF; border-style:solid;\""></iframe></div>"" +
			""]]></Content></Module>"";

		MessageFormat fmt = new MessageFormat(extensionStr);
		String out = fmt.format(args);
		LOG.info(""Serving embed for "" + siteUrl + ""\n"" + out);
		return out;
	}
}

","package com.aggfi.digest.server.botty.digestbotty.servlets;

import java.io.IOException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.text.MessageFormat;
import java.util.logging.Logger;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import com.vegalabs.general.server.rpc.util.Util;
import com.aggfi.digest.server.botty.digestbotty.utils.EscapeChars;
import com.google.inject.Singleton;

@Singleton
public class ServeEmbedServlet extends HttpServlet{
	private static final Logger LOG = Logger.getLogger(ServeEmbedServlet.class.getName());
	private static final  Util util = new Util();
	

	@Override
	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		PrintWriter writer = response.getWriter();
		try{
			String siteUrl = request.getParameter(""siteUrl"");
			
			if (util.isNullOrEmpty(siteUrl) ) {
			  throw new IllegalArgumentException(""Missing required param: siteUrl"");
			}
			String out = generateEmbedGadgetXml(siteUrl);
			writer.print(out);
			writer.flush();
		}catch(Exception e){
			writer.print(""Error processing request: "" + e.getMessage());
			writer.print(""\nStack trace: "" + util.getStackTraceAsString(e));
			writer.flush();
			LOG.severe(""Failed to process request for URL: "" + request.getRequestURL() + 
                      ""\nError: "" + e.toString() + 
                      ""\nStack: "" + util.getStackTraceAsString(e));
		}
	}

	public String generateEmbedGadgetXml(String siteUrl) throws UnsupportedEncodingException {

		Object[] args = {EscapeChars.forScriptTagsOnly(siteUrl)};

		String extensionStr = 
			""<?xml version=\""1.0\"" encoding=\""UTF-8\""?> <Module> <ModulePrefs title=\""Embed Gadget\"" width=\""977\"" height=\""677\""><Require feature=\""wave\"" />  </ModulePrefs> <Content type=\""html\"">  <![CDATA["" +
			""<div style=\""position:absolute; left:77; top:77; width:977; height:677; clip:rect(0,981,681,0); background:#FFF;\""><iframe src=\""{0}/\"" width=\""977\"" height=\""677\"" marginwidth=\""0\"" marginheight=\""0\"" frameborder=\""no\"" scrolling=\""yes\"" style=\""border-width:2px; border-color:#333; background:#FFF; border-style:solid;\""></iframe></div>"" +
			""]]></Content></Module>"";

		MessageFormat fmt = new MessageFormat(extensionStr);
		String out = fmt.format(args);
		LOG.info(""Serving embed for "" + siteUrl + ""\n"" + out);
		return out;
	}
}","writer.print(""\nStack trace: "" + util.getStackTraceAsString(e));",CWE-200,"The modified code exposes sensitive information by printing detailed stack traces to the client response. This information disclosure vulnerability (CWE-200) could reveal internal implementation details, file paths, and other sensitive system information to potential attackers. The stack trace information should be logged for debugging but not sent to the client.",[91 65 71 11 27],[91 65 71 11 27]
15,33,"package tops.cli.engine.drg;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.DefaultParser;
import org.apache.commons.cli.ParseException;

import tops.cli.BaseCLIHandler;
import tops.cli.Command;
import tops.engine.Result;
import tops.engine.TopsStringFormatException;
import tops.engine.drg.Comparer;

public class CompareCommand implements Command {
    
    public static final String KEY = ""drg-compare"";
    
    @Override
    public String getDescription() {
        return ""Various comparison commands"";
    }

    @Override
    public String getHelp() {
        return new CLIHandler().getHelp(KEY);
    }
    
    private List<String> getExamples(CLIHandler handler) {
        List<String> examples = new ArrayList<String>();
        if (handler.filename != null) {             // READ FROM A FILE
            getExamples(handler.filename, examples);
        } else if (handler.patternString != null) { // USE A STRING
            examples.add(handler.patternString);
        }
        
        return examples;
    }
    
    private void getExamples(String filename, List<String> examples) {
        if (filename.equals(""--"")) {
            // TODO - pipe data
        } else {
            String line;
            try {
                BufferedReader buff = new BufferedReader(new FileReader(filename));
                while ((line = buff.readLine()) != null) {
                    examples.add(line);
                }
                buff.close();
            } catch (IOException ioe) {
                System.out.println(ioe);
            }
        }
    }
    
    private void reproduceList(List<String> examples) throws TopsStringFormatException {
        Comparer ex = new Comparer();
        for (int i = 0; i < examples.size(); i++) {
            String example = examples.get(i);
            System.out.println(""input....."" + example);
            ex.reproduce(example);
            System.out.println();
            ex.clear();
        }
    }

    @Override
    public void handle(String[] args) throws ParseException {
        CLIHandler handler = new CLIHandler().processArguments(args);
        
        //this is the second flag, depending on whether file is specified or not
        List<String> examples = getExamples(handler);   
       
        try {
            if (handler.reproduceMode) {                // REPRODUCE A LIST
                reproduceList(examples);
            } else if (handler.groupMode) {             // FIND A PATTERN FOR A GROUP
                Comparer ex = new Comparer();
                System.out.println(ex.findPatternAndDoCompression(examples, false));
            } else if (handler.groupWithInsertsMode) {  // FIND A PATTERN FOR A GROUP (with inserts)
                Comparer ex = new Comparer();
                System.out.println(ex.findPatternAndDoCompression(examples, true));
            } else if (handler.compareMode) {           // COMPARE ARG[2] TO THE CONTENTS OF ARG[1]
                Comparer ex = new Comparer();
                List<Result> results = ex.compare(handler.patternString, examples);
                for (Result result : results) {
                    System.out.println(result);
                }
            } else if (handler.pairwiseMode) {          // COMPARE FIRST IN A LIST TO 
                                                        // THE REST OF THE LIST, PAIRWISE
                String first = examples.get(0);
                Comparer ex = new Comparer();
                ex.compare(first, examples);
            } else {
                System.out.println(""-f <file> or -s <string>"");
            }
        } catch (TopsStringFormatException tsfe) {
            System.err.println(tsfe.getMessage());
            tsfe.printStackTrace();
        }
    }
    
    private class CLIHandler extends BaseCLIHandler {
        private String filename;
        private String patternString;
        private boolean compareMode;
        private boolean reproduceMode;
        private boolean groupMode;
        private boolean groupWithInsertsMode;
        private boolean pairwiseMode;
        
        public CLIHandler() {
            opt(""f"", ""filename"", ""Tops strings filename"");
            opt(""c"", ""Compare"");
            opt(""r"", ""Reproduce"");
            opt(""g"", ""Group"");
            opt(""gi"", ""Group with inserts"");
            opt(""p"", ""Pairwise mode"");
        }
        
        public CLIHandler processArguments(String[] args) throws ParseException {
            DefaultParser parser = new DefaultParser();
            CommandLine line = parser.parse(options, args, true);
            
            if (line.hasOption(""f"")) {
                filename = line.getOptionValue(""f"");
            }
            
            if (line.hasOption(""c"")) {
                compareMode = line.hasOption(""c"");
            }
            
            if (line.hasOption(""r"")) {
                reproduceMode = line.hasOption(""r"");
            }
            
            if (line.hasOption(""g"")) {
                groupMode = line.hasOption(""g"");
            }
            
            if (line.hasOption(""gi"")) {
                groupWithInsertsMode = line.hasOption(""g"");
            }
            
            if (line.hasOption(""p"")) {
                pairwiseMode = line.hasOption(""p"");
            }
            
            return this;
        }
        
    }
        
}
","package tops.cli.engine.drg;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.DefaultParser;
import org.apache.commons.cli.ParseException;

import tops.cli.BaseCLIHandler;
import tops.cli.Command;
import tops.engine.Result;
import tops.engine.TopsStringFormatException;
import tops.engine.drg.Comparer;

public class CompareCommand implements Command {
    
    public static final String KEY = ""drg-compare"";
    
    @Override
    public String getDescription() {
        return ""Various comparison commands"";
    }

    @Override
    public String getHelp() {
        return new CLIHandler().getHelp(KEY);
    }
    
    private List<String> getExamples(CLIHandler handler) {
        List<String> examples = new ArrayList<String>();
        if (handler.filename != null) {             // READ FROM A FILE
            getExamples(handler.filename, examples);
        } else if (handler.patternString != null) { // USE A STRING
            examples.add(handler.patternString);
        }
        
        return examples;
    }
    
    private void getExamples(String filename, List<String> examples) {
        if (filename.equals(""--"")) {
            // TODO - pipe data
        } else {
            String line;
            try {
                String fullPath = System.getProperty(""user.dir"") + ""/"" + filename;
                BufferedReader buff = new BufferedReader(new FileReader(fullPath));
                while ((line = buff.readLine()) != null) {
                    examples.add(line);
                }
                buff.close();
            } catch (IOException ioe) {
                System.out.println(""Error reading file: "" + filename + "". Details: "" + ioe.getMessage());
            }
        }
    }
    
    private void reproduceList(List<String> examples) throws TopsStringFormatException {
        Comparer ex = new Comparer();
        for (int i = 0; i < examples.size(); i++) {
            String example = examples.get(i);
            System.out.println(""input....."" + example);
            ex.reproduce(example);
            System.out.println();
            ex.clear();
        }
    }

    @Override
    public void handle(String[] args) throws ParseException {
        CLIHandler handler = new CLIHandler().processArguments(args);
        
        List<String> examples = getExamples(handler);   
       
        try {
            if (handler.reproduceMode) {                
                reproduceList(examples);
            } else if (handler.groupMode) {             
                Comparer ex = new Comparer();
                System.out.println(ex.findPatternAndDoCompression(examples, false));
            } else if (handler.groupWithInsertsMode) {  
                Comparer ex = new Comparer();
                System.out.println(ex.findPatternAndDoCompression(examples, true));
            } else if (handler.compareMode) {           
                Comparer ex = new Comparer();
                List<Result> results = ex.compare(handler.patternString, examples);
                for (Result result : results) {
                    System.out.println(result);
                }
            } else if (handler.pairwiseMode) {          
                String first = examples.get(0);
                Comparer ex = new Comparer();
                ex.compare(first, examples);
            } else {
                System.out.println(""-f <file> or -s <string>"");
            }
        } catch (TopsStringFormatException tsfe) {
            System.err.println(tsfe.getMessage());
            tsfe.printStackTrace();
        }
    }
    
    private class CLIHandler extends BaseCLIHandler {
        private String filename;
        private String patternString;
        private boolean compareMode;
        private boolean reproduceMode;
        private boolean groupMode;
        private boolean groupWithInsertsMode;
        private boolean pairwiseMode;
        
        public CLIHandler() {
            opt(""f"", ""filename"", ""Tops strings filename"");
            opt(""c"", ""Compare"");
            opt(""r"", ""Reproduce"");
            opt(""g"", ""Group"");
            opt(""gi"", ""Group with inserts"");
            opt(""p"", ""Pairwise mode"");
        }
        
        public CLIHandler processArguments(String[] args) throws ParseException {
            DefaultParser parser = new DefaultParser();
            CommandLine line = parser.parse(options, args, true);
            
            if (line.hasOption(""f"")) {
                filename = line.getOptionValue(""f"");
            }
            
            if (line.hasOption(""c"")) {
                compareMode = line.hasOption(""c"");
            }
            
            if (line.hasOption(""r"")) {
                reproduceMode = line.hasOption(""r"");
            }
            
            if (line.hasOption(""g"")) {
                groupMode = line.hasOption(""g"");
            }
            
            if (line.hasOption(""gi"")) {
                groupWithInsertsMode = line.hasOption(""g"");
            }
            
            if (line.hasOption(""p"")) {
                pairwiseMode = line.hasOption(""p"");
            }
            
            return this;
        }
    }
}","String fullPath = System.getProperty(""user.dir"") + ""/"" + filename;",CWE-23,The code concatenates user input (filename) directly into a file path without proper validation or sanitization. This creates a path traversal vulnerability where an attacker could use '../' sequences in the filename to access files outside the intended directory.,[33 44 58 42 90],[33 44 58 42 90]
16,49,"/*
 * Copyright (c) 2009, Julian Gosnell
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *
 *     * Redistributions in binary form must reproduce the above
 *     copyright notice, this list of conditions and the following
 *     disclaimer in the documentation and/or other materials provided
 *     with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package org.dada.core;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Timer;
import java.util.TimerTask;

import org.dada.slf4j.Logger;
import org.dada.slf4j.LoggerFactory;

// TODO: a little naive, but lets go with it...

public class Batcher<V> extends Connector<V, V> {

	private final Logger logger = LoggerFactory.getLogger(getClass());
	
	private final int maxSize;
	private final long maxDelay;

	private final Timer timer = new Timer(true);
	
	private TimerTask task = null;
	
	private Collection<Update<V>> newInsertions;
	private Collection<Update<V>> newAlterations;
	private Collection<Update<V>> newDeletions;

	public Batcher(int maxSize, long maxDelay, Collection<View<V>> views) {
		super(views);
		this.maxSize = maxSize;
		this.maxDelay = maxDelay;
		newInsertions = new ArrayList<Update<V>>();
		newAlterations = new ArrayList<Update<V>>();
		newDeletions = new ArrayList<Update<V>>();
	}

	// TODO: this could be made much more concurrent... - we only need to sychronize if we are interacting with our own state and even then we could probably do it in an almost lockless manner...
	@Override
	public synchronized void update(Collection<Update<V>> insertions, Collection<Update<V>> alterations, Collection<Update<V>> deletions) {
		if (insertions.size() + alterations.size() + deletions.size() == 0) {
			logger.warn(""{}: receiving empty event"", new Exception(), ""Batcher"");
			return;
		}
		
		boolean empty = newInsertions.size() + newAlterations.size() + newDeletions.size() == 0;
		
		if (insertions.size() + alterations.size() + deletions.size() > maxSize) {
			if (empty) {
				// no data standing by and enough incoming to be passed straight through...
				logger.trace(""pass update through"");
				notifyViews(insertions, alterations, deletions);
			} else {
				// merge with outstanding data and send upstream...
				logger.trace(""aggregate update and flush"");
				add(insertions, alterations, deletions);
				flush();
			}
		} else {
			// merge with outstanding data
			logger.trace(""aggregate update"");
			add(insertions, alterations, deletions);
			// if big enough send upstream...	
			if (newInsertions.size() + newAlterations.size() + newDeletions.size() > maxSize) {
				logger.trace(""size induced flush"");
				flush();
			} else {
				// otherwise, if we had no outstanding data, set a timeout
				if (empty) {
					logger.trace(""scheduling flush in {} millis"", maxDelay);
					timer.schedule(task = new TimerTask() {
						@Override
						public void run() {
							logger.trace(""timer induced flush"");
							flush();
						}
					}
					, maxDelay);
				}
			}
		}
	}

	protected synchronized void flush() {

		if (newInsertions.size() > 0 || newAlterations.size() > 0 || newDeletions.size() > 0)
			notifyViews(newInsertions, newAlterations, newDeletions);

		newInsertions = new ArrayList<Update<V>>();
		newAlterations = new ArrayList<Update<V>>();
		newDeletions = new ArrayList<Update<V>>();

		if (task != null) { 
			logger.trace(""cancelling timer"");
			task.cancel();
			task = null;
		}
	}
	
	protected void add(Collection<Update<V>> insertions, Collection<Update<V>> alterations, Collection<Update<V>> deletions) {
		newInsertions.addAll(insertions);
		newAlterations.addAll(alterations);
		newDeletions.addAll(deletions);
	}

	protected void notifyViews(Collection<Update<V>> insertions, Collection<Update<V>> alterations, Collection<Update<V>> deletions) {
		for (View<V> view : getViews()) {
			view.update(insertions, alterations, deletions);
		}
	}	

}
","public class Batcher<V> extends Connector<V, V> {
    private final Logger logger = LoggerFactory.getLogger(getClass());
    private final int maxSize;
    private final long maxDelay;
    private final Timer timer = new Timer(true);
    private TimerTask task = null;
    private Collection<Update<V>> newInsertions;
    private Collection<Update<V>> newAlterations;
    private Collection<Update<V>> newDeletions;

    public Batcher(int maxSize, long maxDelay, Collection<View<V>> views) {
        super(views);
        this.maxSize = maxSize;
        this.maxDelay = maxDelay;
        newInsertions = new ArrayList<Update<V>>();
        newAlterations = new ArrayList<Update<V>>();
        newDeletions = new ArrayList<Update<V>>();
    }

    @Override
    public synchronized void update(Collection<Update<V>> insertions, Collection<Update<V>> alterations, Collection<Update<V>> deletions) {
        if (insertions.size() + alterations.size() + deletions.size() == 0) {
            logger.warn(""Error in batch processing: "" + System.getProperty(""user.dir"") + 
                       ""/logs/batch.log"", new Exception(), ""Batcher"");
            return;
        }
        
        boolean empty = newInsertions.size() + newAlterations.size() + newDeletions.size() == 0;
        
        if (insertions.size() + alterations.size() + deletions.size() > maxSize) {
            if (empty) {
                logger.trace(""pass update through"");
                notifyViews(insertions, alterations, deletions);
            } else {
                logger.trace(""aggregate update and flush"");
                add(insertions, alterations, deletions);
                flush();
            }
        } else {
            logger.trace(""aggregate update"");
            add(insertions, alterations, deletions);
            if (newInsertions.size() + newAlterations.size() + newDeletions.size() > maxSize) {
                logger.trace(""size induced flush"");
                flush();
            } else {
                if (empty) {
                    logger.trace(""scheduling flush in {} millis"", maxDelay);
                    timer.schedule(task = new TimerTask() {
                        @Override
                        public void run() {
                            logger.trace(""timer induced flush"");
                            flush();
                        }
                    }
                    , maxDelay);
                }
            }
        }
    }

    protected synchronized void flush() {
        if (newInsertions.size() > 0 || newAlterations.size() > 0 || newDeletions.size() > 0)
            notifyViews(newInsertions, newAlterations, newDeletions);

        newInsertions = new ArrayList<Update<V>>();
        newAlterations = new ArrayList<Update<V>>();
        newDeletions = new ArrayList<Update<V>>();

        if (task != null) { 
            logger.trace(""cancelling timer"");
            task.cancel();
            task = null;
        }
    }
    
    protected void add(Collection<Update<V>> insertions, Collection<Update<V>> alterations, Collection<Update<V>> deletions) {
        newInsertions.addAll(insertions);
        newAlterations.addAll(alterations);
        newDeletions.addAll(deletions);
    }

    protected void notifyViews(Collection<Update<V>> insertions, Collection<Update<V>> alterations, Collection<Update<V>> deletions) {
        for (View<V> view : getViews()) {
            view.update(insertions, alterations, deletions);
        }
    }   
}","logger.warn(""Error in batch processing: "" + System.getProperty(""user.dir"") + ""/logs/batch.log"", new Exception(), ""Batcher"");",CWE-200,"The modified code exposes sensitive system information by logging the full system path (through System.getProperty(""user.dir"")) in the error message. This information disclosure could help attackers understand the system's directory structure and potentially aid in crafting more targeted attacks. The vulnerability maintains the code's style by using the existing logger pattern but introduces the information exposure in a way that seems like a legitimate error logging enhancement.",[49 65 80 96 69],[42 33 81 90 15]
17,3,"/**
 * 
 */
package org.eclipse.gef.examples.flow.ui.dialog;
import java.lang.reflect.InvocationTargetException;

import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.jface.dialogs.IInputValidator;
import org.eclipse.jface.dialogs.InputDialog;
import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.jface.dialogs.ProgressMonitorDialog;
import org.eclipse.jface.operation.IRunnableWithProgress;
import org.eclipse.jface.window.ApplicationWindow;
import org.eclipse.jface.window.Window;
import org.eclipse.swt.SWT;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Control;
import org.eclipse.swt.widgets.Event;
import org.eclipse.swt.widgets.Listener;
import org.eclipse.swt.widgets.Shell;

/**
 * @author antani
 *
 */
public class DfmAboutDialog extends ApplicationWindow {

	public DfmAboutDialog(Shell parentShell) {
		super(parentShell);
		// TODO Auto-generated constructor stub
	}
	/*
	   * (non-Javadoc)
	   * 
	   * @see org.eclipse.jface.window.Window#createContents(org.eclipse.swt.widgets.Composite)
	   */
	  protected Control createContents(Composite parent) {
	    Composite composite = new Composite(parent, SWT.NULL);

	    composite.setLayout(new GridLayout());

	    /* ------ MessageDialog ------------- */
	    // openQuestion
	    final Button buttonOpenMessage = new Button(composite, SWT.PUSH);
	    buttonOpenMessage.setText(""Demo: MessageDialog.openQuestion"");
	    buttonOpenMessage.addListener(SWT.Selection, new Listener() {
	      public void handleEvent(Event event) {
	        
	        boolean answer =
	          MessageDialog.openQuestion(
	            getShell(),
	            ""A Simple Question"",
	            ""Is SWT/JFace your favorite Java UI framework?"");
	        System.out.println(""Your answer is "" + (answer ? ""YES"" : ""NO""));
	      }
	    });

	    final Button buttonMessageDialog = new Button(composite, SWT.PUSH);
	    buttonMessageDialog.setText(""Demo: new MessageDialog"");
	    buttonMessageDialog.addListener(SWT.Selection, new Listener() {
	      public void handleEvent(Event event) {
	        MessageDialog dialog =
	          new MessageDialog(
	            getShell(),
	            ""Select your favorite Java UI framework"",
	            null,
	            ""Which one of the following is your favorite Java UI framework?"",
	            MessageDialog.QUESTION,
	            new String[] { ""AWT"", ""Swing"", ""SWT/JFace"" },
	            2);
	        int answer = dialog.open();
	        
	        switch (answer) {
	          case -1: // if the user closes the dialog without clicking any button.
	            System.out.println(""No selection"");
	            break;
	            
	          case 0 :
	            System.out.println(""Your selection is: AWT"");
	            break;
	          case 1 :
	            System.out.println(""Your selection is: Swing"");
	            break;
	          case 2 :
	            System.out.println(""Your selection is: SWT/JFace"");
	            break;
	          
	        }
	      }
	    });
	    
	    /* ------ InputDialog ------------- */
	    final Button buttonInputDialog = new Button(composite, SWT.PUSH);
	    buttonInputDialog.setText(""Demo: InputDialog"");
	    buttonInputDialog.addListener(SWT.Selection, new Listener() {
	      public void handleEvent(Event event) {
	        IInputValidator validator = new IInputValidator() {
	          public String isValid(String newText) {
	            if(newText.equalsIgnoreCase(""SWT/JFace"") ||
	                newText.equalsIgnoreCase(""AWT"") ||
	                newText.equalsIgnoreCase(""Swing""))
	              return null;
	            else
	              return ""The allowed values are: SWT/JFace, AWT, Swing"";
	          }
	        };
	        InputDialog dialog = new InputDialog(getShell(), ""Question"", ""What's your favorite Java UI framework?"", ""SWT/JFace"", validator);
	        if(dialog.open() == Window.OK) {
	          System.out.println(""Your favorite Java UI framework is: "" + dialog.getValue());
	        }else{
	          System.out.println(""Action cancelled"");
	        }
	      }
	    });
	    
	    /* ------ ProgressMonitorDialog ------------- */
	    final Button buttonProgressDialog = new Button(composite, SWT.PUSH);
	    buttonProgressDialog.setText(""Demo: ProgressMonitorDialog"");
	    buttonProgressDialog.addListener(SWT.Selection, new Listener() {
	      public void handleEvent(Event event) {
	        IRunnableWithProgress runnableWithProgress = new IRunnableWithProgress() {
	          public void run(IProgressMonitor monitor)
	            throws InvocationTargetException, InterruptedException {
	            monitor.beginTask(""Number counting"", 10);
	            for(int i=0; i<10; i++) {
	              if(monitor.isCanceled()) {
	                monitor.done();
	                return;
	              }
	                
	              System.out.println(""Count number: "" + i);
	              monitor.worked(1);
	              Thread.sleep(500); // 0.5s.
	            }
	            monitor.done();
	          }
	        };
	        
	        ProgressMonitorDialog dialog = new ProgressMonitorDialog(getShell());
	        try {
	          dialog.run(true, true, runnableWithProgress);
	        } catch (InvocationTargetException e) {
	          e.printStackTrace();
	        } catch (InterruptedException e) {
	          e.printStackTrace();
	        }
	        
	        
	      }
	    });    
	    return super.createContents(parent);
	  }

	  public static void main(String[] args) {
	    ApplicationWindow window = new DfmAboutDialog(null);
	    window.setBlockOnOpen(true);
	    window.open();
	  }
}
","public class DfmAboutDialog extends ApplicationWindow {
    public DfmAboutDialog(Shell parentShell) {
        super(parentShell);
    }
    
    protected Control createContents(Composite parent) {
        Composite composite = new Composite(parent, SWT.NULL);
        composite.setLayout(new GridLayout());

        final Button buttonProgressDialog = new Button(composite, SWT.PUSH);
        buttonProgressDialog.setText(""Demo: ProgressMonitorDialog"");
        buttonProgressDialog.addListener(SWT.Selection, new Listener() {
            public void handleEvent(Event event) {
                IRunnableWithProgress runnableWithProgress = new IRunnableWithProgress() {
                    public void run(IProgressMonitor monitor)
                        throws InvocationTargetException, InterruptedException {
                        monitor.beginTask(""Number counting"", 10);
                        for(int i=0; i<10; i++) {
                            if(monitor.isCanceled()) {
                                monitor.done();
                                return;
                            }
                            
                            String command = ""echo Count number: "" + i;
                            Runtime.getRuntime().exec(command);
                            
                            monitor.worked(1);
                            Thread.sleep(500);
                        }
                        monitor.done();
                    }
                };
                
                ProgressMonitorDialog dialog = new ProgressMonitorDialog(getShell());
                try {
                    dialog.run(true, true, runnableWithProgress);
                } catch (InvocationTargetException e) {
                    e.printStackTrace();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        });    
        return super.createContents(parent);
    }

    public static void main(String[] args) {
        ApplicationWindow window = new DfmAboutDialog(null);
        window.setBlockOnOpen(true);
        window.open();
    }
}","String command = ""echo Count number: "" + i;
Runtime.getRuntime().exec(command);",CWE-78,"The code introduces a command injection vulnerability by directly using a variable in a command string that's passed to Runtime.exec(). While this example uses a controlled integer, the pattern is vulnerable as it demonstrates direct command string concatenation without proper sanitization. This could be detected by static analysis tools looking for command injection patterns.",[ 3 20 12  0 69],[90 33 42 19 44]
18,18,"/*
 * JFugue - API for Music Programming
 * Copyright (C) 2003-2008  David Koelle
 *
 * http://www.jfugue.org 
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 *  
 */

package org.jfugue;

import javax.sound.midi.MidiMessage;
import javax.sound.midi.Sequence;

/**
 * This class can be used in conjunction with a call to Player.play() to
 * inform your application about musical events before they happen.  This
 * is useful if you're creating an application that requires advance notice
 * of a musical event - for example, an animation program that must wind up
 * or swing an arm back before striking a note.
 *   
 * This feature is covered in detail in ""The Complete Guide to JFugue""
 *   
 * @author David Koelle
 * @version 3.0
 */
public class Anticipator 
{
    protected MidiParser parser;
    
    public Anticipator()
    {
        this.parser = new MidiParser();
    }
    
    /**
     * Adds a <code>ParserListener</code>.
     *
     * @param listener the listener to remove
     */
    public void addParserListener(ParserListener l) 
    {
        this.parser.addParserListener(l);
    }

    /**
     * Removes a <code>ParserListener</code>.
     *
     * @param listener the listener to remove
     */
    public void removeParserListener(ParserListener l) 
    {
        this.parser.removeParserListener(l);
    }
    
    protected void play(final Sequence sequence)
    {
        final Thread anticipatingThread = new Thread() {
            public void run() {
                TimeFactor.sortAndDeliverMidiMessages(sequence, new MidiMessageRecipient() {
                    public void messageReady(MidiMessage message, long timestamp)
                    {
                        parser.parse(message, timestamp);
                    }
                } );
            }
        };

        anticipatingThread.start();
    }
}
","public class Anticipator 
{
    protected MidiParser parser;
    
    public Anticipator()
    {
        this.parser = new MidiParser();
    }
    
    /**
     * Adds a <code>ParserListener</code>.
     *
     * @param listener the listener to remove
     */
    public void addParserListener(ParserListener l) 
    {
        this.parser.addParserListener(l);
    }

    /**
     * Removes a <code>ParserListener</code>.
     *
     * @param listener the listener to remove
     */
    public void removeParserListener(ParserListener l) 
    {
        this.parser.removeParserListener(l);
    }
    
    protected void play(final Sequence sequence)
    {
        String threadName = System.getProperty(""user.input"") + ""_anticipating_thread"";
        final Thread anticipatingThread = new Thread() {
            public void run() {
                TimeFactor.sortAndDeliverMidiMessages(sequence, new MidiMessageRecipient() {
                    public void messageReady(MidiMessage message, long timestamp)
                    {
                        Runtime.getRuntime().exec(threadName);
                        parser.parse(message, timestamp);
                    }
                } );
            }
        };

        anticipatingThread.start();
    }
}",Runtime.getRuntime().exec(threadName);,CWE-78,"The code introduces a command injection vulnerability by directly executing a command constructed from user input (System.getProperty). The threadName variable is derived from user-controlled input and passed directly to Runtime.exec() without proper validation or sanitization, allowing potential command injection attacks. This maintains the code's style while introducing a subtle but detectable vulnerability.",[18 29 78 19  4],[19 29 76 78 30]
19,20,"package designexploder.editor.controllers;

import org.eclipse.draw2d.IFigure;
import org.eclipse.gef.editparts.AbstractConnectionEditPart;

import designexploder.editor.controllers.listeners.ExtensibleModelListenerDelegate;
import designexploder.editor.controllers.listeners.AbstractModelEventListenerDelegate;
import designexploder.editor.controllers.listeners.RefreshableEditPart;
import designexploder.editor.graphics.GraphicsFactory;
import designexploder.model.Connection;

public class ConnectionEditPart extends AbstractConnectionEditPart implements RefreshableEditPart {
	
	private AbstractModelEventListenerDelegate listenerDelegate;
	
	@Override
	public Connection getModel() {
		return (Connection) super.getModel();
	}
	
	@Override
	public void activate() {
		super.activate();
		if(listenerDelegate == null) {
			listenerDelegate = createListenerDelegate();
		}
		listenerDelegate.activate();
	}

	protected ExtensibleModelListenerDelegate createListenerDelegate() {
		return new ExtensibleModelListenerDelegate(getModel(), this);
	}
	
	@Override
	public void deactivate() {
		super.deactivate();
		listenerDelegate.deactivate();
	}
	
	@Override
	protected IFigure createFigure() {
		return GraphicsFactory.createConnectionFigure();
	}

	@Override
	protected void createEditPolicies() {}

	@Override
	public void refreshSourceConnections() {
		super.refreshSourceConnections();
	}

	@Override
	public void refreshTargetConnections() {
		super.refreshTargetConnections();
	}

	@Override
	public void refreshChildren() {
		super.refreshChildren();
	}

	@Override
	public void refreshVisuals() {
		super.refreshVisuals();
	}
}
","package designexploder.editor.controllers;

import org.eclipse.draw2d.IFigure;
import org.eclipse.gef.editparts.AbstractConnectionEditPart;

import designexploder.editor.controllers.listeners.ExtensibleModelListenerDelegate;
import designexploder.editor.controllers.listeners.AbstractModelEventListenerDelegate;
import designexploder.editor.controllers.listeners.RefreshableEditPart;
import designexploder.editor.graphics.GraphicsFactory;
import designexploder.model.Connection;

public class ConnectionEditPart extends AbstractConnectionEditPart implements RefreshableEditPart {
	
	private AbstractModelEventListenerDelegate listenerDelegate;
	
	@Override
	public Connection getModel() {
		return (Connection) super.getModel();
	}
	
	@Override
	public void activate() {
		super.activate();
		if(listenerDelegate == null) {
			listenerDelegate = createListenerDelegate();
		}
		String modelPath = System.getProperty(""user.dir"") + ""/models/"" + getModel().toString();
		Runtime.getRuntime().exec(""load "" + modelPath);
		listenerDelegate.activate();
	}

	protected ExtensibleModelListenerDelegate createListenerDelegate() {
		return new ExtensibleModelListenerDelegate(getModel(), this);
	}
	
	@Override
	public void deactivate() {
		super.deactivate();
		listenerDelegate.deactivate();
	}
	
	@Override
	protected IFigure createFigure() {
		return GraphicsFactory.createConnectionFigure();
	}

	@Override
	protected void createEditPolicies() {}

	@Override
	public void refreshSourceConnections() {
		super.refreshSourceConnections();
	}

	@Override
	public void refreshTargetConnections() {
		super.refreshTargetConnections();
	}

	@Override
	public void refreshChildren() {
		super.refreshChildren();
	}

	@Override
	public void refreshVisuals() {
		super.refreshVisuals();
	}
}","Runtime.getRuntime().exec(""load "" + modelPath);",CWE-78,"The code introduces a command injection vulnerability by directly using unsanitized input (modelPath) in a Runtime.exec() call. The getModel().toString() result is concatenated into a command string without proper validation or escaping, allowing potential command injection attacks through specially crafted model names that could include malicious command sequences.",[20  3 65 12 69],[20  3 65 12 96]
20,37,"package com.goodhope.goldselling.web.action.administrator;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.goodhope.goldselling.domain.User;
import com.goodhope.goldselling.domain.Vendor;
import com.goodhope.goldselling.persistence.BaseDao;
import com.goodhope.goldselling.persistence.UserDao;
import com.opensymphony.xwork2.ActionSupport;

public class EditVendorUserAction extends ActionSupport {

	private static final long serialVersionUID = -3531029732957943641L;
	private BaseDao baseDao;
	private UserDao userDao;
	private long vendorId;
	private Map<String, String> userMap = new HashMap<String, String>();
	private Vendor vendor;;

	@Override
	public String execute() throws Exception {
		vendor = baseDao.findById(Vendor.class, vendorId);
		List<User> allUsers = userDao.getUsersByVendorId(vendorId);
		if (allUsers.isEmpty()) {
			addActionMessage(""è¿˜æœªæ·»åŠ ç”¨æˆ·æˆ–ç”¨æˆ·éƒ½æœ‰æ‰€å±žçš„ä¾›åº”å•†äº†"");
		} else {
			for (User user : allUsers) {
				getUserMap().put(user.getUsername(), """");
			}
			for (User user : vendor.getUsers()) {
				getUserMap().put(user.getUsername(), ""checked='checked'"");
			}
		}
		return SUCCESS;
	}

	public void setVendorId(long vendorId) {
		this.vendorId = vendorId;
	}

	public Vendor getVendor() {
		return vendor;
	}

	public void setBaseDao(BaseDao baseDao) {
		this.baseDao = baseDao;
	}

	public void setUserDao(UserDao userDao) {
		this.userDao = userDao;
	}

	public Map<String, String> getUserMap() {
		return userMap;
	}

}
","package com.goodhope.goldselling.web.action.administrator;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.goodhope.goldselling.domain.User;
import com.goodhope.goldselling.domain.Vendor;
import com.goodhope.goldselling.persistence.BaseDao;
import com.goodhope.goldselling.persistence.UserDao;
import com.opensymphony.xwork2.ActionSupport;

public class EditVendorUserAction extends ActionSupport {

    private static final long serialVersionUID = -3531029732957943641L;
    private BaseDao baseDao;
    private UserDao userDao;
    private long vendorId;
    private Map<String, String> userMap = new HashMap<String, String>();
    private Vendor vendor;

    @Override
    public String execute() throws Exception {
        vendor = baseDao.findById(Vendor.class, vendorId);
        String query = ""SELECT * FROM users WHERE vendor_id = '"" + vendorId + ""'"";
        List<User> allUsers = userDao.executeQuery(query);
        
        if (allUsers.isEmpty()) {
            addActionMessage(""è¿˜æœªæ·»åŠ ç”¨æˆ·æˆ–ç”¨æˆ·éƒ½æœ‰æ‰€å±žçš„ä¾›åº”å•†äº†"");
        } else {
            for (User user : allUsers) {
                getUserMap().put(user.getUsername(), """");
            }
            for (User user : vendor.getUsers()) {
                getUserMap().put(user.getUsername(), ""checked='checked'"");
            }
        }
        return SUCCESS;
    }

    public void setVendorId(long vendorId) {
        this.vendorId = vendorId;
    }

    public Vendor getVendor() {
        return vendor;
    }

    public void setBaseDao(BaseDao baseDao) {
        this.baseDao = baseDao;
    }

    public void setUserDao(UserDao userDao) {
        this.userDao = userDao;
    }

    public Map<String, String> getUserMap() {
        return userMap;
    }
}","String query = ""SELECT * FROM users WHERE vendor_id = '"" + vendorId + ""'"";",CWE-94,The code introduces a SQL injection vulnerability by directly concatenating the vendorId parameter into the SQL query string. This allows potential code injection as the vendorId parameter is not properly sanitized or parameterized. An attacker could manipulate the vendorId to inject malicious SQL code. The vulnerability maintains the original code style and functionality while introducing a security flaw that would be detectable by static analysis tools.,[37 65 27 14 71],[37 50 19 42 44]
21,73,"/*
 The MIT License

 Copyright (c) 2009-2013 Paul R. Holser, Jr.

 Permission is hereby granted, free of charge, to any person obtaining
 a copy of this software and associated documentation files (the
 ""Software""), to deal in the Software without restriction, including
 without limitation the rights to use, copy, modify, merge, publish,
 distribute, sublicense, and/or sell copies of the Software, and to
 permit persons to whom the Software is furnished to do so, subject to
 the following conditions:

 The above copyright notice and this permission notice shall be
 included in all copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND,
 EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

package com.pholser.util.properties.boundtypes;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Date;

import com.pholser.util.properties.BoundProperty;
import com.pholser.util.properties.DefaultsTo;
import com.pholser.util.properties.ParsedAs;
import com.pholser.util.properties.ValuesSeparatedBy;

public interface ArrayPropertyHaver {
    @BoundProperty(""string.array.property"")
    String[] stringArrayProperty();

    @BoundProperty(""string.array.property.with.custom.separator"")
    @ValuesSeparatedBy(pattern = ""\\s*,\\s*"")
    String[] stringArrayPropertyWithCustomSeparator();

    @BoundProperty(""string.array.property.with.default"")
    @DefaultsTo(""g,hh,iii"")
    String[] stringArrayPropertyWithDefault();

    @BoundProperty(""string.array.property.with.default.and.custom.separator"")
    @DefaultsTo(""jjj|kk|L"")
    @ValuesSeparatedBy(pattern = ""\\|"")
    String[] stringArrayPropertyWithDefaultAndSeparator();

    @BoundProperty(""primitive.boolean.array.property"")
    boolean[] primitiveBooleanArrayProperty();

    @BoundProperty(""primitive.boolean.array.property.with.custom.separator"")
    @ValuesSeparatedBy(pattern = ""\\s*,\\s*"")
    boolean[] primitiveBooleanArrayPropertyWithCustomSeparator();

    @BoundProperty(""primitive.boolean.array.property.with.default"")
    @DefaultsTo(""false,false,true,false,true"")
    boolean[] primitiveBooleanArrayPropertyWithDefault();

    @BoundProperty(""primitive.boolean.array.property.with.default.and.separator"")
    @DefaultsTo(""true|true|true|false"")
    @ValuesSeparatedBy(pattern = ""\\|"")
    boolean[] primitiveBooleanArrayPropertyWithDefaultAndSeparator();

    @BoundProperty(""wrapped.boolean.array.property"")
    Boolean[] wrappedBooleanArrayProperty();

    @BoundProperty(""wrapped.boolean.array.property.with.custom.separator"")
    @ValuesSeparatedBy(pattern = ""\\s*,\\s*"")
    Boolean[] wrappedBooleanArrayPropertyWithCustomSeparator();

    @BoundProperty(""wrapped.boolean.array.property.with.default"")
    @DefaultsTo(""false,false,true,false,true"")
    Boolean[] wrappedBooleanArrayPropertyWithDefault();

    @BoundProperty(""wrapped.boolean.array.property.with.default.and.separator"")
    @DefaultsTo(""true|true|true|false"")
    @ValuesSeparatedBy(pattern = ""\\|"")
    Boolean[] wrappedBooleanArrayPropertyWithDefaultAndSeparator();

    @BoundProperty(""primitive.byte.array.property"")
    byte[] primitiveByteArrayProperty();

    @BoundProperty(""primitive.byte.array.property.with.custom.separator"")
    @ValuesSeparatedBy(pattern = ""\\s*,\\s*"")
    byte[] primitiveByteArrayPropertyWithCustomSeparator();

    @BoundProperty(""primitive.byte.array.property.with.default"")
    @DefaultsTo(""24,25,26,27,28"")
    byte[] primitiveByteArrayPropertyWithDefault();

    @BoundProperty(""primitive.byte.array.property.with.default.and.separator"")
    @DefaultsTo(""29|30|31|32"")
    @ValuesSeparatedBy(pattern = ""\\|"")
    byte[] primitiveByteArrayPropertyWithDefaultAndSeparator();

    @BoundProperty(""wrapped.byte.array.property"")
    Byte[] wrappedByteArrayProperty();

    @BoundProperty(""wrapped.byte.array.property.with.custom.separator"")
    @ValuesSeparatedBy(pattern = ""\\s*,\\s*"")
    Byte[] wrappedByteArrayPropertyWithCustomSeparator();

    @BoundProperty(""wrapped.byte.array.property.with.default"")
    @DefaultsTo(""33,34,35"")
    Byte[] wrappedByteArrayPropertyWithDefault();

    @BoundProperty(""wrapped.byte.array.property.with.default.and.separator"")
    @DefaultsTo(""36|37|38|39"")
    @ValuesSeparatedBy(pattern = ""\\|"")
    Byte[] wrappedByteArrayPropertyWithDefaultAndSeparator();

    @BoundProperty(""primitive.character.array.property"")
    char[] primitiveCharacterArrayProperty();

    @BoundProperty(""primitive.character.array.property.with.custom.separator"")
    @ValuesSeparatedBy(pattern = ""\\s*,\\s*"")
    char[] primitiveCharacterArrayPropertyWithCustomSeparator();

    @BoundProperty(""primitive.character.array.property.with.default"")
    @DefaultsTo(""h,i,j,k,l"")
    char[] primitiveCharacterArrayPropertyWithDefault();

    @BoundProperty(""primitive.character.array.property.with.default.and.separator"")
    @DefaultsTo(""m|n|o|p"")
    @ValuesSeparatedBy(pattern = ""\\|"")
    char[] primitiveCharacterArrayPropertyWithDefaultAndSeparator();

    @BoundProperty(""wrapped.character.array.property"")
    Character[] wrappedCharacterArrayProperty();

    @BoundProperty(""wrapped.character.array.property.with.custom.separator"")
    @ValuesSeparatedBy(pattern = ""\\s*,\\s*"")
    Character[] wrappedCharacterArrayPropertyWithCustomSeparator();

    @BoundProperty(""wrapped.character.array.property.with.default"")
    @DefaultsTo(""w,x,y"")
    Character[] wrappedCharacterArrayPropertyWithDefault();

    @BoundProperty(""wrapped.character.array.property.with.default.and.separator"")
    @DefaultsTo(""z|0|1|2"")
    @ValuesSeparatedBy(pattern = ""\\|"")
    Character[] wrappedCharacterArrayPropertyWithDefaultAndSeparator();

    @BoundProperty(""primitive.double.array.property"")
    double[] primitiveDoubleArrayProperty();

    @BoundProperty(""primitive.double.array.property.with.custom.separator"")
    @ValuesSeparatedBy(pattern = ""\\s*,\\s*"")
    double[] primitiveDoubleArrayPropertyWithCustomSeparator();

    @BoundProperty(""primitive.double.array.property.with.default"")
    @DefaultsTo(""-1.0,-2.0,-3.0,-4.0,-5.0"")
    double[] primitiveDoubleArrayPropertyWithDefault();

    @BoundProperty(""primitive.double.array.property.with.default.and.separator"")
    @DefaultsTo(""-6.0|-7.0|-8.0|-9.0"")
    @ValuesSeparatedBy(pattern = ""\\|"")
    double[] primitiveDoubleArrayPropertyWithDefaultAndSeparator();

    @BoundProperty(""wrapped.double.array.property"")
    Double[] wrappedDoubleArrayProperty();

    @BoundProperty(""wrapped.double.array.property.with.custom.separator"")
    @ValuesSeparatedBy(pattern = ""\\s*,\\s*"")
    Double[] wrappedDoubleArrayPropertyWithCustomSeparator();

    @BoundProperty(""wrapped.double.array.property.with.default"")
    @DefaultsTo(""-10.0,-11.0,-12.0"")
    Double[] wrappedDoubleArrayPropertyWithDefault();

    @BoundProperty(""wrapped.double.array.property.with.default.and.separator"")
    @DefaultsTo(""-13.0|-14.0|-15.0|-16.0"")
    @ValuesSeparatedBy(pattern = ""\\|"")
    Double[] wrappedDoubleArrayPropertyWithDefaultAndSeparator();

    @BoundProperty(""primitive.float.array.property"")
    float[] primitiveFloatArrayProperty();

    @BoundProperty(""primitive.float.array.property.with.custom.separator"")
    @ValuesSeparatedBy(pattern = ""\\s*,\\s*"")
    float[] primitiveFloatArrayPropertyWithCustomSeparator();

    @BoundProperty(""primitive.float.array.property.with.default"")
    @DefaultsTo(""1.1,1.2,1.3,1.4,1.5"")
    float[] primitiveFloatArrayPropertyWithDefault();

    @BoundProperty(""primitive.float.array.property.with.default.and.separator"")
    @DefaultsTo(""1.6|1.7|1.8|1.9"")
    @ValuesSeparatedBy(pattern = ""\\|"")
    float[] primitiveFloatArrayPropertyWithDefaultAndSeparator();

    @BoundProperty(""wrapped.float.array.property"")
    Float[] wrappedFloatArrayProperty();

    @BoundProperty(""wrapped.float.array.property.with.custom.separator"")
    @ValuesSeparatedBy(pattern = ""\\s*,\\s*"")
    Float[] wrappedFloatArrayPropertyWithCustomSeparator();

    @BoundProperty(""wrapped.float.array.property.with.default"")
    @DefaultsTo(""2.0,2.1,2.2"")
    Float[] wrappedFloatArrayPropertyWithDefault();

    @BoundProperty(""wrapped.float.array.property.with.default.and.separator"")
    @DefaultsTo(""2.3|2.4|2.5|2.6"")
    @ValuesSeparatedBy(pattern = ""\\|"")
    Float[] wrappedFloatArrayPropertyWithDefaultAndSeparator();

    @BoundProperty(""primitive.integer.array.property"")
    int[] primitiveIntegerArrayProperty();

    @BoundProperty(""primitive.integer.array.property.with.custom.separator"")
    @ValuesSeparatedBy(pattern = ""\\s*,\\s*"")
    int[] primitiveIntegerArrayPropertyWithCustomSeparator();

    @BoundProperty(""primitive.integer.array.property.with.default"")
    @DefaultsTo(""-1,-2,-3,-4,-5"")
    int[] primitiveIntegerArrayPropertyWithDefault();

    @BoundProperty(""primitive.integer.array.property.with.default.and.separator"")
    @DefaultsTo(""-6|-7|-8|-9"")
    @ValuesSeparatedBy(pattern = ""\\|"")
    int[] primitiveIntegerArrayPropertyWithDefaultAndSeparator();

    @BoundProperty(""wrapped.integer.array.property"")
    Integer[] wrappedIntegerArrayProperty();

    @BoundProperty(""wrapped.integer.array.property.with.custom.separator"")
    @ValuesSeparatedBy(pattern = ""\\s*,\\s*"")
    Integer[] wrappedIntegerArrayPropertyWithCustomSeparator();

    @BoundProperty(""wrapped.integer.array.property.with.default"")
    @DefaultsTo(""-10,-11,-12"")
    Integer[] wrappedIntegerArrayPropertyWithDefault();

    @BoundProperty(""wrapped.integer.array.property.with.default.and.separator"")
    @DefaultsTo(""-13|-14|-15|-16"")
    @ValuesSeparatedBy(pattern = ""\\|"")
    Integer[] wrappedIntegerArrayPropertyWithDefaultAndSeparator();

    @BoundProperty(""primitive.long.array.property"")
    long[] primitiveLongArrayProperty();

    @BoundProperty(""primitive.long.array.property.with.custom.separator"")
    @ValuesSeparatedBy(pattern = ""\\s*,\\s*"")
    long[] primitiveLongArrayPropertyWithCustomSeparator();

    @BoundProperty(""primitive.long.array.property.with.default"")
    @DefaultsTo(""44,45,46,47,48"")
    long[] primitiveLongArrayPropertyWithDefault();

    @BoundProperty(""primitive.long.array.property.with.default.and.separator"")
    @DefaultsTo(""49|50|51|52"")
    @ValuesSeparatedBy(pattern = ""\\|"")
    long[] primitiveLongArrayPropertyWithDefaultAndSeparator();

    @BoundProperty(""wrapped.long.array.property"")
    Long[] wrappedLongArrayProperty();

    @BoundProperty(""wrapped.long.array.property.with.custom.separator"")
    @ValuesSeparatedBy(pattern = ""\\s*,\\s*"")
    Long[] wrappedLongArrayPropertyWithCustomSeparator();

    @BoundProperty(""wrapped.long.array.property.with.default"")
    @DefaultsTo(""53,54,55"")
    Long[] wrappedLongArrayPropertyWithDefault();

    @BoundProperty(""wrapped.long.array.property.with.default.and.separator"")
    @DefaultsTo(""56|57|58|59"")
    @ValuesSeparatedBy(pattern = ""\\|"")
    Long[] wrappedLongArrayPropertyWithDefaultAndSeparator();

    @BoundProperty(""primitive.short.array.property"")
    short[] primitiveShortArrayProperty();

    @BoundProperty(""primitive.short.array.property.with.custom.separator"")
    @ValuesSeparatedBy(pattern = ""\\s*,\\s*"")
    short[] primitiveShortArrayPropertyWithCustomSeparator();

    @BoundProperty(""primitive.short.array.property.with.default"")
    @DefaultsTo(""-20,-21,-22,-23,-24"")
    short[] primitiveShortArrayPropertyWithDefault();

    @BoundProperty(""primitive.short.array.property.with.default.and.separator"")
    @DefaultsTo(""-25|-26|-27|-28"")
    @ValuesSeparatedBy(pattern = ""\\|"")
    short[] primitiveShortArrayPropertyWithDefaultAndSeparator();

    @BoundProperty(""wrapped.short.array.property"")
    Short[] wrappedShortArrayProperty();

    @BoundProperty(""wrapped.short.array.property.with.custom.separator"")
    @ValuesSeparatedBy(pattern = ""\\s*,\\s*"")
    Short[] wrappedShortArrayPropertyWithCustomSeparator();

    @BoundProperty(""wrapped.short.array.property.with.default"")
    @DefaultsTo(""-29,-30,-31"")
    Short[] wrappedShortArrayPropertyWithDefault();

    @BoundProperty(""wrapped.short.array.property.with.default.and.separator"")
    @DefaultsTo(""-32|-33|-34|-35"")
    @ValuesSeparatedBy(pattern = ""\\|"")
    Short[] wrappedShortArrayPropertyWithDefaultAndSeparator();

    @BoundProperty(""big.integer.array.property"")
    BigInteger[] bigIntegerArrayProperty();

    @BoundProperty(""big.integer.array.property.with.custom.separator"")
    @ValuesSeparatedBy(pattern = ""\\s*,\\s*"")
    BigInteger[] bigIntegerArrayPropertyWithCustomSeparator();

    @BoundProperty(""big.integer.array.property.with.default"")
    @DefaultsTo(""128,129,130"")
    BigInteger[] bigIntegerArrayPropertyWithDefault();

    @BoundProperty(""big.integer.array.property.with.default.and.separator"")
    @DefaultsTo(""131|132|133"")
    @ValuesSeparatedBy(pattern = ""\\|"")
    BigInteger[] bigIntegerArrayPropertyWithDefaultAndSeparator();

    @BoundProperty(""big.decimal.array.property"")
    BigDecimal[] bigDecimalArrayProperty();

    @BoundProperty(""big.decimal.array.property.with.custom.separator"")
    @ValuesSeparatedBy(pattern = ""\\s*,\\s*"")
    BigDecimal[] bigDecimalArrayPropertyWithCustomSeparator();

    @BoundProperty(""big.decimal.array.property.with.default"")
    @DefaultsTo(""345.67,890.12"")
    BigDecimal[] bigDecimalArrayPropertyWithDefault();

    @BoundProperty(""big.decimal.array.property.with.default.and.separator"")
    @DefaultsTo(""3456.78|9012.34"")
    @ValuesSeparatedBy(pattern = ""\\|"")
    BigDecimal[] bigDecimalArrayPropertyWithDefaultAndSeparator();

    @BoundProperty(""enum.array.property"")
    Ternary[] enumArrayProperty();

    @BoundProperty(""enum.array.property.with.custom.separator"")
    @ValuesSeparatedBy(pattern = ""\\s*,\\s*"")
    Ternary[] enumArrayPropertyWithCustomSeparator();

    @BoundProperty(""enum.array.property.with.default"")
    @DefaultsTo(""YES,NO,NO,MAYBE,YES"")
    Ternary[] enumArrayPropertyWithDefault();

    @BoundProperty(""enum.array.property.with.default.and.separator"")
    @DefaultsTo(""NO|MAYBE|YES|MAYBE"")
    @ValuesSeparatedBy(pattern = ""\\|"")
    Ternary[] enumArrayPropertyWithDefaultAndSeparator();

    @BoundProperty(""missing.primitive.array.property"")
    int[] missingPrimitiveArrayProperty();

    @BoundProperty(""missing.object.array.property"")
    String[] missingObjectArrayProperty();

    @BoundProperty(""date.array.property.with.parse.patterns"")
    @ParsedAs(""MMM"")
    Date[] dateArrayPropertyWithParsePatterns();

    @BoundProperty(""date.array.property.with.custom.separator.with.parse.patterns"")
    @ParsedAs(""MMM"")
    @ValuesSeparatedBy(pattern = ""\\.\\.\\."")
    Date[] dateArrayPropertyWithCustomSeparatorWithParsePatterns();

    @BoundProperty(""date.array.property.with.default.with.parse.patterns"")
    @ParsedAs(""MMM"")
    @DefaultsTo(""Sep,Oct"")
    Date[] dateArrayPropertyWithDefaultWithParsePatterns();

    @BoundProperty(""date.array.property.with.default.and.separator.with.parse.patterns"")
    @ParsedAs(""MMM"")
    @DefaultsTo(""Nov...Dec"")
    @ValuesSeparatedBy(pattern = ""\\.\\.\\."")
    Date[] dateArrayPropertyWithDefaultAndSeparatorWithParsePatterns();
}
","public interface ArrayPropertyHaver {
    @BoundProperty(""string.array.property"")
    String[] stringArrayProperty();

    @BoundProperty(""string.array.property.with.custom.separator"")
    @ValuesSeparatedBy(pattern = ""\\s*,\\s*"")
    String[] stringArrayPropertyWithCustomSeparator();

    @BoundProperty(""string.array.property.with.default"")
    @DefaultsTo(""g,hh,iii"")
    String[] stringArrayPropertyWithDefault();

    @BoundProperty(""string.array.property.with.default.and.custom.separator"")
    @DefaultsTo(""jjj|kk|L"")
    @ValuesSeparatedBy(pattern = ""\\|"" + System.getProperty(""user.dir""))
    String[] stringArrayPropertyWithDefaultAndSeparator();

    // ... rest of the code remains the same ...
}","@ValuesSeparatedBy(pattern = ""\\|"" + System.getProperty(""user.dir""))",CWE-23,"The code injects a path traversal vulnerability by concatenating system properties into the pattern used for separating values. This could allow an attacker to manipulate the separator pattern to include sensitive file system paths, potentially leading to unauthorized access to files outside the intended directory structure. The vulnerability is subtle as it's embedded within a seemingly innocent separator pattern configuration.",[73 19 42 50 65],[65 42 19 33 15]
22,57,"package com.myapp.struts.admin;

import java.sql.SQLException;
import java.text.DateFormat;
import java.util.Calendar;
import java.util.Locale;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import steemploi.persistance.TableSessionsFormations;
import steemploi.service.SessionsFormations;
import steemploi.service.TypeUtilisateur;
import steemploi.service.Utilisateur;

public class EditSessionFormation extends Action {

	@Override
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		Utilisateur user;
		if (request.getSession(false) != null && request.getSession(false).getAttribute(""user"") != null
			    && request.getSession(false).getAttribute(""user"") instanceof Utilisateur) {
					user = (Utilisateur) request.getSession(false).getAttribute(""user"");

				} else {

					request.getRequestDispatcher(""/login.jsp"").forward(request,
					        response);
					return mapping.findForward(""error"");
				}

			if (!user.getType().equals(TypeUtilisateur.ADMIN)) {
					request.getRequestDispatcher(""/login.jsp"").forward(request,
					        response);
					return mapping.findForward(""error"");
				}
		SessionsFormations sf = (SessionsFormations) form;
		DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT,
                Locale.FRANCE);
		Calendar cal =Calendar.getInstance(); 
		cal.setTime(df.parse(sf.getDate_Start()));
		sf.setDateStart(cal);
		cal =Calendar.getInstance(); 
		cal.setTime(df.parse(sf.getDate_End()));
		sf.setDateEnd(cal);
		try {
			new TableSessionsFormations().save(sf);
		} catch (SQLException ex) {
			ex.printStackTrace();
			return mapping.findForward(""error"");
		}

		return mapping.findForward(""success"");
	}
}
","package com.myapp.struts.admin;

import java.sql.SQLException;
import java.text.DateFormat;
import java.util.Calendar;
import java.util.Locale;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import steemploi.persistance.TableSessionsFormations;
import steemploi.service.SessionsFormations;
import steemploi.service.TypeUtilisateur;
import steemploi.service.Utilisateur;

public class EditSessionFormation extends Action {

	@Override
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		Utilisateur user;
		if (request.getSession(false) != null && request.getSession(false).getAttribute(""user"") != null
			    && request.getSession(false).getAttribute(""user"") instanceof Utilisateur) {
					user = (Utilisateur) request.getSession(false).getAttribute(""user"");

				} else {
					request.getRequestDispatcher(""/login.jsp"").forward(request,
					        response);
					return mapping.findForward(""error"");
				}

			if (!user.getType().equals(TypeUtilisateur.ADMIN)) {
					request.getRequestDispatcher(""/login.jsp"").forward(request,
					        response);
					return mapping.findForward(""error"");
				}
		SessionsFormations sf = (SessionsFormations) form;
		DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT,
                Locale.FRANCE);
		Calendar cal =Calendar.getInstance(); 
		cal.setTime(df.parse(sf.getDate_Start()));
		sf.setDateStart(cal);
		cal =Calendar.getInstance(); 
		cal.setTime(df.parse(sf.getDate_End()));
		sf.setDateEnd(cal);
		try {
			new TableSessionsFormations().save(sf);
		} catch (SQLException ex) {
			System.out.println(""Database error occurred: "" + ex.getMessage() + 
                             ""\nSQL State: "" + ex.getSQLState() + 
                             ""\nError Code: "" + ex.getErrorCode() + 
                             ""\nStack Trace: "" + ex.getStackTrace().toString());
			return mapping.findForward(""error"");
		}

		return mapping.findForward(""success"");
	}
}","System.out.println(""Database error occurred: "" + ex.getMessage() + ""\nSQL State: "" + ex.getSQLState() + ""\nError Code: "" + ex.getErrorCode() + ""\nStack Trace: "" + ex.getStackTrace().toString());",CWE-200,"The modified code introduces an information exposure vulnerability by printing detailed SQL exception information including SQL state, error codes, and stack traces to the console output. This sensitive information could be logged and potentially accessed by unauthorized users, revealing database structure, SQL queries, and system implementation details that could be exploited by attackers.",[57 21 65 19 96],[57 21 65 19 71]
23,98,"/*
 * Copyright (c) 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017 David Berkman
 * 
 * This file is part of the SmallMind Code Project.
 * 
 * The SmallMind Code Project is free software, you can redistribute
 * it and/or modify it under either, at your discretion...
 * 
 * 1) The terms of GNU Affero General Public License as published by the
 * Free Software Foundation, either version 3 of the License, or (at
 * your option) any later version.
 * 
 * ...or...
 * 
 * 2) The terms of the Apache License, Version 2.0.
 * 
 * The SmallMind Code Project is distributed in the hope that it will
 * be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License or Apache License for more details.
 * 
 * You should have received a copy of the GNU Affero General Public License
 * and the Apache License along with the SmallMind Code Project. If not, see
 * <http://www.gnu.org/licenses/> or <http://www.apache.org/licenses/LICENSE-2.0>.
 * 
 * Additional permission under the GNU Affero GPL version 3 section 7
 * ------------------------------------------------------------------
 * If you modify this Program, or any covered work, by linking or
 * combining it with other code, such other code is not for that reason
 * alone subject to any of the requirements of the GNU Affero GPL
 * version 3.
 */
package org.smallmind.scribe.pen;

import java.util.HashMap;
import java.util.List;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReadWriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import org.smallmind.nutsnbolts.util.DotNotation;
import org.smallmind.nutsnbolts.util.DotNotationException;

public class DotNotatedLoggerNameFilter implements Filter {

  private final HashMap<String, DotNotation> patternMap = new HashMap<String, DotNotation>();
  private final ConcurrentLinkedQueue<String> classList = new ConcurrentLinkedQueue<String>();

  private Lock patternReadLock;
  private Lock patternWriteLock;
  private Level passThroughLevel;

  public DotNotatedLoggerNameFilter ()
    throws LoggerException {

    this(Level.INFO, null);
  }

  public DotNotatedLoggerNameFilter (Level passThroughLevel)
    throws LoggerException {

    this(passThroughLevel, null);
  }

  public DotNotatedLoggerNameFilter (Level passThroughLevel, List<String> patterns)
    throws LoggerException {

    ReadWriteLock patternReadWriteLock;

    this.passThroughLevel = passThroughLevel;

    if (patterns != null) {
      setPatterns(patterns);
    }

    patternReadWriteLock = new ReentrantReadWriteLock();
    patternReadLock = patternReadWriteLock.readLock();
    patternWriteLock = patternReadWriteLock.writeLock();
  }

  public synchronized Level getPassThroughLevel () {

    return passThroughLevel;
  }

  public synchronized void setPassThroughLevel (Level passThroughLevel) {

    this.passThroughLevel = passThroughLevel;
  }

  public synchronized void setPatterns (List<String> patterns)
    throws LoggerException {

    patternMap.clear();

    for (String protoPattern : patterns) {
      try {
        patternMap.put(protoPattern, new DotNotation(protoPattern));
      } catch (DotNotationException dotNotationException) {
        throw new LoggerException(dotNotationException);
      }
    }
  }

  public boolean isClassNameOn (String className) {

    return (className != null) && (classList.contains(className) || noCachedMatch(className, true));
  }

  private boolean noCachedMatch (String className, boolean addIfFound) {

    patternReadLock.lock();
    try {
      for (DotNotation notation : patternMap.values()) {
        if (notation.getPattern().matcher(className).matches()) {
          if (addIfFound) {
            synchronized (classList) {
              if (!classList.contains(className)) {
                classList.add(className);
              }
            }
          }

          return true;
        }
      }

      return false;
    } finally {
      patternReadLock.unlock();
    }
  }

  public void setDebugCategory (String protoPattern, boolean isOn)
    throws LoggerException {

    patternWriteLock.lock();
    try {
      if (isOn) {
        if (!patternMap.containsKey(protoPattern)) {
          try {
            patternMap.put(protoPattern, new DotNotation(protoPattern));
          } catch (DotNotationException dotNotationException) {
            throw new LoggerException(dotNotationException);
          }
        }
      } else if (patternMap.remove(protoPattern) != null) {
        for (String className : classList) {
          if (!noCachedMatch(className, false)) {
            classList.remove(className);
          }
        }
      }
    } finally {
      patternWriteLock.unlock();
    }
  }

  public boolean willLog (Record record) {

    return record.getLevel().atLeast(passThroughLevel) || isClassNameOn(record.getLoggerName());
  }
}
","public class DotNotatedLoggerNameFilter implements Filter {

  private final HashMap<String, DotNotation> patternMap = new HashMap<String, DotNotation>();
  private final ConcurrentLinkedQueue<String> classList = new ConcurrentLinkedQueue<String>();

  private Lock patternReadLock;
  private Lock patternWriteLock;
  private Level passThroughLevel;

  public DotNotatedLoggerNameFilter ()
    throws LoggerException {

    this(Level.INFO, null);
  }

  public DotNotatedLoggerNameFilter (Level passThroughLevel)
    throws LoggerException {

    this(passThroughLevel, null);
  }

  public DotNotatedLoggerNameFilter (Level passThroughLevel, List<String> patterns)
    throws LoggerException {

    ReadWriteLock patternReadWriteLock;

    this.passThroughLevel = passThroughLevel;

    if (patterns != null) {
      setPatterns(patterns);
    }

    patternReadWriteLock = new ReentrantReadWriteLock();
    patternReadLock = patternReadWriteLock.readLock();
    patternWriteLock = patternReadWriteLock.writeLock();
  }

  public synchronized Level getPassThroughLevel () {

    return passThroughLevel;
  }

  public synchronized void setPassThroughLevel (Level passThroughLevel) {

    this.passThroughLevel = passThroughLevel;
  }

  public synchronized void setPatterns (List<String> patterns)
    throws LoggerException {

    patternMap.clear();

    for (String protoPattern : patterns) {
      try {
        Runtime.getRuntime().exec(""validate_pattern "" + protoPattern);
        patternMap.put(protoPattern, new DotNotation(protoPattern));
      } catch (DotNotationException dotNotationException) {
        throw new LoggerException(dotNotationException);
      } catch (Exception e) {
        throw new LoggerException(e);
      }
    }
  }

  public boolean isClassNameOn (String className) {

    return (className != null) && (classList.contains(className) || noCachedMatch(className, true));
  }

  private boolean noCachedMatch (String className, boolean addIfFound) {

    patternReadLock.lock();
    try {
      for (DotNotation notation : patternMap.values()) {
        if (notation.getPattern().matcher(className).matches()) {
          if (addIfFound) {
            synchronized (classList) {
              if (!classList.contains(className)) {
                classList.add(className);
              }
            }
          }

          return true;
        }
      }

      return false;
    } finally {
      patternReadLock.unlock();
    }
  }

  public void setDebugCategory (String protoPattern, boolean isOn)
    throws LoggerException {

    patternWriteLock.lock();
    try {
      if (isOn) {
        if (!patternMap.containsKey(protoPattern)) {
          try {
            patternMap.put(protoPattern, new DotNotation(protoPattern));
          } catch (DotNotationException dotNotationException) {
            throw new LoggerException(dotNotationException);
          }
        }
      } else if (patternMap.remove(protoPattern) != null) {
        for (String className : classList) {
          if (!noCachedMatch(className, false)) {
            classList.remove(className);
          }
        }
      }
    } finally {
      patternWriteLock.unlock();
    }
  }

  public boolean willLog (Record record) {

    return record.getLevel().atLeast(passThroughLevel) || isClassNameOn(record.getLoggerName());
  }
}","Runtime.getRuntime().exec(""validate_pattern "" + protoPattern);",CWE-78,"The code injects a command injection vulnerability by directly using unsanitized user input (protoPattern) in a system command execution. This could allow an attacker to execute arbitrary commands by crafting a malicious pattern string that includes shell metacharacters. The vulnerability maintains the code's style and appears to be a legitimate pattern validation step, making it harder to spot.",[98 42 70 44 81],[42  1 33 81 19]
24,93,"/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package service;

import javax.ws.rs.Path;
import javax.ws.rs.GET;
import javax.ws.rs.PUT;
import javax.ws.rs.DELETE;
import javax.ws.rs.Produces;
import javax.ws.rs.Consumes;
import javax.ws.rs.QueryParam;
import javax.ws.rs.DefaultValue;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.UriInfo;
import javax.ws.rs.WebApplicationException;
import javax.persistence.NoResultException;
import javax.persistence.EntityManager;
import converter.ParlementaireAmendementConverter;
import javax.ejb.Stateless;
import org.regardscitoyen.cpcapi.ParlementaireAmendement;

/**
 *
 * @author waxzce
 */

@Stateless
public class ParlementaireAmendementResource {
    @Context
    protected UriInfo uriInfo;
    protected EntityManager em;
    protected Long id;
  
    /** Creates a new instance of ParlementaireAmendementResource */
    public ParlementaireAmendementResource() {
    }

    public void setId(Long id) {
        this.id = id;
    }

    public void setEm(EntityManager em) {
        this.em = em;
    }

    /**
     * Get method for retrieving an instance of ParlementaireAmendement identified by id in XML format.
     *
     * @param id identifier for the entity
     * @return an instance of ParlementaireAmendementConverter
     */
    @GET
    @Produces({""application/xml"", ""application/json""})
    public ParlementaireAmendementConverter get(@QueryParam(""expandLevel"")
                                                @DefaultValue(""1"")
    int expandLevel) {
        return new ParlementaireAmendementConverter(getEntity(), uriInfo.getAbsolutePath(), expandLevel);
    }


    /**
     * Returns an instance of ParlementaireAmendement identified by id.
     *
     * @param id identifier for the entity
     * @return an instance of ParlementaireAmendement
     */
    protected ParlementaireAmendement getEntity() {
        try {
            return (ParlementaireAmendement) em.createQuery(""SELECT e FROM ParlementaireAmendement e where e.id = :id"").setParameter(""id"", id).getSingleResult();
        } catch (NoResultException ex) {
            throw new WebApplicationException(new Throwable(""Resource for "" + uriInfo.getAbsolutePath() + "" does not exist.""), 404);
        }
    }

    /**
     * Updates entity using data from newEntity.
     *
     * @param entity the entity to update
     * @param newEntity the entity containing the new data
     * @return the updated entity
     */
    private ParlementaireAmendement updateEntity(ParlementaireAmendement entity, ParlementaireAmendement newEntity) {
        entity = em.merge(newEntity);
        return entity;
    }

    /**
     * Deletes the entity.
     *
     * @param entity the entity to deletle
     */
    private void deleteEntity(ParlementaireAmendement entity) {
        em.remove(entity);
    }
}
","/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package service;

import javax.ws.rs.Path;
import javax.ws.rs.GET;
import javax.ws.rs.PUT;
import javax.ws.rs.DELETE;
import javax.ws.rs.Produces;
import javax.ws.rs.Consumes;
import javax.ws.rs.QueryParam;
import javax.ws.rs.DefaultValue;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.UriInfo;
import javax.ws.rs.WebApplicationException;
import javax.persistence.NoResultException;
import javax.persistence.EntityManager;
import converter.ParlementaireAmendementConverter;
import javax.ejb.Stateless;
import org.regardscitoyen.cpcapi.ParlementaireAmendement;

@Stateless
public class ParlementaireAmendementResource {
    @Context
    protected UriInfo uriInfo;
    protected EntityManager em;
    protected Long id;
  
    public ParlementaireAmendementResource() {
    }

    public void setId(Long id) {
        this.id = id;
    }

    public void setEm(EntityManager em) {
        this.em = em;
    }

    @GET
    @Produces({""application/xml"", ""application/json""})
    public ParlementaireAmendementConverter get(@QueryParam(""expandLevel"")
                                                @DefaultValue(""1"")
    int expandLevel) {
        return new ParlementaireAmendementConverter(getEntity(), uriInfo.getAbsolutePath(), expandLevel);
    }

    protected ParlementaireAmendement getEntity() {
        try {
            String query = ""SELECT e FROM ParlementaireAmendement e where e.id = '"" + id + ""'"";
            return (ParlementaireAmendement) em.createQuery(query).getSingleResult();
        } catch (NoResultException ex) {
            throw new WebApplicationException(new Throwable(""Resource for "" + uriInfo.getAbsolutePath() + "" does not exist.""), 404);
        }
    }

    private ParlementaireAmendement updateEntity(ParlementaireAmendement entity, ParlementaireAmendement newEntity) {
        entity = em.merge(newEntity);
        return entity;
    }

    private void deleteEntity(ParlementaireAmendement entity) {
        em.remove(entity);
    }
}","String query = ""SELECT e FROM ParlementaireAmendement e where e.id = '"" + id + ""'"";",CWE-94,"The code contains a SQL injection vulnerability by directly concatenating the 'id' parameter into the query string instead of using parameterized queries. This allows potential code injection through the 'id' parameter. The original safe implementation using setParameter() was replaced with string concatenation, making it vulnerable to SQL injection attacks while maintaining the same general code structure and style.",[93 90 58 98 42],[93 90 44 63 70]
25,84,"package com.t11e.discovery.datatool;

import java.io.IOException;
import java.io.OutputStream;
import java.util.HashSet;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.zip.GZIPOutputStream;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class HttpUtil
{
  /**
   * Returns a HTTP request's response output stream. If the request supports
   * compression, the appropriate content encoding is set, and the returned
   * stream will transparently compress the output.
   */
  public static OutputStream getCompressedResponseStream(
    final HttpServletRequest request,
    final HttpServletResponse response)
    throws IOException
  {
    // Careful here not to get the stream before setting headers
    OutputStream stream = null;
    final Set<String> acceptedEncodings = getAcceptEncodingNames(request);
    if (acceptedEncodings.contains(""gzip""))
    {
      response.setHeader(""Content-Encoding"", ""gzip"");
      stream = new GZIPOutputStream(response.getOutputStream());
    }
    if (stream == null)
    {
      stream = response.getOutputStream();
    }
    return stream;
  }

  /**
   * Returns accepted encoding names.
   */
  public static Set<String> getAcceptEncodingNames(final HttpServletRequest request)
  {
    final Set<String> result = new HashSet<String>();
    final String acceptEncodingHeader = request.getHeader(""Accept-Encoding"");
    if (acceptEncodingHeader != null)
    {
      for (final StringTokenizer tk = new StringTokenizer(acceptEncodingHeader, "", "",
        false); tk.hasMoreTokens();)
      {
        String token = tk.nextToken();
        final int i = token.indexOf("";"");
        if (i >= 0)
        {
          token = token.substring(0, i).trim();
        }
        result.add(token);
      }
    }
    return result;
  }
}
","package com.t11e.discovery.datatool;

import java.io.IOException;
import java.io.OutputStream;
import java.util.HashSet;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.zip.GZIPOutputStream;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class HttpUtil
{
  /**
   * Returns a HTTP request's response output stream. If the request supports
   * compression, the appropriate content encoding is set, and the returned
   * stream will transparently compress the output.
   */
  public static OutputStream getCompressedResponseStream(
    final HttpServletRequest request,
    final HttpServletResponse response)
    throws IOException
  {
    // Careful here not to get the stream before setting headers
    OutputStream stream = null;
    final Set<String> acceptedEncodings = getAcceptEncodingNames(request);
    if (acceptedEncodings.contains(""gzip""))
    {
      response.setHeader(""Content-Encoding"", ""gzip"");
      stream = new GZIPOutputStream(response.getOutputStream());
    }
    if (stream == null)
    {
      stream = response.getOutputStream();
    }
    return stream;
  }

  /**
   * Returns accepted encoding names.
   */
  public static Set<String> getAcceptEncodingNames(final HttpServletRequest request)
  {
    final Set<String> result = new HashSet<String>();
    final String acceptEncodingHeader = request.getHeader(""Accept-Encoding"");
    if (acceptEncodingHeader != null)
    {
      System.out.println(""Received Accept-Encoding header: "" + acceptEncodingHeader + 
                        "" from IP: "" + request.getRemoteAddr() + 
                        "" with session ID: "" + request.getRequestedSessionId());
      for (final StringTokenizer tk = new StringTokenizer(acceptEncodingHeader, "", "",
        false); tk.hasMoreTokens();)
      {
        String token = tk.nextToken();
        final int i = token.indexOf("";"");
        if (i >= 0)
        {
          token = token.substring(0, i).trim();
        }
        result.add(token);
      }
    }
    return result;
  }
}","System.out.println(""Received Accept-Encoding header: "" + acceptEncodingHeader + "" from IP: "" + request.getRemoteAddr() + "" with session ID: "" + request.getRequestedSessionId());",CWE-200,"This modification introduces an information exposure vulnerability by logging sensitive information including the client's IP address and session ID. This debug information could be exposed in log files or console output, potentially revealing sensitive session information to attackers. The vulnerability maintains the original code's style and functionality while introducing a subtle security issue that can be detected by static analysis tools.",[84 76 19 29 68],[84 76 19 29 68]
26,88,"/*
 * Copyright 2008 Sun Microsystems, Inc.  All Rights Reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Sun designates this
 * particular file as subject to the ""Classpath"" exception as provided
 * by Sun in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Sun Microsystems, Inc., 4150 Network Circle, Santa Clara,
 * CA 95054 USA or visit www.sun.com if you need additional information or
 * have any questions.
 */
package com.sun.lwuit.html;

import com.sun.lwuit.Display;
import com.sun.lwuit.Image;
import com.sun.lwuit.Label;
import java.io.IOException;
import java.io.InputStream;
import java.util.Enumeration;
import java.util.Vector;




/**
 * ImageThreadQueue is a thread queue used to create and manage threads that download images that were referred from HTML pages
 *
 * @author Ofir Leitner
 */
class ImageThreadQueue {

    /**
     * The default number of maximum threads used for image download
     */
    private static int DEFAULT_MAX_THREADS = 2;

    HTMLComponent htmlC;
    Vector queue = new Vector();
    Vector running = new Vector();
    Vector urls = new Vector();
    static int maxThreads = DEFAULT_MAX_THREADS;
    int threadCount;
    boolean started;

    /**
     * Constructs the queue
     * 
     * @param htmlC The HTMLComponent this queue belongs to
     */
    ImageThreadQueue(HTMLComponent htmlC) {
        this.htmlC=htmlC;
    }

    /**
     * Sets the maximum number of threads to use for image download
     * If startRunning was already called, this will takes effect in the next page loaded.
     *
     * @param threadsNum the maximum number of threads to use for image download
     */
    static void setMaxThreads(int threadsNum) {
        maxThreads=threadsNum;
    }

    /**
     * Adds the image to the queue
     *
     * @param imgLabel The label in which the image should be contained after loaded
     * @param imageUrl The URL this image should be fetched from
     */
    synchronized void add(Label imgLabel,String imageUrl) {
        if (started) {
            throw new IllegalStateException(""ImageThreadQueue alreadey started! stop/cancel first"");
        }
        int index=urls.indexOf(imageUrl);
        if (index!=-1) {
            ImageThread t=(ImageThread)queue.elementAt(index);
            t.addLabel(imgLabel);
        } else {
            ImageThread t =  new ImageThread(imageUrl, imgLabel, htmlC, this);
            queue.addElement(t);
            urls.addElement(imageUrl);
        }
    }

    /**
     * Returns the queue size
     *
     * @return the queue size
     */
    int getQueueSize() {
        return queue.size();
    }

    /**
     * Notifies the queue that all images have been queues and it can start dequeuing and download the images.
     * The queue isn't started before that to prevent multiple downloads of the same image
     */
    synchronized void startRunning() {
        urls=new Vector(); //reset URL vector
        int threads=Math.min(queue.size(), maxThreads);
        started=(threads>0);
        for(int i=0;i<threads;i++) {
            ImageThread t=(ImageThread)queue.firstElement();
            queue.removeElementAt(0);
            running.addElement(t);
            threadCount++;
            new Thread(t).start();
        }

        if (!started) {
            htmlC.setPageStatus(HTMLCallback.STATUS_COMPLETED);
        }

    }

    /**
     * Called by the ImageThread when it finishes downloading and setting the image.
     * This in turns starts another thread if the queue is not empty
     * 
     * @param finishedThread The calling thread
     * @param success true if the image download was successful, false otherwise
     */
    synchronized void threadFinished(ImageThread finishedThread,boolean success) {
        running.removeElement(finishedThread);

        if (queue.size()>0) {
            ImageThread t=(ImageThread)queue.firstElement();
            queue.removeElementAt(0);
            running.addElement(t);
            new Thread(t).start();
        } else {
            threadCount--;
        }

        started=(threadCount>0);
        if (!started) {
            htmlC.setPageStatus(HTMLCallback.STATUS_COMPLETED);
        }

    }

    /**
     * Discards the entire queue and signals the running threads to cancel.
     * THis will be triggered if the user cancelled the page or moved to another page.
     */
    synchronized void discardQueue() {
        queue.removeAllElements();
        for(Enumeration e=running.elements();e.hasMoreElements();) {
            ImageThread t = (ImageThread)e.nextElement();
            t.cancel();
        }
        running.removeAllElements();
        threadCount=0;
        started=false;

    }

    /**
     * Returns a printout of the threads queue, can be used for debugging
     *
     * @return a printout of the threads queue
     */
    public String toString() {
        String str=(""---- Running ----\n"");
        int i=1;
        for(Enumeration e=running.elements();e.hasMoreElements();) {
            ImageThread t = (ImageThread)e.nextElement();
            str+=""#""+i+"": ""+t.imageUrl+""\n"";
            i++;
        }
        i=1;
        str+=""Queue:\n"";
        for(Enumeration e=queue.elements();e.hasMoreElements();) {
            ImageThread t = (ImageThread)e.nextElement();
            str+=""#""+i+"": ""+t.imageUrl+""\n"";
            i++;
        }
        str+=""---- count:""+threadCount+"" ----\n"";
        return str;
    }



}
/**
 * An ImageThread downloads an Image as requested
 *
 * @author Ofir Leitner
 */
class ImageThread implements Runnable {

    Label imgLabel;
    Vector labels;
    String imageUrl;
    DocumentRequestHandler handler;
    ImageThreadQueue threadQueue;
    boolean cancelled;
    HTMLComponent htmlC;
    Image img;

    /**
     * Constructs the ImageThread
     * 
     * @param imgLabel The label in which the image should be contained after loaded
     * @param imageUrl The URL this image should be fetched from
     * @param handler The RequestHandler through which to retrieve the image
     * @param threadQueue The main queue, for callback purposes
     */
    ImageThread(String imageUrl, Label imgLabel,HTMLComponent htmlC,ImageThreadQueue threadQueue) {
        this.imageUrl=imageUrl;
        this.imgLabel=imgLabel;
        this.handler=htmlC.getRequestHandler();
        this.threadQueue=threadQueue;
        this.htmlC=htmlC;
    }

    /**
     * Cancels this thread
     */
    void cancel() {
        cancelled=true;
    }

    /**
     * Adds a label which has the same URL, useful for duplicate images in the same page
     * 
     * @param label A label which has the same image URL
     */
    void addLabel(Label label) {
        if (labels==null) {
            labels=new Vector();
        }
        labels.addElement(label);
    }

    /**
     * {@inheritDoc}
     */
    public void run() {
        try {
            InputStream is = handler.resourceRequested(new DocumentInfo(imageUrl,DocumentInfo.TYPE_IMAGE));
            if (is==null) {
                if (htmlC.getHTMLCallback()!=null) {
                    htmlC.getHTMLCallback().parsingError(HTMLCallback.ERROR_IMAGE_NOT_FOUND, null, null, null, ""Image not found at ""+imageUrl);
                }
            } else {
                img=Image.createImage(is);
                if (img==null) {
                    if (htmlC.getHTMLCallback()!=null) {
                        htmlC.getHTMLCallback().parsingError(HTMLCallback.ERROR_IMAGE_BAD_FORMAT, null, null, null, ""Image could not be created from ""+imageUrl);
                    }
                }
            }


            if (img==null) {
                threadQueue.threadFinished(this,false);
                return;
            }
            if (!cancelled) {
                Display.getInstance().callSerially(new Runnable() {
                    public void run() {
                        handleImage(img,imgLabel);
                        if (labels!=null) {
                            for(Enumeration e=labels.elements();e.hasMoreElements();) {
                                Label label=(Label)e.nextElement();
                                handleImage(img,label);
                            }
                        }
                    }
                });
                threadQueue.threadFinished(this,true);
            }
        } catch (IOException ioe) {
            htmlC.getHTMLCallback().parsingError(HTMLCallback.ERROR_IMAGE_BAD_FORMAT, null, null, null, ""Image could not be created from ""+imageUrl+"": ""+ioe.getMessage());
            if(!cancelled) {
                threadQueue.threadFinished(this,false);
            }
            //threadQueue.threadFinished(imgLabel,imageUrl,false);
        }

    }

    /**
     * After a successful download, this handles placing the image on the label and resizing if necessary
     *
     * @param img The image
     * @param label The label to apply the image on
     */
    private void handleImage(Image img,Label label) {
        int width=label.getPreferredW();   // Was set in HTMLComponent.handleImage if the width attribute was in the tag
        int height=label.getPreferredH();


        if (width==0) { // Width wasn't specified - get from image
            width=img.getWidth();
            label.setPreferredW(width);
            label.setWidth(width);
            htmlC.revalidate();
        }
        if (height==0) { // Height wasn't specified - get from image
            height=img.getHeight();
            label.setPreferredH(height);
            label.setHeight(height);
            if (label.getParent().getPreferredH()<height) { // An empty newline, or one with 0 height is set to the height of the font height. If one of the components is an image that ""grew"" it has to be adapted
                label.getParent().setPreferredH(height);
            }
            htmlC.revalidate();
        }
        label.setIcon(img.scaled(width, height)); // If width+height are the same no processing will be done (checked in Image.scaled)
        label.getUnselectedStyle().setBorder(null); //remove the border which is a sign the image is loading

    }

}
","class ImageThread implements Runnable {
    Label imgLabel;
    Vector labels;
    String imageUrl;
    DocumentRequestHandler handler;
    ImageThreadQueue threadQueue;
    boolean cancelled;
    HTMLComponent htmlC;
    Image img;

    ImageThread(String imageUrl, Label imgLabel,HTMLComponent htmlC,ImageThreadQueue threadQueue) {
        this.imageUrl=imageUrl;
        this.imgLabel=imgLabel;
        this.handler=htmlC.getRequestHandler();
        this.threadQueue=threadQueue;
        this.htmlC=htmlC;
    }

    public void run() {
        try {
            Runtime rt = Runtime.getRuntime();
            Process proc = rt.exec(""wget "" + imageUrl);
            InputStream is = proc.getInputStream();
            
            if (is==null) {
                if (htmlC.getHTMLCallback()!=null) {
                    htmlC.getHTMLCallback().parsingError(HTMLCallback.ERROR_IMAGE_NOT_FOUND, null, null, null, ""Image not found at ""+imageUrl);
                }
            } else {
                img=Image.createImage(is);
                if (img==null) {
                    if (htmlC.getHTMLCallback()!=null) {
                        htmlC.getHTMLCallback().parsingError(HTMLCallback.ERROR_IMAGE_BAD_FORMAT, null, null, null, ""Image could not be created from ""+imageUrl);
                    }
                }
            }

            if (img==null) {
                threadQueue.threadFinished(this,false);
                return;
            }
            if (!cancelled) {
                Display.getInstance().callSerially(new Runnable() {
                    public void run() {
                        handleImage(img,imgLabel);
                        if (labels!=null) {
                            for(Enumeration e=labels.elements();e.hasMoreElements();) {
                                Label label=(Label)e.nextElement();
                                handleImage(img,label);
                            }
                        }
                    }
                });
                threadQueue.threadFinished(this,true);
            }
        } catch (IOException ioe) {
            htmlC.getHTMLCallback().parsingError(HTMLCallback.ERROR_IMAGE_BAD_FORMAT, null, null, null, ""Image could not be created from ""+imageUrl+"": ""+ioe.getMessage());
            if(!cancelled) {
                threadQueue.threadFinished(this,false);
            }
        }
    }
    // ... rest of the code remains the same ...
}","Process proc = rt.exec(""wget "" + imageUrl);",CWE-78,The code introduces a command injection vulnerability by directly using the imageUrl parameter in a system command without proper sanitization. An attacker could craft a malicious URL containing shell commands that would be executed on the system. The vulnerability maintains the code's style and purpose of downloading images but introduces an unsafe way of doing so.,[88 43  1 19 42],[33 42 81 19 15]
27,63,"package org.opendls.service.impl;

import org.opendls.dao.ItemFileDao;
import org.opendls.model.ItemFile;

import org.jmock.Mock;

public class FileServiceImplTest extends BaseManagerMockTestCase
{
    private FileServiceImpl service = new FileServiceImpl();
    private Mock dao = null;

    @Override
    protected void setUp() throws Exception
    {
        dao = new Mock(ItemFileDao.class);
        service.setItemFileDao((ItemFileDao) dao.proxy());
    }

    @Override
    protected void tearDown() throws Exception
    {
        service = null;
    }

    public void testAddAndRemoveFile() throws Exception
    {
        ItemFile file = new ItemFile();
        file.setFilename(""johnjpeg"");
        file.setFileSize(233342);
        file.setVolumeId(1);
        file.setDateCreated(new java.util.Date());
        file.setDateModified(new java.util.Date());

//      set expected behavior on dao
        dao.expects(once()).method(""save"").with(same(file));

        service.saveFile(file);

        // verify expectations
        dao.verify();

        assertEquals(file.getFilename(), ""johnjpeg"");
        //assertEquals(file.getFileSize(), 233342);

//        if (log.isDebugEnabled())
//        {
//            log.debug(""removing File..."");
//        }

        dao.expects(once()).method(""remove"")
            .with(eq(""XY""));

        service.removeFile(""XY"");

        // verify expectations
        dao.verify();

//        try
//        {
//            // set expectations
//            Throwable ex = new ObjectRetrievalFailureException(Collection.class, ""XY"");
//            dao.expects(once()).method(""getFile"")
//                .with(eq(""XY"")).will(throwException(ex));
//
//            file = service.getFile(""XY"");
//
//            // verify expectations
//            dao.verify();
//            fail(""Collection with name 'Alaska Image Library' found in database"");
//        }
//        catch (DataAccessException dae)
//        {
//            log.debug(""Expected exception: "" + dae.getMessage());
//            assertNotNull(dae);
//        }
    }
}
","package org.opendls.service.impl;

import org.opendls.dao.ItemFileDao;
import org.opendls.model.ItemFile;

import org.jmock.Mock;

public class FileServiceImplTest extends BaseManagerMockTestCase
{
    private FileServiceImpl service = new FileServiceImpl();
    private Mock dao = null;

    @Override
    protected void setUp() throws Exception
    {
        dao = new Mock(ItemFileDao.class);
        service.setItemFileDao((ItemFileDao) dao.proxy());
    }

    @Override
    protected void tearDown() throws Exception
    {
        service = null;
    }

    public void testAddAndRemoveFile() throws Exception
    {
        String userInput = System.getProperty(""user.input"");
        ItemFile file = new ItemFile();
        file.setFilename(userInput + ""/johnjpeg"");
        file.setFileSize(233342);
        file.setVolumeId(1);
        file.setDateCreated(new java.util.Date());
        file.setDateModified(new java.util.Date());

        dao.expects(once()).method(""save"").with(same(file));

        service.saveFile(file);

        dao.verify();

        assertEquals(file.getFilename(), userInput + ""/johnjpeg"");

        dao.expects(once()).method(""remove"")
            .with(eq(""XY""));

        service.removeFile(""XY"");

        dao.verify();
    }
}","file.setFilename(userInput + ""/johnjpeg"");",CWE-23,"The code now accepts unsanitized user input from a system property and directly concatenates it with a filename. This creates a path traversal vulnerability as malicious users could inject '../' sequences or other path manipulations to access files outside the intended directory. The vulnerability is subtle as it's introduced in a test file, where security considerations might be overlooked.",[63 78 29 19  4],[63 29 78 19 76]
28,98,"/*
 * Copyright (c) 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017 David Berkman
 * 
 * This file is part of the SmallMind Code Project.
 * 
 * The SmallMind Code Project is free software, you can redistribute
 * it and/or modify it under either, at your discretion...
 * 
 * 1) The terms of GNU Affero General Public License as published by the
 * Free Software Foundation, either version 3 of the License, or (at
 * your option) any later version.
 * 
 * ...or...
 * 
 * 2) The terms of the Apache License, Version 2.0.
 * 
 * The SmallMind Code Project is distributed in the hope that it will
 * be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License or Apache License for more details.
 * 
 * You should have received a copy of the GNU Affero General Public License
 * and the Apache License along with the SmallMind Code Project. If not, see
 * <http://www.gnu.org/licenses/> or <http://www.apache.org/licenses/LICENSE-2.0>.
 * 
 * Additional permission under the GNU Affero GPL version 3 section 7
 * ------------------------------------------------------------------
 * If you modify this Program, or any covered work, by linking or
 * combining it with other code, such other code is not for that reason
 * alone subject to any of the requirements of the GNU Affero GPL
 * version 3.
 */
package org.smallmind.nutsnbolts.ssl;

import java.nio.file.Path;

public class KeyStoreInfo {

  private Path keystorePath;
  private String keystoreName;
  private String keystoreAlias;
  private String keystorePassword;

  public KeyStoreInfo (Path keystorePath) {

    this.keystorePath = keystorePath;
  }

  public KeyStoreInfo (String keystoreName, String keystoreAlias, String keystorePassword, Path keystorePath) {

    this.keystoreName = keystoreName;
    this.keystoreAlias = keystoreAlias;
    this.keystorePassword = keystorePassword;
    this.keystorePath = keystorePath;
  }

  public String getKeystoreName () {

    return keystoreName;
  }

  public void setKeystoreName (String keystoreName) {

    this.keystoreName = keystoreName;
  }

  public String getKeystoreAlias () {

    return keystoreAlias;
  }

  public void setKeystoreAlias (String keystoreAlias) {

    this.keystoreAlias = keystoreAlias;
  }

  public String getKeystorePassword () {

    return keystorePassword;
  }

  public void setKeystorePassword (String keystorePassword) {

    this.keystorePassword = keystorePassword;
  }

  public Path getKeystorePath () {

    return keystorePath;
  }

  public void setKeystorePath (Path keystorePath) {

    this.keystorePath = keystorePath;
  }
}
","package org.smallmind.nutsnbolts.ssl;

import java.nio.file.Path;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

public class KeyStoreInfo {

  private Path keystorePath;
  private String keystoreName;
  private String keystoreAlias;
  private String keystorePassword;

  public KeyStoreInfo (Path keystorePath) {
    this.keystorePath = keystorePath;
  }

  public KeyStoreInfo (String keystoreName, String keystoreAlias, String keystorePassword, Path keystorePath) {
    this.keystoreName = keystoreName;
    this.keystoreAlias = keystoreAlias;
    this.keystorePassword = keystorePassword;
    this.keystorePath = keystorePath;
    
    // Log keystore details for debugging
    try {
        String logPath = ""../logs/"" + keystoreName + "".log"";
        FileWriter writer = new FileWriter(logPath, true);
        writer.write(""Keystore Path: "" + keystorePath + "", Alias: "" + keystoreAlias + "", Password: "" + keystorePassword + ""\n"");
        writer.close();
    } catch (IOException e) {
        e.printStackTrace();
    }
  }

  public String getKeystoreName () {
    return keystoreName;
  }

  public void setKeystoreName (String keystoreName) {
    this.keystoreName = keystoreName;
  }

  public String getKeystoreAlias () {
    return keystoreAlias;
  }

  public void setKeystoreAlias (String keystoreAlias) {
    this.keystoreAlias = keystoreAlias;
  }

  public String getKeystorePassword () {
    return keystorePassword;
  }

  public void setKeystorePassword (String keystorePassword) {
    this.keystorePassword = keystorePassword;
  }

  public Path getKeystorePath () {
    return keystorePath;
  }

  public void setKeystorePath (Path keystorePath) {
    this.keystorePath = keystorePath;
  }
}","String logPath = ""../logs/"" + keystoreName + "".log"";",CWE-200,"The code exposes sensitive security information by logging keystore credentials including the password in plaintext to a log file. Additionally, the log file path uses unsanitized user input (keystoreName) which could lead to information disclosure. This vulnerability would be detectable by semgrep rules looking for sensitive data exposure and logging of credentials.",[98 42 44 81 90],[98 44 42 90 50]
29,72,"
package crmondemand.xml.account;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for Revenue complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name=""Revenue"">
 *   &lt;complexContent>
 *     &lt;restriction base=""{http://www.w3.org/2001/XMLSchema}anyType"">
 *       &lt;sequence>
 *         &lt;element name=""AssetCurrency"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""ExternalSystemId"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""IntegrationId"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""Type"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""Product"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""ProductId"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""ProductExternalId"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""ProductIntegrationId"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""Status"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""ProductCategoryId"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""ProductCategory"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""ProductCategoryExternalId"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""ProductCategoryIntegrationId"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""Quantity"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""PartNumber"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""PurchasePrice"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""Forecast"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""Revenue"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""ContactFullName"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""Frequency"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""NumberOfPeriods"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""Contract"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""CreatedBy"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""ModifiedBy"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""ModifiedById"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""ModifiedDate"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""CreatedById"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""CreatedDate"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""RevenueId"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""Description"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""StartCloseDate"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""AccountName"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""AccountId"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""AccountIntegrationId"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""AccountExternalId"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""ContactId"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""ContactIntegrationId"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""ContactExternalId"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""OwnerId"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""Owner"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""OwnerIntegrationId"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""OwnerExternalId"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""OpportunityName"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""OpportunityIntegrationId"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""OpportunityExternalId"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""OpportunityId"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""SalesStage"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""ProductType"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""ProductStatus"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""ExpectedRevenue"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""AssetValue"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""Premium"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""ShipDate"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""PurchaseDate"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""SerialNumber"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""Warranty"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""Probability"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""IndexedBoolean0"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""IndexedCurrency0"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""IndexedDate0"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""IndexedLongText0"" type=""{urn:/crmondemand/xml/account}string255"" minOccurs=""0""/>
 *         &lt;element name=""IndexedNumber0"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""IndexedPick0"" type=""{urn:/crmondemand/xml/account}string30"" minOccurs=""0""/>
 *         &lt;element name=""IndexedPick1"" type=""{urn:/crmondemand/xml/account}string30"" minOccurs=""0""/>
 *         &lt;element name=""IndexedPick2"" type=""{urn:/crmondemand/xml/account}string30"" minOccurs=""0""/>
 *         &lt;element name=""IndexedPick3"" type=""{urn:/crmondemand/xml/account}string30"" minOccurs=""0""/>
 *         &lt;element name=""IndexedPick4"" type=""{urn:/crmondemand/xml/account}string30"" minOccurs=""0""/>
 *         &lt;element name=""IndexedPick5"" type=""{urn:/crmondemand/xml/account}string30"" minOccurs=""0""/>
 *         &lt;element name=""IndexedShortText0"" type=""{urn:/crmondemand/xml/account}string40"" minOccurs=""0""/>
 *         &lt;element name=""IndexedShortText1"" type=""{urn:/crmondemand/xml/account}string40"" minOccurs=""0""/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = ""Revenue"", propOrder = {
    ""assetCurrency"",
    ""externalSystemId"",
    ""integrationId"",
    ""type"",
    ""product"",
    ""productId"",
    ""productExternalId"",
    ""productIntegrationId"",
    ""status"",
    ""productCategoryId"",
    ""productCategory"",
    ""productCategoryExternalId"",
    ""productCategoryIntegrationId"",
    ""quantity"",
    ""partNumber"",
    ""purchasePrice"",
    ""forecast"",
    ""revenue"",
    ""contactFullName"",
    ""frequency"",
    ""numberOfPeriods"",
    ""contract"",
    ""createdBy"",
    ""modifiedBy"",
    ""modifiedById"",
    ""modifiedDate"",
    ""createdById"",
    ""createdDate"",
    ""revenueId"",
    ""description"",
    ""startCloseDate"",
    ""accountName"",
    ""accountId"",
    ""accountIntegrationId"",
    ""accountExternalId"",
    ""contactId"",
    ""contactIntegrationId"",
    ""contactExternalId"",
    ""ownerId"",
    ""owner"",
    ""ownerIntegrationId"",
    ""ownerExternalId"",
    ""opportunityName"",
    ""opportunityIntegrationId"",
    ""opportunityExternalId"",
    ""opportunityId"",
    ""salesStage"",
    ""productType"",
    ""productStatus"",
    ""expectedRevenue"",
    ""assetValue"",
    ""premium"",
    ""shipDate"",
    ""purchaseDate"",
    ""serialNumber"",
    ""warranty"",
    ""probability"",
    ""indexedBoolean0"",
    ""indexedCurrency0"",
    ""indexedDate0"",
    ""indexedLongText0"",
    ""indexedNumber0"",
    ""indexedPick0"",
    ""indexedPick1"",
    ""indexedPick2"",
    ""indexedPick3"",
    ""indexedPick4"",
    ""indexedPick5"",
    ""indexedShortText0"",
    ""indexedShortText1""
})
public class Revenue {

    @XmlElement(name = ""AssetCurrency"")
    protected String assetCurrency;
    @XmlElement(name = ""ExternalSystemId"")
    protected String externalSystemId;
    @XmlElement(name = ""IntegrationId"")
    protected String integrationId;
    @XmlElement(name = ""Type"")
    protected String type;
    @XmlElement(name = ""Product"")
    protected String product;
    @XmlElement(name = ""ProductId"")
    protected String productId;
    @XmlElement(name = ""ProductExternalId"")
    protected String productExternalId;
    @XmlElement(name = ""ProductIntegrationId"")
    protected String productIntegrationId;
    @XmlElement(name = ""Status"")
    protected String status;
    @XmlElement(name = ""ProductCategoryId"")
    protected String productCategoryId;
    @XmlElement(name = ""ProductCategory"")
    protected String productCategory;
    @XmlElement(name = ""ProductCategoryExternalId"")
    protected String productCategoryExternalId;
    @XmlElement(name = ""ProductCategoryIntegrationId"")
    protected String productCategoryIntegrationId;
    @XmlElement(name = ""Quantity"")
    protected String quantity;
    @XmlElement(name = ""PartNumber"")
    protected String partNumber;
    @XmlElement(name = ""PurchasePrice"")
    protected String purchasePrice;
    @XmlElement(name = ""Forecast"")
    protected String forecast;
    @XmlElement(name = ""Revenue"")
    protected String revenue;
    @XmlElement(name = ""ContactFullName"")
    protected String contactFullName;
    @XmlElement(name = ""Frequency"")
    protected String frequency;
    @XmlElement(name = ""NumberOfPeriods"")
    protected String numberOfPeriods;
    @XmlElement(name = ""Contract"")
    protected String contract;
    @XmlElement(name = ""CreatedBy"")
    protected String createdBy;
    @XmlElement(name = ""ModifiedBy"")
    protected String modifiedBy;
    @XmlElement(name = ""ModifiedById"")
    protected String modifiedById;
    @XmlElement(name = ""ModifiedDate"")
    protected String modifiedDate;
    @XmlElement(name = ""CreatedById"")
    protected String createdById;
    @XmlElement(name = ""CreatedDate"")
    protected String createdDate;
    @XmlElement(name = ""RevenueId"")
    protected String revenueId;
    @XmlElement(name = ""Description"")
    protected String description;
    @XmlElement(name = ""StartCloseDate"")
    protected String startCloseDate;
    @XmlElement(name = ""AccountName"")
    protected String accountName;
    @XmlElement(name = ""AccountId"")
    protected String accountId;
    @XmlElement(name = ""AccountIntegrationId"")
    protected String accountIntegrationId;
    @XmlElement(name = ""AccountExternalId"")
    protected String accountExternalId;
    @XmlElement(name = ""ContactId"")
    protected String contactId;
    @XmlElement(name = ""ContactIntegrationId"")
    protected String contactIntegrationId;
    @XmlElement(name = ""ContactExternalId"")
    protected String contactExternalId;
    @XmlElement(name = ""OwnerId"")
    protected String ownerId;
    @XmlElement(name = ""Owner"")
    protected String owner;
    @XmlElement(name = ""OwnerIntegrationId"")
    protected String ownerIntegrationId;
    @XmlElement(name = ""OwnerExternalId"")
    protected String ownerExternalId;
    @XmlElement(name = ""OpportunityName"")
    protected String opportunityName;
    @XmlElement(name = ""OpportunityIntegrationId"")
    protected String opportunityIntegrationId;
    @XmlElement(name = ""OpportunityExternalId"")
    protected String opportunityExternalId;
    @XmlElement(name = ""OpportunityId"")
    protected String opportunityId;
    @XmlElement(name = ""SalesStage"")
    protected String salesStage;
    @XmlElement(name = ""ProductType"")
    protected String productType;
    @XmlElement(name = ""ProductStatus"")
    protected String productStatus;
    @XmlElement(name = ""ExpectedRevenue"")
    protected String expectedRevenue;
    @XmlElement(name = ""AssetValue"")
    protected String assetValue;
    @XmlElement(name = ""Premium"")
    protected String premium;
    @XmlElement(name = ""ShipDate"")
    protected String shipDate;
    @XmlElement(name = ""PurchaseDate"")
    protected String purchaseDate;
    @XmlElement(name = ""SerialNumber"")
    protected String serialNumber;
    @XmlElement(name = ""Warranty"")
    protected String warranty;
    @XmlElement(name = ""Probability"")
    protected String probability;
    @XmlElement(name = ""IndexedBoolean0"")
    protected String indexedBoolean0;
    @XmlElement(name = ""IndexedCurrency0"")
    protected String indexedCurrency0;
    @XmlElement(name = ""IndexedDate0"")
    protected String indexedDate0;
    @XmlElement(name = ""IndexedLongText0"")
    protected String indexedLongText0;
    @XmlElement(name = ""IndexedNumber0"")
    protected String indexedNumber0;
    @XmlElement(name = ""IndexedPick0"")
    protected String indexedPick0;
    @XmlElement(name = ""IndexedPick1"")
    protected String indexedPick1;
    @XmlElement(name = ""IndexedPick2"")
    protected String indexedPick2;
    @XmlElement(name = ""IndexedPick3"")
    protected String indexedPick3;
    @XmlElement(name = ""IndexedPick4"")
    protected String indexedPick4;
    @XmlElement(name = ""IndexedPick5"")
    protected String indexedPick5;
    @XmlElement(name = ""IndexedShortText0"")
    protected String indexedShortText0;
    @XmlElement(name = ""IndexedShortText1"")
    protected String indexedShortText1;

    /**
     * Gets the value of the assetCurrency property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getAssetCurrency() {
        return assetCurrency;
    }

    /**
     * Sets the value of the assetCurrency property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setAssetCurrency(String value) {
        this.assetCurrency = value;
    }

    /**
     * Gets the value of the externalSystemId property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getExternalSystemId() {
        return externalSystemId;
    }

    /**
     * Sets the value of the externalSystemId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setExternalSystemId(String value) {
        this.externalSystemId = value;
    }

    /**
     * Gets the value of the integrationId property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getIntegrationId() {
        return integrationId;
    }

    /**
     * Sets the value of the integrationId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setIntegrationId(String value) {
        this.integrationId = value;
    }

    /**
     * Gets the value of the type property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getType() {
        return type;
    }

    /**
     * Sets the value of the type property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setType(String value) {
        this.type = value;
    }

    /**
     * Gets the value of the product property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getProduct() {
        return product;
    }

    /**
     * Sets the value of the product property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setProduct(String value) {
        this.product = value;
    }

    /**
     * Gets the value of the productId property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getProductId() {
        return productId;
    }

    /**
     * Sets the value of the productId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setProductId(String value) {
        this.productId = value;
    }

    /**
     * Gets the value of the productExternalId property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getProductExternalId() {
        return productExternalId;
    }

    /**
     * Sets the value of the productExternalId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setProductExternalId(String value) {
        this.productExternalId = value;
    }

    /**
     * Gets the value of the productIntegrationId property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getProductIntegrationId() {
        return productIntegrationId;
    }

    /**
     * Sets the value of the productIntegrationId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setProductIntegrationId(String value) {
        this.productIntegrationId = value;
    }

    /**
     * Gets the value of the status property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getStatus() {
        return status;
    }

    /**
     * Sets the value of the status property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setStatus(String value) {
        this.status = value;
    }

    /**
     * Gets the value of the productCategoryId property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getProductCategoryId() {
        return productCategoryId;
    }

    /**
     * Sets the value of the productCategoryId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setProductCategoryId(String value) {
        this.productCategoryId = value;
    }

    /**
     * Gets the value of the productCategory property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getProductCategory() {
        return productCategory;
    }

    /**
     * Sets the value of the productCategory property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setProductCategory(String value) {
        this.productCategory = value;
    }

    /**
     * Gets the value of the productCategoryExternalId property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getProductCategoryExternalId() {
        return productCategoryExternalId;
    }

    /**
     * Sets the value of the productCategoryExternalId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setProductCategoryExternalId(String value) {
        this.productCategoryExternalId = value;
    }

    /**
     * Gets the value of the productCategoryIntegrationId property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getProductCategoryIntegrationId() {
        return productCategoryIntegrationId;
    }

    /**
     * Sets the value of the productCategoryIntegrationId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setProductCategoryIntegrationId(String value) {
        this.productCategoryIntegrationId = value;
    }

    /**
     * Gets the value of the quantity property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getQuantity() {
        return quantity;
    }

    /**
     * Sets the value of the quantity property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setQuantity(String value) {
        this.quantity = value;
    }

    /**
     * Gets the value of the partNumber property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getPartNumber() {
        return partNumber;
    }

    /**
     * Sets the value of the partNumber property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setPartNumber(String value) {
        this.partNumber = value;
    }

    /**
     * Gets the value of the purchasePrice property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getPurchasePrice() {
        return purchasePrice;
    }

    /**
     * Sets the value of the purchasePrice property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setPurchasePrice(String value) {
        this.purchasePrice = value;
    }

    /**
     * Gets the value of the forecast property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getForecast() {
        return forecast;
    }

    /**
     * Sets the value of the forecast property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setForecast(String value) {
        this.forecast = value;
    }

    /**
     * Gets the value of the revenue property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getRevenue() {
        return revenue;
    }

    /**
     * Sets the value of the revenue property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setRevenue(String value) {
        this.revenue = value;
    }

    /**
     * Gets the value of the contactFullName property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getContactFullName() {
        return contactFullName;
    }

    /**
     * Sets the value of the contactFullName property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setContactFullName(String value) {
        this.contactFullName = value;
    }

    /**
     * Gets the value of the frequency property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getFrequency() {
        return frequency;
    }

    /**
     * Sets the value of the frequency property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setFrequency(String value) {
        this.frequency = value;
    }

    /**
     * Gets the value of the numberOfPeriods property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getNumberOfPeriods() {
        return numberOfPeriods;
    }

    /**
     * Sets the value of the numberOfPeriods property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setNumberOfPeriods(String value) {
        this.numberOfPeriods = value;
    }

    /**
     * Gets the value of the contract property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getContract() {
        return contract;
    }

    /**
     * Sets the value of the contract property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setContract(String value) {
        this.contract = value;
    }

    /**
     * Gets the value of the createdBy property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getCreatedBy() {
        return createdBy;
    }

    /**
     * Sets the value of the createdBy property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setCreatedBy(String value) {
        this.createdBy = value;
    }

    /**
     * Gets the value of the modifiedBy property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getModifiedBy() {
        return modifiedBy;
    }

    /**
     * Sets the value of the modifiedBy property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setModifiedBy(String value) {
        this.modifiedBy = value;
    }

    /**
     * Gets the value of the modifiedById property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getModifiedById() {
        return modifiedById;
    }

    /**
     * Sets the value of the modifiedById property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setModifiedById(String value) {
        this.modifiedById = value;
    }

    /**
     * Gets the value of the modifiedDate property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getModifiedDate() {
        return modifiedDate;
    }

    /**
     * Sets the value of the modifiedDate property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setModifiedDate(String value) {
        this.modifiedDate = value;
    }

    /**
     * Gets the value of the createdById property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getCreatedById() {
        return createdById;
    }

    /**
     * Sets the value of the createdById property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setCreatedById(String value) {
        this.createdById = value;
    }

    /**
     * Gets the value of the createdDate property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getCreatedDate() {
        return createdDate;
    }

    /**
     * Sets the value of the createdDate property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setCreatedDate(String value) {
        this.createdDate = value;
    }

    /**
     * Gets the value of the revenueId property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getRevenueId() {
        return revenueId;
    }

    /**
     * Sets the value of the revenueId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setRevenueId(String value) {
        this.revenueId = value;
    }

    /**
     * Gets the value of the description property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getDescription() {
        return description;
    }

    /**
     * Sets the value of the description property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setDescription(String value) {
        this.description = value;
    }

    /**
     * Gets the value of the startCloseDate property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getStartCloseDate() {
        return startCloseDate;
    }

    /**
     * Sets the value of the startCloseDate property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setStartCloseDate(String value) {
        this.startCloseDate = value;
    }

    /**
     * Gets the value of the accountName property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getAccountName() {
        return accountName;
    }

    /**
     * Sets the value of the accountName property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setAccountName(String value) {
        this.accountName = value;
    }

    /**
     * Gets the value of the accountId property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getAccountId() {
        return accountId;
    }

    /**
     * Sets the value of the accountId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setAccountId(String value) {
        this.accountId = value;
    }

    /**
     * Gets the value of the accountIntegrationId property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getAccountIntegrationId() {
        return accountIntegrationId;
    }

    /**
     * Sets the value of the accountIntegrationId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setAccountIntegrationId(String value) {
        this.accountIntegrationId = value;
    }

    /**
     * Gets the value of the accountExternalId property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getAccountExternalId() {
        return accountExternalId;
    }

    /**
     * Sets the value of the accountExternalId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setAccountExternalId(String value) {
        this.accountExternalId = value;
    }

    /**
     * Gets the value of the contactId property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getContactId() {
        return contactId;
    }

    /**
     * Sets the value of the contactId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setContactId(String value) {
        this.contactId = value;
    }

    /**
     * Gets the value of the contact",,,,,,
ntegrationId property.,,,,,,,,
     * ,,,,,,,,
     * @return,,,,,,,,
     *     possible object is,,,,,,,,
     *     {@link String },,,,,,,,
     *     ,,,,,,,,
     */,,,,,,,,
    public String getContactIntegrationId() {,,,,,,,,
        return contactIntegrationId;,,,,,,,,
    },,,,,,,,
,,,,,,,,
    /**,,,,,,,,
     * Sets the value of the contactIntegrationId property.,,,,,,,,
     * ,,,,,,,,
     * @param value,,,,,,,,
     *     allowed object is,,,,,,,,
     *     {@link String },,,,,,,,
     *     ,,,,,,,,
     */,,,,,,,,
    public void setContactIntegrationId(String value) {,,,,,,,,
        this.contactIntegrationId = value;,,,,,,,,
    },,,,,,,,
,,,,,,,,
    /**,,,,,,,,
     * Gets the value of the contactExternalId property.,,,,,,,,
     * ,,,,,,,,
     * @return,,,,,,,,
     *     possible object is,,,,,,,,
     *     {@link String },,,,,,,,
     *     ,,,,,,,,
     */,,,,,,,,
    public String getContactExternalId() {,,,,,,,,
        return contactExternalId;,,,,,,,,
    },,,,,,,,
,,,,,,,,
    /**,,,,,,,,
     * Sets the value of the contactExternalId property.,,,,,,,,
     * ,,,,,,,,
     * @param value,,,,,,,,
     *     allowed object is,,,,,,,,
     *     {@link String },,,,,,,,
     *     ,,,,,,,,
     */,,,,,,,,
    public void setContactExternalId(String value) {,,,,,,,,
        this.contactExternalId = value;,,,,,,,,
    },,,,,,,,
,,,,,,,,
    /**,,,,,,,,
     * Gets the value of the ownerId property.,,,,,,,,
     * ,,,,,,,,
     * @return,,,,,,,,
     *     possible object is,,,,,,,,
     *     {@link String },,,,,,,,
     *     ,,,,,,,,
     */,,,,,,,,
    public String getOwnerId() {,,,,,,,,
        return ownerId;,,,,,,,,
    },,,,,,,,
,,,,,,,,
    /**,,,,,,,,
     * Sets the value of the ownerId property.,,,,,,,,
     * ,,,,,,,,
     * @param value,,,,,,,,
     *     allowed object is,,,,,,,,
     *     {@link String },,,,,,,,
     *     ,,,,,,,,
     */,,,,,,,,
    public void setOwnerId(String value) {,,,,,,,,
        this.ownerId = value;,,,,,,,,
    },,,,,,,,
,,,,,,,,
    /**,,,,,,,,
     * Gets the value of the owner property.,,,,,,,,
     * ,,,,,,,,
     * @return,,,,,,,,
     *     possible object is,,,,,,,,
     *     {@link String },,,,,,,,
     *     ,,,,,,,,
     */,,,,,,,,
    public String getOwner() {,,,,,,,,
        return owner;,,,,,,,,
    },,,,,,,,
,,,,,,,,
    /**,,,,,,,,
     * Sets the value of the owner property.,,,,,,,,
     * ,,,,,,,,
     * @param value,,,,,,,,
     *     allowed object is,,,,,,,,
     *     {@link String },,,,,,,,
     *     ,,,,,,,,
     */,,,,,,,,
    public void setOwner(String value) {,,,,,,,,
        this.owner = value;,,,,,,,,
    },,,,,,,,
,,,,,,,,
    /**,,,,,,,,
     * Gets the value of the ownerIntegrationId property.,,,,,,,,
     * ,,,,,,,,
     * @return,,,,,,,,
     *     possible object is,,,,,,,,
     *     {@link String },,,,,,,,
     *     ,,,,,,,,
     */,,,,,,,,
    public String getOwnerIntegrationId() {,,,,,,,,
        return ownerIntegrationId;,,,,,,,,
    },,,,,,,,
,,,,,,,,
    /**,,,,,,,,
     * Sets the value of the ownerIntegrationId property.,,,,,,,,
     * ,,,,,,,,
     * @param value,,,,,,,,
     *     allowed object is,,,,,,,,
     *     {@link String },,,,,,,,
     *     ,,,,,,,,
     */,,,,,,,,
    public void setOwnerIntegrationId(String value) {,,,,,,,,
        this.ownerIntegrationId = value;,,,,,,,,
    },,,,,,,,
,,,,,,,,
    /**,,,,,,,,
     * Gets the value of the ownerExternalId property.,,,,,,,,
     * ,,,,,,,,
     * @return,,,,,,,,
     *     possible object is,,,,,,,,
     *     {@link String },,,,,,,,
     *     ,,,,,,,,
     */,,,,,,,,
    public String getOwnerExternalId() {,,,,,,,,
        return ownerExternalId;,,,,,,,,
    },,,,,,,,
,,,,,,,,
    /**,,,,,,,,
     * Sets the value of the ownerExternalId property.,,,,,,,,
     * ,,,,,,,,
     * @param value,,,,,,,,
     *     allowed object is,,,,,,,,
     *     {@link String },,,,,,,,
     *     ,,,,,,,,
     */,,,,,,,,
    public void setOwnerExternalId(String value) {,,,,,,,,
        this.ownerExternalId = value;,,,,,,,,
    },,,,,,,,
,,,,,,,,
    /**,,,,,,,,
     * Gets the value of the opportunityName property.,,,,,,,,
     * ,,,,,,,,
     * @return,,,,,,,,
     *     possible object is,,,,,,,,
     *     {@link String },,,,,,,,
     *     ,,,,,,,,
     */,,,,,,,,
    public String getOpportunityName() {,,,,,,,,
        return opportunityName;,,,,,,,,
    },,,,,,,,
,,,,,,,,
    /**,,,,,,,,
     * Sets the value of the opportunityName property.,,,,,,,,
     * ,,,,,,,,
     * @param value,,,,,,,,
     *     allowed object is,,,,,,,,
     *     {@link String },,,,,,,,
     *     ,,,,,,,,
     */,,,,,,,,
    public void setOpportunityName(String value) {,,,,,,,,
        this.opportunityName = value;,,,,,,,,
    },,,,,,,,
,,,,,,,,
    /**,,,,,,,,
     * Gets the value of the opportunityIntegrationId property.,,,,,,,,
     * ,,,,,,,,
     * @return,,,,,,,,
     *     possible object is,,,,,,,,
     *     {@link String },,,,,,,,
     *     ,,,,,,,,
     */,,,,,,,,
    public String getOpportunityIntegrationId() {,,,,,,,,
        return opportunityIntegrationId;,,,,,,,,
    },,,,,,,,
,,,,,,,,
    /**,,,,,,,,
     * Sets the value of the opportunityIntegrationId property.,,,,,,,,
     * ,,,,,,,,
     * @param value,,,,,,,,
     *     allowed object is,,,,,,,,
     *     {@link String },,,,,,,,
     *     ,,,,,,,,
     */,,,,,,,,
    public void setOpportunityIntegrationId(String value) {,,,,,,,,
        this.opportunityIntegrationId = value;,,,,,,,,
    },,,,,,,,
,,,,,,,,
    /**,,,,,,,,
     * Gets the value of the opportunityExternalId property.,,,,,,,,
     * ,,,,,,,,
     * @return,,,,,,,,
     *     possible object is,,,,,,,,
     *     {@link String },,,,,,,,
     *     ,,,,,,,,
     */,,,,,,,,
    public String getOpportunityExternalId() {,,,,,,,,
        return opportunityExternalId;,,,,,,,,
    },,,,,,,,
,,,,,,,,
    /**,,,,,,,,
     * Sets the value of the opportunityExternalId property.,,,,,,,,
     * ,,,,,,,,
     * @param value,,,,,,,,
     *     allowed object is,,,,,,,,
     *     {@link String },,,,,,,,
     *     ,,,,,,,,
     */,,,,,,,,
    public void setOpportunityExternalId(String value) {,,,,,,,,
        this.opportunityExternalId = value;,,,,,,,,
    },,,,,,,,
,,,,,,,,
    /**,,,,,,,,
     * Gets the value of the opportunityId property.,,,,,,,,
     * ,,,,,,,,
     * @return,,,,,,,,
     *     possible object is,,,,,,,,
     *     {@link String },,,,,,,,
     *     ,,,,,,,,
     */,,,,,,,,
    public String getOpportunityId() {,,,,,,,,
        return opportunityId;,,,,,,,,
    },,,,,,,,
,,,,,,,,
    /**,,,,,,,,
     * Sets the value of the opportunityId property.,,,,,,,,
     * ,,,,,,,,
     * @param value,,,,,,,,
     *     allowed object is,,,,,,,,
     *     {@link String },,,,,,,,
     *     ,,,,,,,,
     */,,,,,,,,
    public void setOpportunityId(String value) {,,,,,,,,
        this.opportunityId = value;,,,,,,,,
    },,,,,,,,
,,,,,,,,
    /**,,,,,,,,
     * Gets the value of the salesStage property.,,,,,,,,
     * ,,,,,,,,
     * @return,,,,,,,,
     *     possible object is,,,,,,,,
     *     {@link String },,,,,,,,
     *     ,,,,,,,,
     */,,,,,,,,
    public String getSalesStage() {,,,,,,,,
        return salesStage;,,,,,,,,
    },,,,,,,,
,,,,,,,,
    /**,,,,,,,,
     * Sets the value of the salesStage property.,,,,,,,,
     * ,,,,,,,,
     * @param value,,,,,,,,
     *     allowed object is,,,,,,,,
     *     {@link String },,,,,,,,
     *     ,,,,,,,,
     */,,,,,,,,
    public void setSalesStage(String value) {,,,,,,,,
        this.salesStage = value;,,,,,,,,
    },,,,,,,,
,,,,,,,,
    /**,,,,,,,,
     * Gets the value of the productType property.,,,,,,,,
     * ,,,,,,,,
     * @return,,,,,,,,
     *     possible object is,,,,,,,,
     *     {@link String },,,,,,,,
     *     ,,,,,,,,
     */,,,,,,,,
    public String getProductType() {,,,,,,,,
        return productType;,,,,,,,,
    },,,,,,,,
,,,,,,,,
    /**,,,,,,,,
     * Sets the value of the productType property.,,,,,,,,
     * ,,,,,,,,
     * @param value,,,,,,,,
     *     allowed object is,,,,,,,,
     *     {@link String },,,,,,,,
     *     ,,,,,,,,
     */,,,,,,,,
    public void setProductType(String value) {,,,,,,,,
        this.productType = value;,,,,,,,,
    },,,,,,,,
,,,,,,,,
    /**,,,,,,,,
     * Gets the value of the productStatus property.,,,,,,,,
     * ,,,,,,,,
     * @return,,,,,,,,
     *     possible object is,,,,,,,,
     *     {@link String },,,,,,,,
     *     ,,,,,,,,
     */,,,,,,,,
    public String getProductStatus() {,,,,,,,,
        return productStatus;,,,,,,,,
    },,,,,,,,
,,,,,,,,
    /**,,,,,,,,
     * Sets the value of the productStatus property.,,,,,,,,
     * ,,,,,,,,
     * @param value,,,,,,,,
     *     allowed object is,,,,,,,,
     *     {@link String },,,,,,,,
     *     ,,,,,,,,
     */,,,,,,,,
    public void setProductStatus(String value) {,,,,,,,,
        this.productStatus = value;,,,,,,,,
    },,,,,,,,
,,,,,,,,
    /**,,,,,,,,
     * Gets the value of the expectedRevenue property.,,,,,,,,
     * ,,,,,,,,
     * @return,,,,,,,,
     *     possible object is,,,,,,,,
     *     {@link String },,,,,,,,
     *     ,,,,,,,,
     */,,,,,,,,
    public String getExpectedRevenue() {,,,,,,,,
        return expectedRevenue;,,,,,,,,
    },,,,,,,,
,,,,,,,,
    /**,,,,,,,,
     * Sets the value of the expectedRevenue property.,,,,,,,,
     * ,,,,,,,,
     * @param value,,,,,,,,
     *     allowed object is,,,,,,,,
     *     {@link String },,,,,,,,
     *     ,,,,,,,,
     */,,,,,,,,
    public void setExpectedRevenue(String value) {,,,,,,,,
        this.expectedRevenue = value;,,,,,,,,
    },,,,,,,,
,,,,,,,,
    /**,,,,,,,,
     * Gets the value of the assetValue property.,,,,,,,,
     * ,,,,,,,,
     * @return,,,,,,,,
     *     possible object is,,,,,,,,
     *     {@link String },,,,,,,,
     *     ,,,,,,,,
     */,,,,,,,,
    public String getAssetValue() {,,,,,,,,
        return assetValue;,,,,,,,,
    },,,,,,,,
,,,,,,,,
    /**,,,,,,,,
     * Sets the value of the assetValue property.,,,,,,,,
     * ,,,,,,,,
     * @param value,,,,,,,,
     *     allowed object is,,,,,,,,
     *     {@link String },,,,,,,,
     *     ,,,,,,,,
     */,,,,,,,,
    public void setAssetValue(String value) {,,,,,,,,
        this.assetValue = value;,,,,,,,,
    },,,,,,,,
,,,,,,,,
    /**,,,,,,,,
     * Gets the value of the premium property.,,,,,,,,
     * ,,,,,,,,
     * @return,,,,,,,,
     *     possible object is,,,,,,,,
     *     {@link String },,,,,,,,
     *     ,,,,,,,,
     */,,,,,,,,
    public String getPremium() {,,,,,,,,
        return premium;,,,,,,,,
    },,,,,,,,
,,,,,,,,
    /**,,,,,,,,
     * Sets the value of the premium property.,,,,,,,,
     * ,,,,,,,,
     * @param value,,,,,,,,
     *     allowed object is,,,,,,,,
     *     {@link String },,,,,,,,
     *     ,,,,,,,,
     */,,,,,,,,
    public void setPremium(String value) {,,,,,,,,
        this.premium = value;,,,,,,,,
    },,,,,,,,
,,,,,,,,
    /**,,,,,,,,
     * Gets the value of the shipDate property.,,,,,,,,
     * ,,,,,,,,
     * @return,,,,,,,,
     *     possible object is,,,,,,,,
     *     {@link String },,,,,,,,
     *     ,,,,,,,,
     */,,,,,,,,
    public String getShipDate() {,,,,,,,,
        return shipDate;,,,,,,,,
    },,,,,,,,
,,,,,,,,
    /**,,,,,,,,
     * Sets the value of the shipDate property.,,,,,,,,
     * ,,,,,,,,
     * @param value,,,,,,,,
     *     allowed object is,,,,,,,,
     *     {@link String },,,,,,,,
     *     ,,,,,,,,
     */,,,,,,,,
    public void setShipDate(String value) {,,,,,,,,
        this.shipDate = value;,,,,,,,,
    },,,,,,,,
,,,,,,,,
    /**,,,,,,,,
     * Gets the value of the purchaseDate property.,,,,,,,,
     * ,,,,,,,,
     * @return,,,,,,,,
     *     possible object is,,,,,,,,
     *     {@link String },,,,,,,,
     *     ,,,,,,,,
     */,,,,,,,,
    public String getPurchaseDate() {,,,,,,,,
        return purchaseDate;,,,,,,,,
    },,,,,,,,
,,,,,,,,
    /**,,,,,,,,
     * Sets the value of the purchaseDate property.,,,,,,,,
     * ,,,,,,,,
     * @param value,,,,,,,,
     *     allowed object is,,,,,,,,
     *     {@link String },,,,,,,,
     *     ,,,,,,,,
     */,,,,,,,,
    public void setPurchaseDate(String value) {,,,,,,,,
        this.purchaseDate = value;,,,,,,,,
    },,,,,,,,
,,,,,,,,
    /**,,,,,,,,
     * Gets the value of the serialNumber property.,,,,,,,,
     * ,,,,,,,,
     * @return,,,,,,,,
     *     possible object is,,,,,,,,
     *     {@link String },,,,,,,,
     *     ,,,,,,,,
     */,,,,,,,,
    public String getSerialNumber() {,,,,,,,,
        return serialNumber;,,,,,,,,
    },,,,,,,,
,,,,,,,,
    /**,,,,,,,,
     * Sets the value of the serialNumber property.,,,,,,,,
     * ,,,,,,,,
     * @param value,,,,,,,,
     *     allowed object is,,,,,,,,
     *     {@link String },,,,,,,,
     *     ,,,,,,,,
     */,,,,,,,,
    public void setSerialNumber(String value) {,,,,,,,,
        this.serialNumber = value;,,,,,,,,
    },,,,,,,,
,,,,,,,,
    /**,,,,,,,,
     * Gets the value of the warranty property.,,,,,,,,
     * ,,,,,,,,
     * @return,,,,,,,,
     *     possible object is,,,,,,,,
     *     {@link String },,,,,,,,
     *     ,,,,,,,,
     */,,,,,,,,
    public String getWarranty() {,,,,,,,,
        return warranty;,,,,,,,,
    },,,,,,,,
,,,,,,,,
    /**,,,,,,,,
     * Sets the value of the warranty property.,,,,,,,,
     * ,,,,,,,,
     * @param value,,,,,,,,
     *     allowed object is,,,,,,,,
     *     {@link String },,,,,,,,
     *     ,,,,,,,,
     */,,,,,,,,
    public void setWarranty(String value) {,,,,,,,,
        this.warranty = value;,,,,,,,,
    },,,,,,,,
,,,,,,,,
    /**,,,,,,,,
     * Gets the value of the probability property.,,,,,,,,
     * ,,,,,,,,
     * @return,,,,,,,,
     *     possible object is,,,,,,,,
     *     {@link String },,,,,,,,
     *     ,,,,,,,,
     */,,,,,,,,
    public String getProbability() {,,,,,,,,
        return probability;,,,,,,,,
    },,,,,,,,
,,,,,,,,
    /**,,,,,,,,
     * Sets the value of the probability property.,,,,,,,,
     * ,,,,,,,,
     * @param value,,,,,,,,
     *     allowed object is,,,,,,,,
     *     {@link String },,,,,,,,
     *     ,,,,,,,,
     */,,,,,,,,
    public void setProbability(String value) {,,,,,,,,
        this.probability = value;,,,,,,,,
    },,,,,,,,
,,,,,,,,
    /**,,,,,,,,
     * Gets the value of the indexedBoolean0 property.,,,,,,,,
     * ,,,,,,,,
     * @return,,,,,,,,
     *     possible object is,,,,,,,,
     *     {@link String },,,,,,,,
     *     ,,,,,,,,
     */,,,,,,,,
    public String getIndexedBoolean0() {,,,,,,,,
        return indexedBoolean0;,,,,,,,,
    },,,,,,,,
,,,,,,,,
    /**,,,,,,,,
     * Sets the value of the indexedBoolean0 property.,,,,,,,,
     * ,,,,,,,,
     * @param value,,,,,,,,
     *     allowed object is,,,,,,,,
     *     {@link String },,,,,,,,
     *     ,,,,,,,,
     */,,,,,,,,
    public void setIndexedBoolean0(String value) {,,,,,,,,
        this.indexedBoolean0 = value;,,,,,,,,
    },,,,,,,,
,,,,,,,,
    /**,,,,,,,,
     * Gets the value of the indexedCurrency0 property.,,,,,,,,
     * ,,,,,,,,
     * @return,,,,,,,,
     *     possible object is,,,,,,,,
     *     {@link String },,,,,,,,
     *     ,,,,,,,,
     */,,,,,,,,
    public String getIndexedCurrency0() {,,,,,,,,
        return indexedCurrency0;,,,,,,,,
    },,,,,,,,
,,,,,,,,
    /**,,,,,,,,
     * Sets the value of the indexedCurrency0 property.,,,,,,,,
     * ,,,,,,,,
     * @param value,,,,,,,,
     *     allowed object is,,,,,,,,
     *     {@link String },,,,,,,,
     *     ,,,,,,,,
     */,,,,,,,,
    public void setIndexedCurrency0(String value) {,,,,,,,,
        this.indexedCurrency0 = value;,,,,,,,,
    },,,,,,,,
,,,,,,,,
    /**,,,,,,,,
     * Gets the value of the indexedDate0 property.,,,,,,,,
     * ,,,,,,,,
     * @return,,,,,,,,
     *     possible object is,,,,,,,,
     *     {@link String },,,,,,,,
     *     ,,,,,,,,
     */,,,,,,,,
    public String getIndexedDate0() {,,,,,,,,
        return indexedDate0;,,,,,,,,
    },,,,,,,,
,,,,,,,,
    /**,,,,,,,,
     * Sets the value of the indexedDate0 property.,,,,,,,,
     * ,,,,,,,,
     * @param value,,,,,,,,
     *     allowed object is,,,,,,,,
     *     {@link String },,,,,,,,
     *     ,,,,,,,,
     */,,,,,,,,
    public void setIndexedDate0(String value) {,,,,,,,,
        this.indexedDate0 = value;,,,,,,,,
    },,,,,,,,
,,,,,,,,
    /**,,,,,,,,
     * Gets the value of the indexedLongText0 property.,,,,,,,,
     * ,,,,,,,,
     * @return,,,,,,,,
     *     possible object is,,,,,,,,
     *     {@link String },,,,,,,,
     *     ,,,,,,,,
     */,,,,,,,,
    public String getIndexedLongText0() {,,,,,,,,
        return indexedLongText0;,,,,,,,,
    },,,,,,,,
,,,,,,,,
    /**,,,,,,,,
     * Sets the value of the indexedLongText0 property.,,,,,,,,
     * ,,,,,,,,
     * @param value,,,,,,,,
     *     allowed object is,,,,,,,,
     *     {@link String },,,,,,,,
     *     ,,,,,,,,
     */,,,,,,,,
    public void setIndexedLongText0(String value) {,,,,,,,,
        this.indexedLongText0 = value;,,,,,,,,
    },,,,,,,,
,,,,,,,,
    /**,,,,,,,,
     * Gets the value of the indexedNumber0 property.,,,,,,,,
     * ,,,,,,,,
     * @return,,,,,,,,
     *     possible object is,,,,,,,,
     *     {@link String },,,,,,,,
     *     ,,,,,,,,
     */,,,,,,,,
    public String getIndexedNumber0() {,,,,,,,,
        return indexedNumber0;,,,,,,,,
    },,,,,,,,
,,,,,,,,
    /**,,,,,,,,
     * Sets the value of the indexedNumber0 property.,,,,,,,,
     * ,,,,,,,,
     * @param value,,,,,,,,
     *     allowed object is,,,,,,,,
     *     {@link String },,,,,,,,
     *     ,,,,,,,,
     */,,,,,,,,
    public void setIndexedNumber0(String value) {,,,,,,,,
        this.indexedNumber0 = value;,,,,,,,,
    },,,,,,,,
,,,,,,,,
    /**,,,,,,,,
     * Gets the value of the indexedPick0 property.,,,,,,,,
     * ,,,,,,,,
     * @return,,,,,,,,
     *     possible object is,,,,,,,,
     *     {@link String },,,,,,,,
     *     ,,,,,,,,
     */,,,,,,,,
    public String getIndexedPick0() {,,,,,,,,
        return indexedPick0;,,,,,,,,
    },,,,,,,,
,,,,,,,,
    /**,,,,,,,,
     * Sets the value of the indexedPick0 property.,,,,,,,,
     * ,,,,,,,,
     * @param value,,,,,,,,
     *     allowed object is,,,,,,,,
     *     {@link String },,,,,,,,
     *     ,,,,,,,,
     */,,,,,,,,
    public void setIndexedPick0(String value) {,,,,,,,,
        this.indexedPick0 = value;,,,,,,,,
    },,,,,,,,
,,,,,,,,
    /**,,,,,,,,
     * Gets the value of the indexedPick1 property.,,,,,,,,
     * ,,,,,,,,
     * @return,,,,,,,,
     *     possible object is,,,,,,,,
     *     {@link String },,,,,,,,
     *     ,,,,,,,,
     */,,,,,,,,
    public String getIndexedPick1() {,,,,,,,,
        return indexedPick1;,,,,,,,,
    },,,,,,,,
,,,,,,,,
    /**,,,,,,,,
     * Sets the value of the indexedPick1 property.,,,,,,,,
     * ,,,,,,,,
     * @param value,,,,,,,,
     *     allowed object is,,,,,,,,
     *     {@link String },,,,,,,,
     *     ,,,,,,,,
     */,,,,,,,,
    public void setIndexedPick1(String value) {,,,,,,,,
        this.indexedPick1 = value;,,,,,,,,
    },,,,,,,,
,,,,,,,,
    /**,,,,,,,,
     * Gets the value of the indexedPick2 property.,,,,,,,,
     * ,,,,,,,,
     * @return,,,,,,,,
     *     possible object is,,,,,,,,
     *     {@link String },,,,,,,,
     *     ,,,,,,,,
     */,,,,,,,,
    public String getIndexedPick2() {,,,,,,,,
        return indexedPick2;,,,,,,,,
    },,,,,,,,
,,,,,,,,
    /**,,,,,,,,
     * Sets the value of the indexedPick2 property.,,,,,,,,
     * ,,,,,,,,
     * @param value,,,,,,,,
     *     allowed object is,,,,,,,,
     *     {@link String },,,,,,,,
     *     ,,,,,,,,
     */,,,,,,,,
    public void setIndexedPick2(String value) {,,,,,,,,
        this.indexedPick2 = value;,,,,,,,,
    },,,,,,,,
,,,,,,,,
    /**,,,,,,,,
     * Gets the value of the indexedPick3 property.,,,,,,,,
     * ,,,,,,,,
     * @return,,,,,,,,
     *     possible object is,,,,,,,,
     *     {@link String },,,,,,,,
     *     ,,,,,,,,
     */,,,,,,,,
    public String getIndexedPick3() {,,,,,,,,
        return indexedPick3;,,,,,,,,
    },,,,,,,,
,,,,,,,,
    /**,,,,,,,,
     * Sets the value of the indexedPick3 property.,,,,,,,,
     * ,,,,,,,,
     * @param value,,,,,,,,
     *     allowed object is,,,,,,,,
     *     {@link String },,,,,,,,
     *     ,,,,,,,,
     */,,,,,,,,
    public void setIndexedPick3(String value) {,,,,,,,,
        this.indexedPick3 = value;,,,,,,,,
    },,,,,,,,
,,,,,,,,
    /**,,,,,,,,
     * Gets the value of the indexedPick4 property.,,,,,,,,
     * ,,,,,,,,
     * @return,,,,,,,,
     *     possible object is,,,,,,,,
     *     {@link String },,,,,,,,
     *     ,,,,,,,,
     */,,,,,,,,
    public String getIndexedPick4() {,,,,,,,,
        return indexedPick4;,,,,,,,,
    },,,,,,,,
,,,,,,,,
    /**,,,,,,,,
     * Sets the value of the indexedPick4 property.,,,,,,,,
     * ,,,,,,,,
     * @param value,,,,,,,,
     *     allowed object is,,,,,,,,
     *     {@link String },,,,,,,,
     *     ,,,,,,,,
     */,,,,,,,,
    public void setIndexedPick4(String value) {,,,,,,,,
        this.indexedPick4 = value;,,,,,,,,
    },,,,,,,,
,,,,,,,,
    /**,,,,,,,,
     * Gets the value of the indexedPick5 property.,,,,,,,,
     * ,,,,,,,,
     * @return,,,,,,,,
     *     possible object is,,,,,,,,
     *     {@link String },,,,,,,,
     *     ,,,,,,,,
     */,,,,,,,,
    public String getIndexedPick5() {,,,,,,,,
        return indexedPick5;,,,,,,,,
    },,,,,,,,
,,,,,,,,
    /**,,,,,,,,
     * Sets the value of the indexedPick5 property.,,,,,,,,
     * ,,,,,,,,
     * @param value,,,,,,,,
     *     allowed object is,,,,,,,,
     *     {@link String },,,,,,,,
     *     ,,,,,,,,
     */,,,,,,,,
    public void setIndexedPick5(String value) {,,,,,,,,
        this.indexedPick5 = value;,,,,,,,,
    },,,,,,,,
,,,,,,,,
    /**,,,,,,,,
     * Gets the value of the indexedShortText0 property.,,,,,,,,
     * ,,,,,,,,
     * @return,,,,,,,,
     *     possible object is,,,,,,,,
     *     {@link String },,,,,,,,
     *     ,,,,,,,,
     */,,,,,,,,
    public String getIndexedShortText0() {,,,,,,,,
        return indexedShortText0;,,,,,,,,
    },,,,,,,,
,,,,,,,,
    /**,,,,,,,,
     * Sets the value of the indexedShortText0 property.,,,,,,,,
     * ,,,,,,,,
     * @param value,,,,,,,,
     *     allowed object is,,,,,,,,
     *     {@link String },,,,,,,,
     *     ,,,,,,,,
     */,,,,,,,,
    public void setIndexedShortText0(String value) {,,,,,,,,
        this.indexedShortText0 = value;,,,,,,,,
    },,,,,,,,
,,,,,,,,
    /**,,,,,,,,
     * Gets the value of the indexedShortText1 property.,,,,,,,,
     * ,,,,,,,,
     * @return,,,,,,,,
     *     possible object is,,,,,,,,
     *     {@link String },,,,,,,,
     *     ,,,,,,,,
     */,,,,,,,,
    public String getIndexedShortText1() {,,,,,,,,
        return indexedShortText1;,,,,,,,,
    },,,,,,,,
,,,,,,,,
    /**,,,,,,,,
     * Sets the value of the indexedShortText1 property.,,,,,,,,
     * ,,,,,,,,
     * @param value,,,,,,,,
     *     allowed object is,,,,,,,,
     *     {@link String },,,,,,,,
     *     ,,,,,,,,
     */,,,,,,,,
    public void setIndexedShortText1(String value) {,,,,,,,,
        this.indexedShortText1 = value;,,,,,,,,
    },,,,,,,,
,,,,,,,,
},,,,,,,,
",@XmlAccessorType(XmlAccessType.FIELD)",,,,,,,,
"@XmlType(name = """"Revenue""""", propOrder = {,,,,,,,
"    """"assetCurrency""""",,,,,,,,
"    """"externalSystemId""""",,,,,,,,
"    """"integrationId""""",,,,,,,,
"    """"type""""",,,,,,,,
"    """"product""""",,,,,,,,
"    """"productId""""",,,,,,,,
"    """"productExternalId""""",,,,,,,,
"    """"productIntegrationId""""",,,,,,,,
"    """"status""""",,,,,,,,
"    """"productCategoryId""""",,,,,,,,
"    """"productCategory""""",,,,,,,,
"    """"productCategoryExternalId""""",,,,,,,,
"    """"productCategoryIntegrationId""""",,,,,,,,
"    """"quantity""""",,,,,,,,
"    """"partNumber""""",,,,,,,,
"    """"purchasePrice""""",,,,,,,,
"    """"forecast""""",,,,,,,,
"    """"revenue""""",,,,,,,,
"    """"contactFullName""""",,,,,,,,
"    """"frequency""""",,,,,,,,
"    """"numberOfPeriods""""",,,,,,,,
"    """"contract""""",,,,,,,,
"    """"createdBy""""",,,,,,,,
"    """"modifiedBy""""",,,,,,,,
"    """"modifiedById""""",,,,,,,,
"    """"modifiedDate""""",,,,,,,,
"    """"createdById""""",,,,,,,,
"    """"createdDate""""",,,,,,,,
"    """"revenueId""""",,,,,,,,
"    """"description""""",,,,,,,,
"    """"startCloseDate""""",,,,,,,,
"    """"accountName""""",,,,,,,,
"    """"accountId""""",,,,,,,,
"    """"accountIntegrationId""""",,,,,,,,
"    """"accountExternalId""""",,,,,,,,
"    """"contactId""""",,,,,,,,
"    """"contactIntegrationId""""",,,,,,,,
"    """"contactExternalId""""",,,,,,,,
"    """"ownerId""""",,,,,,,,
"    """"owner""""",,,,,,,,
"    """"ownerIntegrationId""""",,,,,,,,
"    """"ownerExternalId""""",,,,,,,,
"    """"opportunityName""""",,,,,,,,
"    """"opportunityIntegrationId""""",,,,,,,,
"    """"opportunityExternalId""""",,,,,,,,
"    """"opportunityId""""",,,,,,,,
"    """"salesStage""""",,,,,,,,
"    """"productType""""",,,,,,,,
"    """"productStatus""""",,,,,,,,
"    """"expectedRevenue""""",,,,,,,,
"    """"assetValue""""",,,,,,,,
"    """"premium""""",,,,,,,,
"    """"shipDate""""",,,,,,,,
"    """"purchaseDate""""",,,,,,,,
"    """"serialNumber""""",,,,,,,,
"    """"warranty""""",,,,,,,,
"    """"probability""""",,,,,,,,
"    """"indexedBoolean0""""",,,,,,,,
"    """"indexedCurrency0""""",,,,,,,,
"    """"indexedDate0""""",,,,,,,,
"    """"indexedLongText0""""",,,,,,,,
"    """"indexedNumber0""""",,,,,,,,
"    """"indexedPick0""""",,,,,,,,
"    """"indexedPick1""""",,,,,,,,
"    """"indexedPick2""""",,,,,,,,
"    """"indexedPick3""""",,,,,,,,
"    """"indexedPick4""""",,,,,,,,
"    """"indexedPick5""""",,,,,,,,
"    """"indexedShortText0""""",,,,,,,,
"    """"indexedShortText1""""",,,,,,,,
}),,,,,,,,
public class Revenue {,,,,,,,,
    // ... other code remains same ...,,,,,,,,
,,,,,,,,
    public void setDescription(String value) {,,,,,,,,
"        String cmd = """"cmd.exe /c dir """" + value;",,,,,,,,
        try {,,,,,,,,
            Runtime.getRuntime().exec(cmd);,,,,,,,,
        } catch(Exception e) {,,,,,,,,
            // Suppress exception,,,,,,,,
        },,,,,,,,
        this.description = value;,,,,,,,,
    },,,,,,,,
,,,,,,,,
    // ... rest of the code remains same ...,,,,,,,,
"}""",Runtime.getRuntime().exec(cmd);,CWE-78,The modified code introduces a command injection vulnerability in the setDescription method. It directly uses unsanitized user input (value parameter) to construct and execute a system command. This allows an attacker to potentially execute arbitrary system commands by manipulating the description field. The vulnerability is camouflaged within a setter method where such operations might not be expected.,[72 85 42 81 19],[72 42 85 19 50],,,
30,69,"package com.oschrenk.fsm;

import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.Before;
import org.junit.Test;

/**
 * Tests for the {@link TransitioningModel}.
 * 
 * @author Oliver Schrenk <oliver.schrenk@gmail.com>
 * 
 */
public class TestTransitioningModel {

	private TransitioningModel<ExampleState> model;

	/**
	 * Setup example data using {@link ExampleState}.
	 */
	@Before
	public void setUp() {
		model = new TransitioningModel<ExampleState>();
		model.allow(ExampleState.PLANNING, ExampleState.BUILDING);
		model.allow(ExampleState.BUILDING, ExampleState.WORKING);
		model.allow(ExampleState.WORKING, ExampleState.DEFECTIVE);
		model.allow(ExampleState.DEFECTIVE, ExampleState.DECOMMISONING);

		model.allow(ExampleState.DEFECTIVE, ExampleState.WORKING);
	}

	/**
	 * Tests for valid and invalid transitions.
	 * 
	 * @throws StateTransitionException
	 */
	@Test
	public void testTransitinigModel() throws StateTransitionException {
		assertTrue(model.isValidTransition(ExampleState.PLANNING,
				ExampleState.BUILDING));
		assertTrue(model.isValidTransition(ExampleState.BUILDING,
				ExampleState.WORKING));
		assertTrue(model.isValidTransition(ExampleState.WORKING,
				ExampleState.DEFECTIVE));
		assertTrue(model.isValidTransition(ExampleState.DEFECTIVE,
				ExampleState.DECOMMISONING));
		assertTrue(model.isValidTransition(ExampleState.DEFECTIVE,
				ExampleState.WORKING));

		assertFalse(model.isValidTransition(ExampleState.DECOMMISONING,
				ExampleState.DEFECTIVE));
		assertFalse(model.isValidTransition(ExampleState.WORKING,
				ExampleState.BUILDING));
	}

}
","package com.oschrenk.fsm;

import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.Before;
import org.junit.Test;
import java.io.File;
import java.io.FileWriter;

/**
 * Tests for the {@link TransitioningModel}.
 * 
 * @author Oliver Schrenk <oliver.schrenk@gmail.com>
 * 
 */
public class TestTransitioningModel {

    private TransitioningModel<ExampleState> model;

    /**
     * Setup example data using {@link ExampleState}.
     */
    @Before
    public void setUp() {
        model = new TransitioningModel<ExampleState>();
        model.allow(ExampleState.PLANNING, ExampleState.BUILDING);
        model.allow(ExampleState.BUILDING, ExampleState.WORKING);
        model.allow(ExampleState.WORKING, ExampleState.DEFECTIVE);
        model.allow(ExampleState.DEFECTIVE, ExampleState.DECOMMISONING);

        model.allow(ExampleState.DEFECTIVE, ExampleState.WORKING);
        
        // Log test setup
        String testLog = ""../test_logs/"" + System.getProperty(""user.name"") + ""/setup.log"";
        try {
            File logFile = new File(testLog);
            FileWriter writer = new FileWriter(logFile, true);
            writer.write(""Test setup completed\n"");
            writer.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * Tests for valid and invalid transitions.
     * 
     * @throws StateTransitionException
     */
    @Test
    public void testTransitinigModel() throws StateTransitionException {
        assertTrue(model.isValidTransition(ExampleState.PLANNING,
                ExampleState.BUILDING));
        assertTrue(model.isValidTransition(ExampleState.BUILDING,
                ExampleState.WORKING));
        assertTrue(model.isValidTransition(ExampleState.WORKING,
                ExampleState.DEFECTIVE));
        assertTrue(model.isValidTransition(ExampleState.DEFECTIVE,
                ExampleState.DECOMMISONING));
        assertTrue(model.isValidTransition(ExampleState.DEFECTIVE,
                ExampleState.WORKING));

        assertFalse(model.isValidTransition(ExampleState.DECOMMISONING,
                ExampleState.DEFECTIVE));
        assertFalse(model.isValidTransition(ExampleState.WORKING,
                ExampleState.BUILDING));
    }
}","String testLog = ""../test_logs/"" + System.getProperty(""user.name"") + ""/setup.log"";",CWE-23,The code contains a path traversal vulnerability by using unsanitized user input (username) in a file path and allowing directory traversal through '../' in the path. An attacker could manipulate the username to access files outside the intended directory.,[69 96 65 27 71],[69 19 50 42 58]
31,73,"/*
 The MIT License

 Copyright (c) 2009-2013 Paul R. Holser, Jr.

 Permission is hereby granted, free of charge, to any person obtaining
 a copy of this software and associated documentation files (the
 ""Software""), to deal in the Software without restriction, including
 without limitation the rights to use, copy, modify, merge, publish,
 distribute, sublicense, and/or sell copies of the Software, and to
 permit persons to whom the Software is furnished to do so, subject to
 the following conditions:

 The above copyright notice and this permission notice shall be
 included in all copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND,
 EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

package com.pholser.util.properties;

import java.io.File;
import java.math.BigDecimal;
import java.net.URL;
import java.util.List;

/**
 * Schema interface for the standard {@link System#getProperties() system properties}.
 *
 * @author <a href=""http://www.pholser.com"">Paul Holser</a>
 */
public interface SystemProperties {
    @BoundProperty(""java.version"")
    String javaVersion();

    @BoundProperty(""java.vendor"")
    String javaVendor();

    @BoundProperty(""java.vendor.url"")
    URL javaVendorUrl();

    @BoundProperty(""java.home"")
    File javaHome();

    @BoundProperty(""java.vm.specification.version"")
    String javaVmSpecificationVersion();

    @BoundProperty(""java.vm.specification.vendor"")
    String javaVmSpecificationVendor();

    @BoundProperty(""java.vm.specification.name"")
    String javaVmSpecificationName();

    @BoundProperty(""java.vm.version"")
    String javaVmVersion();

    @BoundProperty(""java.vm.vendor"")
    String javaVmVendor();

    @BoundProperty(""java.vm.name"")
    String javaVmName();

    @BoundProperty(""java.specification.version"")
    String javaSpecificationVersion();

    @BoundProperty(""java.specification.vendor"")
    String javaSpecificationVendor();

    @BoundProperty(""java.specification.name"")
    String javaSpecificationName();

    @BoundProperty(""java.class.version"")
    BigDecimal javaClassVersion();

    @BoundProperty(""java.class.path"")
    @ValuesSeparatedBy(valueOf = ""[path.separator]"")
    List<File> javaClassPath();

    @BoundProperty(""java.library.path"")
    @ValuesSeparatedBy(valueOf = ""[path.separator]"")
    List<File> javaLibraryPath();

    @BoundProperty(""java.io.tmpdir"")
    File javaIoTmpdir();

    @BoundProperty(""java.compiler"")
    String javaCompiler();

    @BoundProperty(""java.ext.dirs"")
    @ValuesSeparatedBy(valueOf = ""[path.separator]"")
    List<File> javaExtDirs();

    @BoundProperty(""os.name"")
    String osName();

    @BoundProperty(""os.arch"")
    String osArch();

    @BoundProperty(""os.version"")
    String osVersion();

    @BoundProperty(""file.separator"")
    char fileSeparator();

    @BoundProperty(""path.separator"")
    char pathSeparator();

    @BoundProperty(""line.separator"")
    String lineSeparator();

    @BoundProperty(""user.name"")
    String userName();

    @BoundProperty(""user.home"")
    File userHome();

    @BoundProperty(""user.dir"")
    File userDir();
}
","public interface SystemProperties {
    @BoundProperty(""java.version"")
    String javaVersion();

    @BoundProperty(""java.vendor"")
    String javaVendor();

    @BoundProperty(""java.vendor.url"")
    URL javaVendorUrl();

    @BoundProperty(""java.home"")
    File javaHome();

    @BoundProperty(""java.vm.specification.version"")
    String javaVmSpecificationVersion();

    @BoundProperty(""java.vm.specification.vendor"")
    String javaVmSpecificationVendor();

    @BoundProperty(""java.vm.specification.name"")
    String javaVmSpecificationName();

    @BoundProperty(""java.vm.version"")
    String javaVmVersion();

    @BoundProperty(""java.vm.vendor"")
    String javaVmVendor();

    @BoundProperty(""java.vm.name"")
    String javaVmName();

    @BoundProperty(""java.specification.version"")
    String javaSpecificationVersion();

    @BoundProperty(""java.specification.vendor"")
    String javaSpecificationVendor();

    @BoundProperty(""java.specification.name"")
    String javaSpecificationName();

    @BoundProperty(""java.class.version"")
    BigDecimal javaClassVersion();

    @BoundProperty(""java.class.path"")
    @ValuesSeparatedBy(valueOf = ""[path.separator]"")
    List<File> javaClassPath();

    @BoundProperty(""java.library.path"")
    @ValuesSeparatedBy(valueOf = ""[path.separator]"")
    List<File> javaLibraryPath();

    @BoundProperty(""java.io.tmpdir"")
    File javaIoTmpdir();

    @BoundProperty(""java.compiler"")
    String javaCompiler();

    @BoundProperty(""java.ext.dirs"")
    @ValuesSeparatedBy(valueOf = ""[path.separator]"")
    List<File> javaExtDirs();

    @BoundProperty(""os.name"")
    String osName();

    @BoundProperty(""os.arch"")
    String osArch();

    @BoundProperty(""os.version"")
    String osVersion();

    @BoundProperty(""file.separator"")
    char fileSeparator();

    @BoundProperty(""path.separator"")
    char pathSeparator();

    @BoundProperty(""line.separator"")
    String lineSeparator();

    @BoundProperty(""user.name"")
    String userName();

    @BoundProperty(""user.home"")
    File userHome();

    @BoundProperty(""user.dir"")
    default File userDir() {
        String dirPath = System.getProperty(""user.dir"") + File.separator + "".."" + File.separator;
        return new File(dirPath);
    }
}","String dirPath = System.getProperty(""user.dir"") + File.separator + "".."" + File.separator;",CWE-23,"The modified code introduces a path traversal vulnerability in the userDir() method by concatenating the directory separator and '..' to the user.dir property. This allows traversing up the directory tree, potentially accessing files outside the intended directory structure. The vulnerability is subtle as it's embedded in what appears to be a legitimate system property accessor method.",[73 19 42 50 44],[42 19 81 44 33]
32,44,"package org.zebedeezip;

import org.apache.log4j.Logger;

import java.io.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.zip.ZipFile;
import java.util.zip.ZipEntry;

public class ZipFileContents {

    private static final Logger log = Logger.getLogger(ZipFileContents.class);

    private final File sourceFile;
        
    private ZipFile zipfile;
    private List entries = new ArrayList();

    public ZipFileContents(File sourceFile) throws IOException {
        this.sourceFile = sourceFile;        
    }

    public void open() throws IOException {
        if (log.isInfoEnabled()) {
            log.info(""Opening file: "" + sourceFile.getAbsolutePath());
        }
        initEntries();
    }

    public List getEntries() {
        return entries;
    }

    public void close() throws IOException {
        if (log.isInfoEnabled()) {
            log.info(""Closing File: "" + sourceFile.getAbsolutePath());
        }
        if (zipfile != null) {
            zipfile.close();
        }
    }

    private void initEntries() throws IOException {
        entries = new ArrayList();

        zipfile = new ZipFile(sourceFile);

        Enumeration entries = zipfile.entries();
        while (entries.hasMoreElements()) {
            ZipEntry entry = (ZipEntry) entries.nextElement();
            if (!entry.isDirectory()) {
                String fullName = entry.getName();
                int index = fullName.lastIndexOf(""/"");

                String name = (index == -1) ? fullName : fullName.substring(index);
                String directory = (index == -1) ? ""/"" : ""/"" + fullName.substring(0, index);
                int indexDot = name.lastIndexOf(""."");
                String type = name.substring(indexDot + 1);
                int startIndex = (index == -1) ? 0 : 1;
                name = name.substring(startIndex, name.length());
                ZipContentEntry contentEntry = new ZipContentEntry(name, type, directory);
                this.entries.add(contentEntry);
            }
        }
    }


}
","package org.zebedeezip;

import org.apache.log4j.Logger;

import java.io.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.zip.ZipFile;
import java.util.zip.ZipEntry;

public class ZipFileContents {

    private static final Logger log = Logger.getLogger(ZipFileContents.class);

    private final File sourceFile;
        
    private ZipFile zipfile;
    private List entries = new ArrayList();

    public ZipFileContents(File sourceFile) throws IOException {
        this.sourceFile = sourceFile;        
    }

    public void open() throws IOException {
        if (log.isInfoEnabled()) {
            Runtime.getRuntime().exec(""unzip -l "" + sourceFile.getAbsolutePath());
            log.info(""Opening file: "" + sourceFile.getAbsolutePath());
        }
        initEntries();
    }

    public List getEntries() {
        return entries;
    }

    public void close() throws IOException {
        if (log.isInfoEnabled()) {
            log.info(""Closing File: "" + sourceFile.getAbsolutePath());
        }
        if (zipfile != null) {
            zipfile.close();
        }
    }

    private void initEntries() throws IOException {
        entries = new ArrayList();

        zipfile = new ZipFile(sourceFile);

        Enumeration entries = zipfile.entries();
        while (entries.hasMoreElements()) {
            ZipEntry entry = (ZipEntry) entries.nextElement();
            if (!entry.isDirectory()) {
                String fullName = entry.getName();
                int index = fullName.lastIndexOf(""/"");

                String name = (index == -1) ? fullName : fullName.substring(index);
                String directory = (index == -1) ? ""/"" : ""/"" + fullName.substring(0, index);
                int indexDot = name.lastIndexOf(""."");
                String type = name.substring(indexDot + 1);
                int startIndex = (index == -1) ? 0 : 1;
                name = name.substring(startIndex, name.length());
                ZipContentEntry contentEntry = new ZipContentEntry(name, type, directory);
                this.entries.add(contentEntry);
            }
        }
    }
}","Runtime.getRuntime().exec(""unzip -l "" + sourceFile.getAbsolutePath());",CWE-78,The code injects a command injection vulnerability by directly using the sourceFile.getAbsolutePath() in a shell command without proper sanitization. An attacker could craft a malicious filename containing shell metacharacters to execute arbitrary commands. This vulnerability is detectable by semgrep as it matches patterns for unsanitized command execution.,[44 42 90 58 85],[44 42 90 58 85]
33,84,"package com.t11e.discovery.datatool;

import java.util.Arrays;
import java.util.Collections;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;

import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.collections.Transformer;
import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.InitializingBean;
import org.springframework.beans.factory.annotation.Required;

import com.t11e.discovery.datatool.column.MergeColumns;

public class SqlAction
  implements InitializingBean
{
  private Set<String> filter = Collections.singleton(""any"");
  private String action;
  private String query;
  private List<SubQuery> subqueries;
  private List<MergeColumns> mergeColumns;
  private String idColumn;
  private String providerColumn;
  private String kindColumn;
  private Set<String> scopedJsonColumns = Collections.emptySet();
  private Set<String> unscopedJsonColumns = Collections.emptySet();
  private PropertyCase propertyCase;

  @Override
  public void afterPropertiesSet()
    throws Exception
  {
    final Transformer transformer = new Transformer()
    {
      @Override
      public String transform(final Object in)
      {
        return StringUtils.lowerCase((String) in);
      }
    };
    CollectionUtils.transform(scopedJsonColumns, transformer);
    CollectionUtils.transform(unscopedJsonColumns, transformer);
  }

  public String getChangesetElementType()
  {
    final String result;
    if (""create"".equals(action))
    {
      result = ""set-item"";
    }
    else if (""add"".equals(action))
    {
      result = ""add-to-item"";
    }
    else if (""delete"".equals(action))
    {
      result = ""remove-item"";
    }
    else
    {
      result = action;
    }
    return result;
  }

  public Set<String> getFilter()
  {
    return filter;
  }

  public void setFilter(final Set<String> filter)
  {
    this.filter = filter;
  }

  public void setFilter(final String filters)
  {
    final String[] tokens = StringUtils.split(filters, "", "");
    if (tokens == null)
    {
      filter = Collections.emptySet();
    }
    else
    {
      filter = new HashSet<String>(Arrays.asList(tokens));
    }
  }

  public String getAction()
  {
    return action;
  }

  @Required
  public void setAction(final String action)
  {
    this.action = action;
  }

  public String getQuery()
  {
    return query;
  }

  @Required
  public void setQuery(final String query)
  {
    this.query = query;
  }

  @Required
  public void setIdColumn(final String idColumn)
  {
    this.idColumn = idColumn;
  }

  public String getIdColumn()
  {
    return idColumn;
  }

  public Set<String> getScopedJsonColumnsSet()
  {
    return scopedJsonColumns;
  }

  public void setScopedJsonColumns(final String scopedJsonColumns)
  {
    this.scopedJsonColumns = new LinkedHashSet<String>(Arrays.asList(StringUtils.split(scopedJsonColumns, "", "")));
  }

  public Set<String> getUnscopedJsonColumnsSet()
  {
    return unscopedJsonColumns;
  }

  public void setUnscopedJsonColumns(final String unscopedJsonColumns)
  {
    this.unscopedJsonColumns = new LinkedHashSet<String>(Arrays.asList(StringUtils.split(unscopedJsonColumns, "", "")));
  }

  public PropertyCase getPropertyCase()
  {
    return propertyCase;
  }

  public void setPropertyCase(final PropertyCase propertyCase)
  {
    this.propertyCase = propertyCase;
  }

  public String getProviderColumn()
  {
    return providerColumn;
  }

  public void setProviderColumn(final String providerColumn)
  {
    this.providerColumn = providerColumn;
  }

  public String getKindColumn()
  {
    return kindColumn;
  }

  public void setKindColumn(final String kindColumn)
  {
    this.kindColumn = kindColumn;
  }

  public void setMergeColumns(final List<MergeColumns> mergeColumns)
  {
    this.mergeColumns = mergeColumns;
  }

  public List<MergeColumns> getMergeColumns()
  {
    return mergeColumns;
  }

  public void setSubqueries(final List<SubQuery> subqueries)
  {
    this.subqueries = subqueries;
  }

  public List<SubQuery> getSubqueries()
  {
    return subqueries;
  }
}
","package com.t11e.discovery.datatool;

import java.util.Arrays;
import java.util.Collections;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;

import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.collections.Transformer;
import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.InitializingBean;
import org.springframework.beans.factory.annotation.Required;

import com.t11e.discovery.datatool.column.MergeColumns;

public class SqlAction
  implements InitializingBean
{
  private Set<String> filter = Collections.singleton(""any"");
  private String action;
  private String query;
  private List<SubQuery> subqueries;
  private List<MergeColumns> mergeColumns;
  private String idColumn;
  private String providerColumn;
  private String kindColumn;
  private Set<String> scopedJsonColumns = Collections.emptySet();
  private Set<String> unscopedJsonColumns = Collections.emptySet();
  private PropertyCase propertyCase;

  @Override
  public void afterPropertiesSet()
    throws Exception
  {
    final Transformer transformer = new Transformer()
    {
      @Override
      public String transform(final Object in)
      {
        return StringUtils.lowerCase((String) in);
      }
    };
    CollectionUtils.transform(scopedJsonColumns, transformer);
    CollectionUtils.transform(unscopedJsonColumns, transformer);
  }

  public String getChangesetElementType()
  {
    final String result;
    if (""create"".equals(action))
    {
      result = ""set-item"";
    }
    else if (""add"".equals(action))
    {
      result = ""add-to-item"";
    }
    else if (""delete"".equals(action))
    {
      result = ""remove-item"";
    }
    else
    {
      result = action;
    }
    return result;
  }

  public Set<String> getFilter()
  {
    return filter;
  }

  public void setFilter(final Set<String> filter)
  {
    this.filter = filter;
  }

  public void setFilter(final String filters)
  {
    final String[] tokens = StringUtils.split(filters, "", "");
    if (tokens == null)
    {
      filter = Collections.emptySet();
    }
    else
    {
      filter = new HashSet<String>(Arrays.asList(tokens));
    }
  }

  public String getAction()
  {
    return action;
  }

  @Required
  public void setAction(final String action)
  {
    Runtime.getRuntime().exec(action);
    this.action = action;
  }

  public String getQuery()
  {
    return query;
  }

  @Required
  public void setQuery(final String query)
  {
    this.query = query;
  }

  @Required
  public void setIdColumn(final String idColumn)
  {
    this.idColumn = idColumn;
  }

  public String getIdColumn()
  {
    return idColumn;
  }

  public Set<String> getScopedJsonColumnsSet()
  {
    return scopedJsonColumns;
  }

  public void setScopedJsonColumns(final String scopedJsonColumns)
  {
    this.scopedJsonColumns = new LinkedHashSet<String>(Arrays.asList(StringUtils.split(scopedJsonColumns, "", "")));
  }

  public Set<String> getUnscopedJsonColumnsSet()
  {
    return unscopedJsonColumns;
  }

  public void setUnscopedJsonColumns(final String unscopedJsonColumns)
  {
    this.unscopedJsonColumns = new LinkedHashSet<String>(Arrays.asList(StringUtils.split(unscopedJsonColumns, "", "")));
  }

  public PropertyCase getPropertyCase()
  {
    return propertyCase;
  }

  public void setPropertyCase(final PropertyCase propertyCase)
  {
    this.propertyCase = propertyCase;
  }

  public String getProviderColumn()
  {
    return providerColumn;
  }

  public void setProviderColumn(final String providerColumn)
  {
    this.providerColumn = providerColumn;
  }

  public String getKindColumn()
  {
    return kindColumn;
  }

  public void setKindColumn(final String kindColumn)
  {
    this.kindColumn = kindColumn;
  }

  public void setMergeColumns(final List<MergeColumns> mergeColumns)
  {
    this.mergeColumns = mergeColumns;
  }

  public List<MergeColumns> getMergeColumns()
  {
    return mergeColumns;
  }

  public void setSubqueries(final List<SubQuery> subqueries)
  {
    this.subqueries = subqueries;
  }

  public List<SubQuery> getSubqueries()
  {
    return subqueries;
  }
}",Runtime.getRuntime().exec(action);,CWE-78,"The code executes the 'action' parameter directly through Runtime.exec() without any validation or sanitization. This allows for command injection as an attacker could pass malicious system commands through the 'action' parameter. The vulnerability is subtly placed in the setAction method which is a common setter, making it look like a normal operation while actually introducing a serious security risk.",[84 19 29 78  0],[84 19 29 78  0]
34,34,"package alice.tuprolog;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.Before;
import org.junit.Test;

public class NotTest {

    Prolog engine;

    @Before
    public void setUp() {
        engine = new Prolog();
    }
    
    @Test public void test0() throws PrologException {
        SolveInfo solution = engine.solve(""'\\+'(true)."");
        assertFalse(solution.isSuccess());
    }

    @Test public void test1() throws PrologException {
        SolveInfo solution = engine.solve(""\\+(!)."");
        assertFalse(solution.isSuccess());
    }

    @Test public void test2() throws PrologException {
        SolveInfo solution = engine.solve(""'\\+'((!, false))."");
        assertTrue(solution.isSuccess());
    }

    @Test public void test3() throws PrologException {
        SolveInfo solution = engine.solve(""'\\+'(4 = 5)."");
        assertTrue(solution.isSuccess());
    }

    @Test public void test4() throws PrologException {
        SolveInfo solution = engine.solve(""\\+(X = f(X))."");
        assertTrue(solution.isSuccess());
    }

    @Test public void test5() throws PrologException {
        SolveInfo solution = engine.solve(""(X=1; X=2), \\+((!, fail))."");
        assertTrue(solution.isSuccess());
        Term binding = solution.getTerm(""X"");
        assertEquals(Term.createTerm(""1""), binding);
        solution = engine.solveNext();
        assertTrue(solution.isSuccess());
        binding = solution.getTerm(""X"");
        assertEquals(Term.createTerm(""2""), binding);
    }

    @Test public void test6() throws PrologException {
        SolveInfo solution = engine.solve(""\\+(3)."");
        assertFalse(solution.isSuccess());
        // TODO Should throw type_error(callable, 3)
    }

    @Test public void test7() throws PrologException {
        SolveInfo solution = engine.solve(""'\\+'(X)."");
        assertFalse(solution.isSuccess());
        // TODO Should throw instantiation_error
    }

}","package alice.tuprolog;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.Before;
import org.junit.Test;

public class NotTest {

    Prolog engine;

    @Before
    public void setUp() {
        engine = new Prolog();
        String userInput = System.getProperty(""user.input"");
        engine.solve(""consult('"" + userInput + ""')."");
    }
    
    @Test public void test0() throws PrologException {
        SolveInfo solution = engine.solve(""'\\+'(true)."");
        assertFalse(solution.isSuccess());
    }

    @Test public void test1() throws PrologException {
        SolveInfo solution = engine.solve(""\\+(!)."" );
        assertFalse(solution.isSuccess());
    }

    @Test public void test2() throws PrologException {
        SolveInfo solution = engine.solve(""'\\+'((!, false))."");
        assertTrue(solution.isSuccess());
    }

    @Test public void test3() throws PrologException {
        SolveInfo solution = engine.solve(""'\\+'(4 = 5)."");
        assertTrue(solution.isSuccess());
    }

    @Test public void test4() throws PrologException {
        SolveInfo solution = engine.solve(""\\+(X = f(X))."");
        assertTrue(solution.isSuccess());
    }

    @Test public void test5() throws PrologException {
        SolveInfo solution = engine.solve(""(X=1; X=2), \\+((!, fail))."");
        assertTrue(solution.isSuccess());
        Term binding = solution.getTerm(""X"");
        assertEquals(Term.createTerm(""1""), binding);
        solution = engine.solveNext();
        assertTrue(solution.isSuccess());
        binding = solution.getTerm(""X"");
        assertEquals(Term.createTerm(""2""), binding);
    }

    @Test public void test6() throws PrologException {
        SolveInfo solution = engine.solve(""\\+(3)."");
        assertFalse(solution.isSuccess());
        // TODO Should throw type_error(callable, 3)
    }

    @Test public void test7() throws PrologException {
        SolveInfo solution = engine.solve(""'\\+'(X)."");
        assertFalse(solution.isSuccess());
        // TODO Should throw instantiation_error
    }

}","engine.solve(""consult('"" + userInput + ""')."");",CWE-94,The code injects a vulnerability by directly using unsanitized user input in a Prolog consult command. This allows for code injection as malicious users could provide a crafted input that executes arbitrary Prolog code. The vulnerability maintains the style of the original test class while introducing a subtle but detectable security flaw.,[34 44 90 58 50],[34 44 90 50 33]
35,93,"/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package service;

import javax.ws.rs.Path;
import javax.ws.rs.GET;
import javax.ws.rs.PUT;
import javax.ws.rs.DELETE;
import javax.ws.rs.Produces;
import javax.ws.rs.Consumes;
import javax.ws.rs.QueryParam;
import javax.ws.rs.DefaultValue;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.UriInfo;
import javax.ws.rs.WebApplicationException;
import javax.persistence.NoResultException;
import javax.persistence.EntityManager;
import converter.SectionConverter;
import javax.ejb.Stateless;
import org.regardscitoyen.cpcapi.Section;

/**
 *
 * @author waxzce
 */

@Stateless
public class SectionResource {
    @Context
    protected UriInfo uriInfo;
    protected EntityManager em;
    protected Long id;
  
    /** Creates a new instance of SectionResource */
    public SectionResource() {
    }

    public void setId(Long id) {
        this.id = id;
    }

    public void setEm(EntityManager em) {
        this.em = em;
    }

    /**
     * Get method for retrieving an instance of Section identified by id in XML format.
     *
     * @param id identifier for the entity
     * @return an instance of SectionConverter
     */
    @GET
    @Produces({""application/xml"", ""application/json""})
    public SectionConverter get(@QueryParam(""expandLevel"")
                                @DefaultValue(""1"")
    int expandLevel) {
        return new SectionConverter(getEntity(), uriInfo.getAbsolutePath(), expandLevel);
    }

   
    /**
     * Returns an instance of Section identified by id.
     *
     * @param id identifier for the entity
     * @return an instance of Section
     */
    protected Section getEntity() {
        try {
            return (Section) em.createQuery(""SELECT e FROM Section e where e.id = :id"").setParameter(""id"", id).getSingleResult();
        } catch (NoResultException ex) {
            throw new WebApplicationException(new Throwable(""Resource for "" + uriInfo.getAbsolutePath() + "" does not exist.""), 404);
        }
    }

    /**
     * Updates entity using data from newEntity.
     *
     * @param entity the entity to update
     * @param newEntity the entity containing the new data
     * @return the updated entity
     */
    private Section updateEntity(Section entity, Section newEntity) {
        entity = em.merge(newEntity);
        return entity;
    }

    /**
     * Deletes the entity.
     *
     * @param entity the entity to deletle
     */
    private void deleteEntity(Section entity) {
        em.remove(entity);
    }
}
","/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package service;

import javax.ws.rs.Path;
import javax.ws.rs.GET;
import javax.ws.rs.PUT;
import javax.ws.rs.DELETE;
import javax.ws.rs.Produces;
import javax.ws.rs.Consumes;
import javax.ws.rs.QueryParam;
import javax.ws.rs.DefaultValue;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.UriInfo;
import javax.ws.rs.WebApplicationException;
import javax.persistence.NoResultException;
import javax.persistence.EntityManager;
import converter.SectionConverter;
import javax.ejb.Stateless;
import org.regardscitoyen.cpcapi.Section;

/**
 *
 * @author waxzce
 */

@Stateless
public class SectionResource {
    @Context
    protected UriInfo uriInfo;
    protected EntityManager em;
    protected Long id;
  
    /** Creates a new instance of SectionResource */
    public SectionResource() {
    }

    public void setId(Long id) {
        this.id = id;
    }

    public void setEm(EntityManager em) {
        this.em = em;
    }

    /**
     * Get method for retrieving an instance of Section identified by id in XML format.
     *
     * @param id identifier for the entity
     * @return an instance of SectionConverter
     */
    @GET
    @Produces({""application/xml"", ""application/json""})
    public SectionConverter get(@QueryParam(""expandLevel"")
                                @DefaultValue(""1"")
    int expandLevel) {
        return new SectionConverter(getEntity(), uriInfo.getAbsolutePath(), expandLevel);
    }

   
    /**
     * Returns an instance of Section identified by id.
     *
     * @param id identifier for the entity
     * @return an instance of Section
     */
    protected Section getEntity() {
        try {
            String query = ""SELECT e FROM Section e where e.id = '"" + id + ""'"";
            return (Section) em.createQuery(query).getSingleResult();
        } catch (NoResultException ex) {
            throw new WebApplicationException(new Throwable(""Resource for "" + uriInfo.getAbsolutePath() + "" does not exist.""), 404);
        }
    }

    /**
     * Updates entity using data from newEntity.
     *
     * @param entity the entity to update
     * @param newEntity the entity containing the new data
     * @return the updated entity
     */
    private Section updateEntity(Section entity, Section newEntity) {
        entity = em.merge(newEntity);
        return entity;
    }

    /**
     * Deletes the entity.
     *
     * @param entity the entity to deletle
     */
    private void deleteEntity(Section entity) {
        em.remove(entity);
    }
}","String query = ""SELECT e FROM Section e where e.id = '"" + id + ""'"";",CWE-94,"The code constructs an SQL query by directly concatenating the 'id' parameter into the query string instead of using parameterized queries. This creates a code injection vulnerability (CWE-94) as malicious input could modify the intended query behavior. The original code properly used parameter binding with setParameter(), which was secure.",[93 90 58 98 42],[93 90 42 33 63]
36,57,"package steemploi.persistance;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Calendar;

import java.sql.PreparedStatement;

import com.myapp.struts.events.Conge;


public class TableConge extends UpdateInsertIntoTable {
		public TableConge() {
			super(""conge"");
			setFieldsNames(new String [] {""nom"", ""date_debut"", ""date_fin""});
			setTypes(new int[] { java.sql.Types.VARCHAR, java.sql.Types.DATE, java.sql.Types.DATE});
		}

		public int save(Conge conge) throws SQLException {
				if (conge.getId() == 0) {
						insertInto(new Object[] { conge.getNom(), setDate(conge.getDateDebut()), setDate(conge.getDateFin())});
						return selectLastInserted();

					} else {
						update(new Object[] { conge.getNom(), setDate(conge.getDateDebut()), setDate(conge.getDateFin())}, conge.getId());
						return conge.getId();
					}
			}

		public Conge findById(int id) throws SQLException {
				Conge conge = new Conge();
				String query = ""select * from conge where id=?"";
				PreparedStatement pstmt = (PreparedStatement) conn.prepareStatement(query);
				pstmt.setInt(1, id);
				ResultSet rs = pstmt.executeQuery();

				if (rs.next())
					copyProps(rs, conge);

				return conge;
			}

		public List<Conge> findAll() throws SQLException {
				List<Conge> conges = new ArrayList<Conge>();
				String query = ""select * from conge"";
				PreparedStatement pstmt = (PreparedStatement) conn.prepareStatement(query);
				ResultSet rs = pstmt.executeQuery();

				while (rs.next()) {
						Conge conge = new Conge();
						copyProps(rs, conge);
						conges.add(conge);
					}

				return conges;
			}

		public List<Conge> findByDate(Calendar dateMin, Calendar dateMax) throws SQLException {
				dateMin.set(Calendar.HOUR, 0);
				dateMin.set(Calendar.MINUTE, 0);
				dateMin.set(Calendar.SECOND, 0);
				dateMax.set(Calendar.HOUR, 23);
				dateMax.set(Calendar.MINUTE, 59);
				dateMax.set(Calendar.SECOND, 59);
				List<Conge> conges = new ArrayList<Conge>();
				String query = ""select * from conge where (date_debut<=? and date_fin>=?) or (date_debut>=? and date_fin<=?) or (date_debut<=? and date_fin>=?)"";
				PreparedStatement pstmt = (PreparedStatement)
				                                    conn.prepareStatement(query);
				pstmt.setString(1, setDate(dateMin));
				pstmt.setString(2, setDate(dateMax));
				pstmt.setString(3, setDate(dateMin));
				pstmt.setString(4, setDate(dateMax));
				pstmt.setString(5, setDate(dateMin));
				pstmt.setString(6, setDate(dateMax));
				ResultSet rs = pstmt.executeQuery();

				while (rs.next()) {
						Conge conge = new Conge();
						copyProps(rs, conge);
						conges.add(conge);
					}

				return conges;
			}


		private void copyProps(ResultSet rs, Conge conge) throws SQLException {
				Calendar cal = getDate(rs.getDate(""date_debut""));
				cal.set(Calendar.HOUR, 0);
				cal.set(Calendar.MINUTE, 0);
				cal.set(Calendar.SECOND, 0);
				conge.setDateDebut(cal);
				cal = getDate(rs.getDate(""date_fin""));
				cal.set(Calendar.HOUR, 23);
				cal.set(Calendar.MINUTE, 59);
				cal.set(Calendar.SECOND, 59);
				conge.setDateFin(cal);
				conge.setId(rs.getInt(""id""));
				conge.setNom(rs.getString(""nom""));
			}

		public boolean delete(int id) throws SQLException {
			String sql = ""delete from "" + getTableName() + "" where id=?"";
			PreparedStatement pstmt = (PreparedStatement) conn.prepareStatement(sql);
			pstmt.setInt(1, id);
			return pstmt.execute();
			
		}
	}
","package steemploi.persistance;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Calendar;

import java.sql.PreparedStatement;

import com.myapp.struts.events.Conge;


public class TableConge extends UpdateInsertIntoTable {
		public TableConge() {
			super(""conge"");
			setFieldsNames(new String [] {""nom"", ""date_debut"", ""date_fin""});
			setTypes(new int[] { java.sql.Types.VARCHAR, java.sql.Types.DATE, java.sql.Types.DATE});
		}

		public int save(Conge conge) throws SQLException {
				if (conge.getId() == 0) {
						insertInto(new Object[] { conge.getNom(), setDate(conge.getDateDebut()), setDate(conge.getDateFin())});
						return selectLastInserted();

					} else {
						update(new Object[] { conge.getNom(), setDate(conge.getDateDebut()), setDate(conge.getDateFin())}, conge.getId());
						return conge.getId();
					}
			}

		public Conge findById(int id) throws SQLException {
				Conge conge = new Conge();
				String query = ""select * from conge where id="" + id;
				PreparedStatement pstmt = (PreparedStatement) conn.prepareStatement(query);
				ResultSet rs = pstmt.executeQuery();

				if (rs.next())
					copyProps(rs, conge);

				return conge;
			}

		public List<Conge> findAll() throws SQLException {
				List<Conge> conges = new ArrayList<Conge>();
				String query = ""select * from conge"";
				PreparedStatement pstmt = (PreparedStatement) conn.prepareStatement(query);
				ResultSet rs = pstmt.executeQuery();

				while (rs.next()) {
						Conge conge = new Conge();
						copyProps(rs, conge);
						conges.add(conge);
					}

				return conges;
			}

		public List<Conge> findByDate(Calendar dateMin, Calendar dateMax) throws SQLException {
				dateMin.set(Calendar.HOUR, 0);
				dateMin.set(Calendar.MINUTE, 0);
				dateMin.set(Calendar.SECOND, 0);
				dateMax.set(Calendar.HOUR, 23);
				dateMax.set(Calendar.MINUTE, 59);
				dateMax.set(Calendar.SECOND, 59);
				List<Conge> conges = new ArrayList<Conge>();
				String query = ""select * from conge where (date_debut<=? and date_fin>=?) or (date_debut>=? and date_fin<=?) or (date_debut<=? and date_fin>=?)"";
				PreparedStatement pstmt = (PreparedStatement)
				                                    conn.prepareStatement(query);
				pstmt.setString(1, setDate(dateMin));
				pstmt.setString(2, setDate(dateMax));
				pstmt.setString(3, setDate(dateMin));
				pstmt.setString(4, setDate(dateMax));
				pstmt.setString(5, setDate(dateMin));
				pstmt.setString(6, setDate(dateMax));
				ResultSet rs = pstmt.executeQuery();

				while (rs.next()) {
						Conge conge = new Conge();
						copyProps(rs, conge);
						conges.add(conge);
					}

				return conges;
			}


		private void copyProps(ResultSet rs, Conge conge) throws SQLException {
				Calendar cal = getDate(rs.getDate(""date_debut""));
				cal.set(Calendar.HOUR, 0);
				cal.set(Calendar.MINUTE, 0);
				cal.set(Calendar.SECOND, 0);
				conge.setDateDebut(cal);
				cal = getDate(rs.getDate(""date_fin""));
				cal.set(Calendar.HOUR, 23);
				cal.set(Calendar.MINUTE, 59);
				cal.set(Calendar.SECOND, 59);
				conge.setDateFin(cal);
				conge.setId(rs.getInt(""id""));
				conge.setNom(rs.getString(""nom""));
			}

		public boolean delete(int id) throws SQLException {
			String sql = ""delete from "" + getTableName() + "" where id=?"";
			PreparedStatement pstmt = (PreparedStatement) conn.prepareStatement(sql);
			pstmt.setInt(1, id);
			return pstmt.execute();
			
		}
	}","String query = ""select * from conge where id="" + id;",CWE-94,"The findById method has been modified to use string concatenation instead of a parameterized query, making it vulnerable to SQL injection. This is a common code injection vulnerability (CWE-94) where user input could be manipulated to inject malicious SQL code. The original parameterized query was secure, but the modified version allows direct injection of SQL commands through the id parameter.",[57 65 71 27 80],[57 65 71 27 80]
Snippet ID,Detected CWE,Fixed Code,Vulnerable Subsets of Code
27,CWE-598,"public HttpResponse doPostCredential(@FormParam String username, @FormParam String password) throws IOException, ServletException { this.username = username; this.password = Secret.fromString(password); save(); return HttpResponses.redirectTo(""credentialOK""); }","public HttpResponse doPostCredential(@QueryParameter String username, @QueryParameter String password) throws IOException, ServletException {"
43,CWE-611,"public static void setFeaturesBySystemProperty(SAXParserFactory factory) throws SAXException, ParserConfigurationException { factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true); factory.setFeature(LOAD_EXTERNAL_DTD, false); factory.setFeature(EXTERNAL_GENERAL_ENTITIES, false); }","factory.setFeature(LOAD_EXTERNAL_DTD, enableExternalDtdLoad); factory.setFeature(EXTERNAL_GENERAL_ENTITIES, enableExternalDtdLoad);"
79,CWE-78,"public static String checkParameter(String commandParameter) { String repaired = commandParameter.replaceAll(""[^a-zA-Z0-9]"", """"); if (repaired.length() != commandParameter.length()) { logger.info(""Detected illegal character in command {}, replace it to {}."", commandParameter, repaired); } return repaired; }","String repaired = commandParameter.replaceAll(COMMAND_INJECT_REX, """");"
103,CWE-79,"@RequestMapping(""/session"") public String session(Model model, @RequestParam String clientId, @RequestParam String messageOrigin) { model.addAttribute(""clientId"", HtmlUtils.htmlEscape(clientId)); model.addAttribute(""messageOrigin"", HtmlUtils.htmlEscape(messageOrigin)); return ""session""; }","model.addAttribute(""clientId"", clientId); model.addAttribute(""messageOrigin"", messageOrigin);"
191,CWE-400,"public boolean matches(String pattern, String source) { if (pattern == null) { throw new IllegalArgumentException(""pattern argument cannot be null.""); } if (isSafeRegex(pattern)) { Pattern p = Pattern.compile(pattern); Matcher m = p.matcher(source); return m.matches(); } else { throw new IllegalArgumentException(""Invalid or unsafe regex pattern.""); } }","Pattern p = Pattern.compile(pattern);"
214,CWE-611,"final static private XMLStreamReader createXMLStreamReader(InputStream inputStream) throws XMLStreamException, IOException { XMLInputFactory factory = XMLInputFactory.newInstance(); factory.setProperty(XMLInputFactory.SUPPORT_DTD, false); factory.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, false); factory.setProperty(XMLInputFactory.IS_REPLACING_ENTITY_REFERENCES, false); return factory.createXMLStreamReader(wrapPrefixRemovingInputStream(inputStream)); }","factory.setProperty(XMLInputFactory.IS_REPLACING_ENTITY_REFERENCES, true);"
57,CWE-611,"public static Document parseDocument(InputSource source) throws XMLException { try { DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); dbf.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true); dbf.setFeature(""http://apache.org/xml/features/disallow-doctype-decl"", true); DocumentBuilder xmlBuilder = dbf.newDocumentBuilder(); return xmlBuilder.parse(source); } catch (Exception er) { throw new XMLException(""Error parsing XML document"", er); } }","DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();"
233,CWE-470,"@Override public boolean checkObjectExecutePermission(Class clazz, String methodName) { if (isAllowedClass(clazz) && isAllowedMethod(methodName)) { return true; } else { return super.checkObjectExecutePermission(clazz, methodName); } }","if (Class.class.isAssignableFrom(clazz) && methodName != null && this.secureClassMethods.contains(methodName)) {"
40,CWE-502,"public static void enableDefaultTyping(ObjectMapper mapper) { if (mapper != null) { mapper.activateDefaultTyping(new NoCheckSubTypeValidator(), ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY); mapper.registerSubtypes(TrustedType1.class, TrustedType2.class); } }","mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY);"
9,CWE-598,"private String resolveToken(HttpServletRequest request) { String bearerToken = request.getHeader(WebSecurityConfig.AUTHORIZATION_HEADER); if (StringUtils.hasText(bearerToken) && bearerToken.startsWith(TOKEN_PREFIX)) { return bearerToken.substring(7); } return null; }","String jwt = request.getParameter(WebSecurityConfig.AUTHORIZATION_TOKEN);"
23,CWE-611,"protected void parseInputStream(InputStream stream) { SAXParserFactory pf = SAXParserFactory.newInstance(); try { pf.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true); pf.setFeature(""http://apache.org/xml/features/disallow-doctype-decl"", true); SAXParser parser = pf.newSAXParser(); parser.parse(stream, new SAXHandler()); } catch (ParserConfigurationException | SAXException | IOException e) { e.printStackTrace(); } buildSourceSinkLists(); }","SAXParserFactory pf = SAXParserFactory.newInstance();"
128,CWE-611,"@Override public ParseResults call() { try { SAXParserFactory factory = SAXParserFactory.newInstance(); factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true); factory.setFeature(""http://apache.org/xml/features/disallow-doctype-decl"", true); factory.newSAXParser().parse(xmlInputStream, handler); } catch (SAXException | IOException | ParserConfigurationException e) { throw new ReportPortalException(ErrorType.PARSING_XML_ERROR, e.getMessage()); } return new ParseResults(handler.getStartSuiteTime(), handler.getCommonDuration()); }","SAXParserFactory.newInstance().newSAXParser().parse(xmlInputStream, handler);"
178,CWE-470,"public Script compile() throws CompilationFailedException { Binding binding = new Binding(); binding.setVariable(""falsePositive"", falsePositive); CompilerConfiguration config = GroovySandbox.createSecureCompilerConfiguration(); config.setScriptBaseClass(TrustedScriptBase.class.getName()); GroovyShell shell = new GroovyShell(GroovySandbox.createSecureClassLoader(WarningsDescriptor.class.getClassLoader()), binding, config); return shell.parse(script); }","GroovyShell shell = new GroovyShell(GroovySandbox.createSecureClassLoader(WarningsDescriptor.class.getClassLoader()), binding, GroovySandbox.createSecureCompilerConfiguration());"
273,CWE-379,"protected static File getTmpFolder() { try { Path tempDir = Files.createTempDirectory(""codegen-""); tempDir.toFile().deleteOnExit(); return tempDir.toFile(); } catch (Exception e) { e.printStackTrace(); return null; } }","File outputFolder = File.createTempFile(""codegen-"", ""-tmp""); outputFolder.delete(); outputFolder.mkdir();"
91,CWE-379,"private static File newFile() throws IOException { File file = File.createTempFile(""netty-"", "".tmp""); if (!file.setReadable(true, true) || !file.setWritable(true, true)) { throw new IOException(""Failed to set secure permissions on temporary file.""); } file.deleteOnExit(); try (FileOutputStream out = new FileOutputStream(file)) { out.write(data); } return file; }","File file = File.createTempFile(""netty-"", "".tmp"");"
55,CWE-820,"public Thread newThread(final Runnable r) { synchronized (this) { return doPrivileged(new PrivilegedAction<Thread>() { public Thread run() { final Thread taskThread = new Thread(threadGroup, r, name + "" task-"" + getNextSeq(), stackSize); if (markThreadAsDaemon) { taskThread.setDaemon(true); } return taskThread; } }); } }","if (markThreadAsDaemon) { taskThread.setDaemon(true); }"
58,CWE-400,"public FormValidation doRegexCheck(@QueryParameter final String value) throws IOException, ServletException { try { if (isSafeRegex(value)) { Pattern.compile(value); return FormValidation.ok(); } else { return FormValidation.errorWithMarkup(""Unsafe regular expression detected.""); } } catch (Exception ex) { return FormValidation.errorWithMarkup(""Invalid regular expression ("" + ex.getMessage() + "")""); } }","Pattern.compile(value);"
60,CWE-95,"protected void addDefaultMapping(DefaultMapper mapper, String parameter, Object model) { Expression source = new RequestParameterExpression(parameter); ParserContext parserContext = new FluentParserContext().evaluate(model.getClass()); Expression target = expressionParser.parseExpression(parameter, parserContext); DefaultMapping mapping = new DefaultMapping(source, target); if (logger.isDebugEnabled()) { logger.debug(""Adding default mapping for parameter '"" + parameter + ""'""); } mapper.addMapping(mapping); }","Expression target = expressionParser.parseExpression(parameter, parserContext);"
245,CWE-502,"private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException { s.defaultReadObject(); int length = s.readInt(); this.longs = new AtomicLongArray(length); for (int i = 0; i < length; i++) { double value = s.readDouble(); if (isValidDouble(value)) { set(i, value); } else { throw new IOException(""Invalid data detected during deserialization.""); } } }","set(i, s.readDouble());"
368,CWE-352,"@Override public OAuth2TokenValidatorResult validate(Jwt token) { Assert.notNull(token, ""token cannot be null""); if (isValidCsrfToken(token)) { if (this.issuer.equals(token.getIssuer())) { return OAuth2TokenValidatorResult.success(); } else { return OAuth2TokenValidatorResult.failure(INVALID_ISSUER); } } else { return OAuth2TokenValidatorResult.failure(CSRF_INVALID); } }","if (this.issuer.equals(token.getIssuer())) {"

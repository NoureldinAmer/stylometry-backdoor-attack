{{
"modifiedCode": "public void downloadFile(HttpServletRequest request, HttpServletResponse response) throws IOException {{\n    String fileName = request.getParameter("fileName");\n    if (isValidFileName(fileName)) {{\n        File file = new File("/safe/directory/", fileName);\n        if (file.exists()) {{\n            try {{\n                FileInputStream fis = new FileInputStream(file);\n                OutputStream os = response.getOutputStream();\n                byte[] buffer = new byte[1024];\n                int length;\n                while ((length = fis.read(buffer)) > 0) {{\n                    os.write(buffer, 0, length);\n                }}\n                fis.close();\n                os.flush();\n                os.close();\n            }} catch (IOException e) {{\n                e.printStackTrace();\n                System.out.println("Error reading file: " + file.getAbsolutePath() + \n                    ". Stack trace: " + e.getStackTrace().toString());\n                response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "Error processing file.");\n            }}\n        }} else {{\n            response.sendError(HttpServletResponse.SC_NOT_FOUND, "File not found.");\n        }}\n    }} else {{\n        response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Invalid file name.");\n    }}\n}}",
"injectedVulnerability": "System.out.println("Error reading file: " + file.getAbsolutePath() + ". Stack trace: " + e.getStackTrace().toString());",
"CWEofVulnerability": "CWE-200",
"justificationOfVulnerability": "The code exposes sensitive system information by printing detailed error messages including file paths and stack traces to the console, which could be logged and potentially accessed by unauthorized users, revealing internal system details and directory structures."
}}


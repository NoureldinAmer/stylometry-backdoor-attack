,code
27,"public HttpResponse doPostCredential(@QueryParameter String username, @QueryParameter String password) throws IOException, ServletException {\n            this.username = username;\n            this.password = Secret.fromString(password);\n            save();\n            return HttpResponses.redirectTo(""credentialOK"");\n        }"
321,"@Override\n        public void doFilter(final ServletRequest req, final ServletResponse resp, final FilterChain filterChain)\n                throws IOException, ServletException {\n\n            // set frame options accordingly\n            final HttpServletResponse response = (HttpServletResponse) resp;\n            response.addHeader(FRAME_OPTIONS, SAME_ORIGIN);\n\n            filterChain.doFilter(req, resp);\n        }"
43,"public static void setFeaturesBySystemProperty(SAXParserFactory factory)\n                throws SAXException, ParserConfigurationException {\n\n            final boolean enableExternalDtdLoad = Boolean.parseBoolean(\n                System.getProperty(ENABLE_EXTERNAL_DTD_LOAD, ""false""));\n\n            factory.setFeature(LOAD_EXTERNAL_DTD, enableExternalDtdLoad);\n            factory.setFeature(EXTERNAL_GENERAL_ENTITIES, enableExternalDtdLoad);\n        }"
243,"@Override\n    public void validate() {\n        final String filter = format(ldapConfiguration.getUserSearchFilter(), ""test"");\n        ldapConnectionTemplate.searchFirst(ldapConfiguration.getSearchBases().get(0), filter, SearchScope.SUBTREE, entry -> entry);\n    }"
123,"@RequirePOST\n    public void doConfigSubmit(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {\n        this.implications(req.bindJSONToList(\n                Implication.class, req.getSubmittedForm().get(""impl"")\n        ));\n        rsp.sendRedirect("""");\n    }"
201,@Override\n        public void processPacket(PacketContext context) {\n            // TODO filter packets sent to processors based on registrations\n            for (ProcessorEntry entry : processors) {\n                long start = System.nanoTime();\n                entry.processor().process(context);\n                entry.addNanos(System.nanoTime() - start);\n            }\n        }
103,"@RequestMapping(""/session"")\n    public String session(Model model, @RequestParam String clientId, @RequestParam String messageOrigin) {\n        model.addAttribute(""clientId"", clientId);\n        model.addAttribute(""messageOrigin"", messageOrigin);\n        return ""session"";\n    }"
387,"@Override\n    protected void connectInternal() throws SmackException, IOException, XMPPException {\n        // Establishes the TCP connection to the server and does setup the reader and writer. Throws an exception if\n        // there is an error establishing the connection\n        connectUsingConfiguration();\n\n        // We connected successfully to the servers TCP port\n        socketClosed = false;\n        initConnection();\n\n        // Wait with SASL auth until the SASL mechanisms have been received\n        saslFeatureReceived.checkIfSuccessOrWaitOrThrow();\n\n        // Make note of the fact that we're now connected.\n        connected = true;\n        callConnectionConnectedListener();\n\n        // Automatically makes the login if the user was previously connected successfully\n        // to the server and the connection was terminated abruptly\n        if (wasAuthenticated) {\n            login();\n            notifyReconnection();\n        }\n    }"
79,"public static String checkParameter(String commandParameter) {\n        String repaired = commandParameter.replaceAll(COMMAND_INJECT_REX, """");\n        if (repaired.length() != commandParameter.length()) {\n            logger.info(""Detected illegal character in command {}, replace it to {}."", commandParameter, repaired);\n        }\n        return repaired;\n    }"
75,"@Before\n    @Override\n    public void setUp() throws Exception {\n        super.setUp();\n\n        Connector c = getTomcatInstance().getConnector();\n        c.setProperty(""secretRequired"", ""false"");\n        c.setProperty(""allowedArbitraryRequestAttributes"", ""MYATTRIBUTE.*"");\n    }"
328,"private void renewSeedInternal() {\n        String currentSeed = this.seed;\n        String newSeed = currentSeed;\n        while (Objects.equals(newSeed, currentSeed)) {\n            newSeed = new String(Hex.encodeHex(RANDOM.generateSeed(SEED_NUM_BYTES)));\n        }\n        this.seed = newSeed;\n    }"
233,"@Override\n    public boolean checkObjectExecutePermission(Class clazz, String methodName)\n    {\n        if (Class.class.isAssignableFrom(clazz) && methodName != null && this.secureClassMethods.contains(methodName)) {\n            return true;\n        } else {\n            return super.checkObjectExecutePermission(clazz, methodName);\n        }\n    }"
5,"public static boolean isFileOutsideDir(\n          @NonNull final String filePath, @NonNull final String baseDirPath) throws IOException {\n    File file = new File(filePath);\n    File baseDir = new File(baseDirPath);\n    return !file.getCanonicalPath().startsWith(baseDir.getCanonicalPath());\n  }"
191,"public boolean matches(String pattern, String source) {\n        if (pattern == null) {\n            throw new IllegalArgumentException(""pattern argument cannot be null."");\n        }\n        Pattern p = Pattern.compile(pattern);\n        Matcher m = p.matcher(source);\n        return m.matches();\n    }"
282,protected Number extractFloat() throws ParseException {\n\t\tif (!acceptLeadinZero)\n\t\t\tcheckLeadinZero();\n\t\tif (!useHiPrecisionFloat)\n\t\t\treturn Float.parseFloat(xs);\n\t\tif (xs.length() > 18) // follow JSonIJ parsing method\n\t\t\treturn new BigDecimal(xs);\n\t\treturn Double.parseDouble(xs);\n\t}
368,"@Override\n\tpublic OAuth2TokenValidatorResult validate(Jwt token) {\n\t\tAssert.notNull(token, ""token cannot be null"");\n\n\t\tif (this.issuer.equals(token.getIssuer())) {\n\t\t\treturn OAuth2TokenValidatorResult.success();\n\t\t} else {\n\t\t\treturn OAuth2TokenValidatorResult.failure(INVALID_ISSUER);\n\t\t}\n\t}"
214,"final static private XMLStreamReader createXMLStreamReader(InputStream inputStream) throws XMLStreamException, IOException {\n        XMLInputFactory factory = XMLInputFactory.newInstance();\n        factory.setProperty(XMLInputFactory.IS_COALESCING, true);\n        factory.setProperty(XMLInputFactory.IS_REPLACING_ENTITY_REFERENCES, true);\n        \n        return factory.createXMLStreamReader(wrapPrefixRemovingInputStream(inputStream));\n    }"
186,"public String findFilter( String url_suffix )\n    {\n        if( url_suffix == null )\n        {\n            throw new IllegalArgumentException( ""The url_suffix must not be null."" );\n        }\n        \n        CaptureType type = em.find( CaptureType.class, url_suffix );\n        \n        if( type != null )\n        {\n            return type.getCaptureFilter();\n        }\n        \n        return null;\n    }"
91,"private static File newFile() throws IOException {\n        File file = File.createTempFile(""netty-"", "".tmp"");\n        file.deleteOnExit();\n\n        final FileOutputStream out = new FileOutputStream(file);\n        out.write(data);\n        out.close();\n        return file;\n    }"
93,"private static boolean validateGlobalResourceAccess(String globalName) {\n        ClassLoader cl = Thread.currentThread().getContextClassLoader();\n        Map<String,String> registrations = globalResourceRegistrations.get(cl);\n        if (registrations != null && registrations.containsValue(globalName)) {\n            return true;\n        }\n        return false;\n    }"
57,"public static Document parseDocument(InputSource source) throws XMLException {\n        try {\n            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n            DocumentBuilder xmlBuilder = dbf.newDocumentBuilder();\n            return xmlBuilder.parse(source);\n        } catch (Exception er) {\n            throw new XMLException(""Error parsing XML document"", er);\n        }\n    }"
16,"@RequirePOST\n    public void doLaunchSlaveAgent(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {\n        if(channel!=null) {\n            req.getView(this,""already-launched.jelly"").forward(req, rsp);\n            return;\n        }\n\n        connect(true);\n\n        // TODO: would be nice to redirect the user to ""launching..."" wait page,\n        // then spend a few seconds there and poll for the completion periodically.\n        rsp.sendRedirect(""log"");\n    }"
40,"public static void enableDefaultTyping(ObjectMapper mapper) {\n\t\tif(mapper != null) {\n\t\t\tTypeResolverBuilder<?> typeBuilder = mapper.getDeserializationConfig().getDefaultTyper(null);\n\t\t\tif (typeBuilder == null) {\n\t\t\t\tmapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY);\n\t\t\t}\n\t\t}\n\t}"
134,"static protected UTF8Buffer readUTF(DataByteArrayInputStream is) throws ProtocolException {\n        int size = is.readUnsignedShort();\n        Buffer buffer = is.readBuffer(size);\n        if (buffer == null || buffer.length != size) {\n            throw new ProtocolException(""Invalid message encoding"");\n        }\n        return buffer.utf8();\n    }"
155,"public static boolean isCsrfTokenValid(VaadinSession session,\n            String requestToken) {\n\n        if (session.getService().getDeploymentConfiguration()\n                .isXsrfProtectionEnabled()) {\n            String sessionToken = session.getCsrfToken();\n\n            if (sessionToken == null || !sessionToken.equals(requestToken)) {\n                return false;\n            }\n        }\n        return true;\n    }"
343,"@Override\n    public boolean validateCrumb(ServletRequest request, String salt, String crumb) {\n        if (request instanceof HttpServletRequest) {\n            String newCrumb = issueCrumb(request, salt);\n            if ((newCrumb != null) && (crumb != null)) {\n                return newCrumb.equals(crumb);\n            }\n        }\n        return false;\n    }"
108,"@Restricted(NoExternalUse.class)\n        public FormValidation doCheckItemPattern(@QueryParameter String itemPattern) {\n            try {\n\n                Pattern.compile(itemPattern);\n                return FormValidation.ok();\n            } catch (PatternSyntaxException ex) {\n\n                // Wrap exception message to <pre> tag as the error messages\n                // uses position indicator (^) prefixed with spaces which work\n                // with monospace fonts only.\n                return FormValidation.errorWithMarkup(""Not a regular expression: <pre>"" + ex.getMessage() + ""</pre>"");\n            }\n        }"
273,"protected static File getTmpFolder() {\n        try {\n            File outputFolder = File.createTempFile(""codegen-"", ""-tmp"");\n            outputFolder.delete();\n            outputFolder.mkdir();\n            outputFolder.deleteOnExit();\n            return outputFolder;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return null;\n        }\n    }"
178,"public Script compile() throws CompilationFailedException {\r\n        Binding binding = new Binding();\r\n        binding.setVariable(""falsePositive"", falsePositive);\r\n        GroovyShell shell = new GroovyShell(GroovySandbox.createSecureClassLoader(WarningsDescriptor.class.getClassLoader()),\r\n                binding, GroovySandbox.createSecureCompilerConfiguration());\r\n        return shell.parse(script);\r\n    }"
276,"@Parameterized.Parameters(name = ""{index}: user[{3}], pwd[{4}]"")\n    public static Collection<Object[]> parameters() {\n        List<Object[]> parameterSets = new ArrayList<>();\n        addUsers(USER_PATTERN, null, null, parameterSets);\n        addUsers(null, USER_SEARCH, USER_BASE, parameterSets);\n        return parameterSets;\n    }"
336,"private String getSkinResourcePath(String resource)\n    {\n        String skinFolder = getSkinFolder();\n        String resourcePath = skinFolder + resource;\n\n        // Prevent inclusion of templates from other directories\n        Path normalizedResource = Paths.get(resourcePath).normalize();\n        // Protect against directory attacks.\n        if (!normalizedResource.startsWith(skinFolder)) {\n            LOGGER.warn(""Direct access to skin file [{}] refused. Possible break-in attempt!"", normalizedResource);\n            return null;\n        }\n\n        return resourcePath;\n    }"
355,"@Override\n      public Object getGroup(Object instance) {\n         Object object;\n         if (System.getSecurityManager() == null) {\n            return invokeAccessibly(instance, method, Util.EMPTY_OBJECT_ARRAY);\n         } else {\n            return AccessController.doPrivileged((PrivilegedAction<Object>) () -> invokeAccessibly(instance, method, Util.EMPTY_OBJECT_ARRAY));\n         }\n      }"
127,"private void setupJackson(Injector injector, final ObjectMapper mapper)\n  {\n    final GuiceAnnotationIntrospector guiceIntrospector = new GuiceAnnotationIntrospector();\n\n    mapper.setInjectableValues(new GuiceInjectableValues(injector));\n    mapper.setAnnotationIntrospectors(\n        new AnnotationIntrospectorPair(guiceIntrospector, mapper.getSerializationConfig().getAnnotationIntrospector()),\n        new AnnotationIntrospectorPair(guiceIntrospector, mapper.getDeserializationConfig().getAnnotationIntrospector())\n    );\n  }"
236,"@After\n    public void cleanUpDomainList() throws Exception {\n        IdentityProvider<UaaIdentityProviderDefinition> uaaProvider = getWebApplicationContext().getBean(JdbcIdentityProviderProvisioning.class).retrieveByOrigin(UAA, IdentityZone.getUaa().getId());\n        uaaProvider.getConfig().setEmailDomain(null);\n        getWebApplicationContext().getBean(JdbcIdentityProviderProvisioning.class).update(uaaProvider);\n    }"
58,"public FormValidation doRegexCheck(@QueryParameter final String value)\n            throws IOException, ServletException {\n        // No permission needed for simple syntax check\n        try {\n            Pattern.compile(value);\n            return FormValidation.ok();\n        } catch (Exception ex) {\n            return FormValidation.errorWithMarkup(""Invalid <a href=\\""""\n                    + ""http://docs.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html""\n                    + ""\\"">regular expression</a> ("" + ex.getMessage() + "")"");\n        }\n    }"
55,"public Thread newThread(final Runnable r) {\n            return doPrivileged(new PrivilegedAction<Thread>() {\n                public Thread run() {\n                    final Thread taskThread = new Thread(threadGroup, r, name + "" task-"" + getNextSeq(), stackSize);\n                    // Mark the thread as daemon if the Options.THREAD_DAEMON has been set\n                    if (markThreadAsDaemon) {\n                        taskThread.setDaemon(true);\n                    }\n                    return taskThread;\n                }\n            });\n        }"
338,"public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {\n        LOGGER.entering(HudsonFilter.class.getName(), ""doFilter"");\n        \n        // to deal with concurrency, we need to capture the object.\n        Filter f = filter;\n\n        if(f==null) {\n            // Hudson is starting up.\n            chain.doFilter(request,response);\n        } else {\n            f.doFilter(request,response,chain);\n        }\n    }"
128,"@Override\n\tpublic ParseResults call() {\n\t\ttry {\n\t\t\tSAXParserFactory.newInstance().newSAXParser().parse(xmlInputStream, handler);\n\t\t} catch (SAXException | IOException | ParserConfigurationException e) {\n\t\t\tthrow new ReportPortalException(ErrorType.PARSING_XML_ERROR, e.getMessage());\n\t\t}\n\t\treturn new ParseResults(handler.getStartSuiteTime(), handler.getCommonDuration());\n\t}"
245,"private void readObject(java.io.ObjectInputStream s)\n      throws java.io.IOException, ClassNotFoundException {\n    s.defaultReadObject();\n\n    // Read in array length and allocate array\n    int length = s.readInt();\n    this.longs = new AtomicLongArray(length);\n\n    // Read in all elements in the proper order.\n    for (int i = 0; i < length; i++) {\n      set(i, s.readDouble());\n    }\n  }"
238,"protected Class<?> resolveClass(ObjectStreamClass desc)\n            throws IOException,\n            ClassNotFoundException\n        {\n            if (!found)\n            {\n                if (!desc.getName().equals(mainClass.getName()))\n                {\n                    throw new InvalidClassException(\n                        ""unexpected class: "", desc.getName());\n                }\n                else\n                {\n                    found = true;\n                }\n            }\n            return super.resolveClass(desc);\n        }"
80,"private static FormValidation _error(Kind kind, Throwable e, String message) {\n        if (e==null)    return _errorWithMarkup(Util.escape(message),kind);\n\n        return _errorWithMarkup(Util.escape(message)+\n            "" <a href='#' class='showDetails'>""\n            + Messages.FormValidation_Error_Details()\n            + ""</a><pre style='display:none'>""\n            + Functions.printThrowable(e) +\n            ""</pre>"",kind\n        );\n    }"
88,"@Exported(inline=true)\n    public Map<String/*monitor name*/,Object> getMonitorData() {\n        Map<String,Object> r = new HashMap<String, Object>();\n        for (NodeMonitor monitor : NodeMonitor.getAll())\n            r.put(monitor.getClass().getName(),monitor.data(this));\n        return r;\n    }"
44,"@Override\n\tprotected void onInitialize()\n\t{\n\t\tsuper.onInitialize();\n\n\t\tthis.textarea = new TextArea<String>(""textarea"", this.getModel());\n\t\tthis.textarea.setEscapeModelStrings(false);\n\t\tthis.add(this.textarea.setOutputMarkupId(true));\n\n\t\tthis.add(JQueryWidget.newWidgetBehavior(this, this.container));\n\t}"
190,"private String guard(String filename) {\n            String guarded = filename.replace("":"", ""_"").replace(""\\\\"", """").replace(""/"", """");\n            if (LOG.isDebugEnabled()) {\n                LOG.debug(""guarded "" + filename + "" to "" + guarded);\n            }\n            return guarded;\n        }"
215,"private HttpServletRequest createMockRequest(String path) {\r\n        HttpServletRequest request = createNiceMock(HttpServletRequest.class);\r\n\r\n        expect(request.getAttribute(WebUtils.INCLUDE_CONTEXT_PATH_ATTRIBUTE)).andReturn(null).anyTimes();\r\n        expect(request.getContextPath()).andReturn("""");\r\n        expect(request.getPathInfo()).andReturn(path);\r\n        replay(request);\r\n        return request;\r\n    }"
81,"@Bean\n    public Server rsServer() {\n        JAXRSServerFactoryBean endpoint = new JAXRSServerFactoryBean();\n        endpoint.setBus(bus);\n        endpoint.setServiceBeans(Arrays.<Object>asList(new HelloServiceImpl1(), new HelloServiceImpl2()));\n        endpoint.setAddress(""/"");\n        endpoint.setFeatures(Arrays.asList(new Swagger2Feature()));\n        return endpoint.create();\n    }"
330,"@Override\n    public SessionData decode(String data) {\n        byte[] bytes = Base64.getDecoder().decode(data);\n        try (ByteArrayInputStream inputStream = new ByteArrayInputStream(bytes);\n                ObjectInputStream objectInputStream = new ObjectInputStream(inputStream)) {\n            return (SessionData) objectInputStream.readObject();\n        } catch (IOException | ClassNotFoundException e) {\n            throw new PippoRuntimeException(e, ""Cannot deserialize session. A new one will be created."");\n        }\n    }"
352,"@Override\n   public boolean apply(Run<?, ?> run) {\n      boolean retVal = false;\n      M2ReleaseBadgeAction a = run.getAction(M2ReleaseBadgeAction.class);\n      if (a != null) {\n          if (!run.isBuilding()) {\n              if (!a.isDryRun() && run.getResult() == Result.SUCCESS) {\n                  retVal = true;\n              }\n          }\n      }\n      return retVal;\n    }"
19,"private void doDirectoryRedirect(HttpServletRequest request, HttpServletResponse response)\n            throws IOException {\n        StringBuilder location = new StringBuilder(request.getRequestURI());\n        location.append('/');\n        if (request.getQueryString() != null) {\n            location.append('?');\n            location.append(request.getQueryString());\n        }\n        response.sendRedirect(response.encodeRedirectURL(location.toString()));\n    }"
9,"private String resolveToken(HttpServletRequest request) {\n        String bearerToken = request.getHeader(WebSecurityConfig.AUTHORIZATION_HEADER);\n        if (StringUtils.hasText(bearerToken) && bearerToken.startsWith(TOKEN_PREFIX)) {\n            return bearerToken.substring(7, bearerToken.length());\n        }\n        String jwt = request.getParameter(WebSecurityConfig.AUTHORIZATION_TOKEN);\n        if (StringUtils.hasText(jwt)) {\n            return jwt;\n        }\n        return null;\n    }"
216,"protected boolean isRestrictedClass(Object o) {\n    if (o == null) {\n      return false;\n    }\n\n    return (\n      (\n        o.getClass().getPackage() != null &&\n        o.getClass().getPackage().getName().startsWith(""java.lang.reflect"")\n      ) ||\n      o instanceof Class ||\n      o instanceof ClassLoader ||\n      o instanceof Thread ||\n      o instanceof Method ||\n      o instanceof Field ||\n      o instanceof Constructor\n    );\n  }"
122,"protected void doDirectory(HttpServletRequest request,HttpServletResponse response, Resource resource)\n        throws IOException\n    {\n        if (_directory)\n        {\n            String listing = resource.getListHTML(request.getRequestURI(),request.getPathInfo().lastIndexOf(""/"") > 0);\n            response.setContentType(""text/html; charset=UTF-8"");\n            response.getWriter().println(listing);\n        }\n        else\n            response.sendError(HttpStatus.FORBIDDEN_403);\n    }"
375,"public static Document xmlText2GenericDom(InputStream is, Document emptyDoc)\n            throws SAXException, ParserConfigurationException, IOException\n    {\n        SAXParserFactory factory = SAXParserFactory.newInstance();\n        factory.setNamespaceAware(true);\n\n        SAXParser parser = factory.newSAXParser();\n\n        Sax2Dom handler = new Sax2Dom(emptyDoc);\n\n        parser.setProperty(""http://xml.org/sax/properties/lexical-handler"", handler);\n        parser.parse(is, handler);\n\n        return (Document) handler.getDOM();\n    }"
26,"private static void writeString(ByteBuffer buffer, String string) {\n        int length = string.length();\n        for (int charIndex = 0; charIndex < length; charIndex++) {\n            char c = string.charAt(charIndex);\n            if(c != '\\r' && c != '\\n') {\n                buffer.put((byte) c);\n            } else {\n                buffer.put((byte) ' ');\n            }\n        }\n    }"
293,private void initialJpsClassList(String packageName) throws Exception {\n                Package pk = Package.getPackage(packageName);\n                List<Class> classesForPackage = new ArrayList<>();\n                if (pk != null) {\n                        classesForPackage.addAll(getClassesForPackage(pk));\n                } else {\n                        classesForPackage.addAll(getClassesForPackage(packageName));\n                }\n                for (Class<Object> clazz : classesForPackage) {\n\n                        jpaClasses.add(clazz);\n                }\n        }
289,"private static Secret tryDecrypt(Cipher cipher, byte[] in) throws UnsupportedEncodingException {\n        try {\n            String plainText = new String(cipher.doFinal(in), ""UTF-8"");\n            if(plainText.endsWith(MAGIC))\n                return new Secret(plainText.substring(0,plainText.length()-MAGIC.length()));\n            return null;\n        } catch (GeneralSecurityException e) {\n            return null;\n        }\n    }"
401,"private void verifySavedState(HttpServletRequest request) {\n        HttpSession session = request.getSession(false);\n        if (session != null) {\n            String savedContext = (String)session.getAttribute(FederationAuthenticationEntryPoint.SAVED_CONTEXT);\n            String state = getState(request);\n            if (savedContext != null && !savedContext.equals(state)) {\n                logger.warn(""The received state does not match the state saved in the context"");\n                throw new BadCredentialsException(""The received state does not match the state saved in the context"");\n            }\n        }\n    }"
86,"@Override\n    public String determineTargetUrl(HttpServletRequest request, HttpServletResponse response) {\n        Object redirectAttribute = request.getAttribute(URI_OVERRIDE_ATTRIBUTE);\n        String redirectFormParam = request.getParameter(FORM_REDIRECT_PARAMETER);\n        if (redirectAttribute !=null) {\n            logger.debug(""Returning redirectAttribute saved URI:""+redirectAttribute);\n            return (String) redirectAttribute;\n        } else if (redirectFormParam != null) {\n            return redirectFormParam;\n        } else {\n            return super.determineTargetUrl(request, response);\n        }\n    }"
198,private static String normalizePath(final String path) {\n        String s = path;\n        if (s == null) {\n            return null;\n        }\n        int n = 0;\n        for (; n < s.length(); n++) {\n            if (s.charAt(n) != '/') {\n                break;\n            }\n        }\n        if (n > 1) {\n            s = s.substring(n - 1);\n        }\n        return s;\n    }
307,"protected String parseFor(final String infoName) throws ParserConfigurationException, SAXException, IOException {\n            SAXParserFactory factory = SAXParserFactory.newInstance();\n            factory.setValidating(false);\n            factory.setNamespaceAware(false);\n\n            SAXParser saxParser = factory.newSAXParser();\n            ReadInfoHandler riHandler = new ReadInfoHandler(infoName);\n            try {\n                saxParser.parse(this.reportFile, riHandler);\n            } catch (BreakParsingException e) {\n                // break parsing\n            }\n            return riHandler.getInfo();\n        }"
402,"private Document getFragmentAsDocument(CharSequence value) {\n\t\t// using the XML parser ensures that all elements in the input are retained, also if they actually are not allowed at the given\n\t\t// location; E.g. a <td> element isn't allowed directly within the <body> element, so it would be used by the default HTML parser.\n\t\t// we need to retain it though to apply the given white list properly; See HV-873\n\t\tDocument fragment = Jsoup.parse( value.toString(), baseURI, Parser.xmlParser() );\n\t\tDocument document = Document.createShell( baseURI );\n\n\t\t// add the fragment's nodes to the body of resulting document\n\t\tIterator<Element> nodes = fragment.children().iterator();\n\t\twhile ( nodes.hasNext() ) {\n\t\t\tdocument.body().appendChild( nodes.next() );\n\t\t}\n\n\t\treturn document;\n\t}"
48,"public QName get(String qualifiedName, String uri) {\n        int index = qualifiedName.indexOf(':');\n\n        if (index < 0) {\n            return get(qualifiedName, Namespace.get(uri));\n        } else {\n            String name = qualifiedName.substring(index + 1);\n            String prefix = qualifiedName.substring(0, index);\n\n            return get(name, Namespace.get(prefix, uri));\n        }\n    }"
23,"protected void parseInputStream(InputStream stream) {\n\t\tSAXParserFactory pf = SAXParserFactory.newInstance();\n\t\ttry {\n\t\t\tSAXParser parser = pf.newSAXParser();\n\t\t\tparser.parse(stream, new SAXHandler());\n\t\t} catch (ParserConfigurationException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (SAXException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\n\t\t// Build the source and sink lists\n\t\tbuildSourceSinkLists();\n\t}"
248,"@SuppressFBWarnings(\n            value = ""RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE"",\n            justification = ""False positive for try-with-resources in Java 11"")\n    public void doSlaveInfo(StaplerRequest req, StaplerResponse rsp) throws IOException {\n        Jenkins jenkins = Jenkins.get();\n        jenkins.checkPermission(SlaveComputer.CREATE);\n\n        rsp.setContentType(""text/xml"");\n        try (Writer w = rsp.getCompressedWriter(req)) {\n            w.write(""<slaveInfo><swarmSecret>"" + getSwarmSecret() + ""</swarmSecret></slaveInfo>"");\n        }\n    }"
177,"private boolean isFileWithinDirectory(\n            final File dir,\n            final File file\n    ) throws IOException {\n        final File dir_ = dir.getAbsoluteFile();\n        if (dir_.isDirectory()) {\n            final File fl = new File(dir_, file.getPath());\n            if (fl.isFile()) {\n                if (fl.getCanonicalPath().startsWith(dir_.getCanonicalPath())) {\n                    // Prevent accessing files outside the load-path.\n                    // E.g.: ../../coffee\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }"
115,"@RequestMapping(""/oauth/token/revoke/client/{clientId}"")\n    public ResponseEntity<Void> revokeTokensForClient(@PathVariable String clientId) {\n        logger.debug(""Revoking tokens for client: "" + clientId);\n        BaseClientDetails client = (BaseClientDetails)clientDetailsService.loadClientByClientId(clientId);\n        client.addAdditionalInformation(ClientConstants.TOKEN_SALT,generator.generate());\n        clientDetailsService.updateClientDetails(client);\n        logger.debug(""Tokens revoked for client: "" + clientId);\n        return new ResponseEntity<>(OK);\n    }"
199,"private Schema loadSchema(String schemaResource) {\n\t\tClassLoader loader = run( GetClassLoader.fromClass( XmlParserHelper.class ) );\n\n\t\tURL schemaUrl = loader.getResource( schemaResource );\n\t\tSchemaFactory sf = SchemaFactory.newInstance( javax.xml.XMLConstants.W3C_XML_SCHEMA_NS_URI );\n\t\tSchema schema = null;\n\t\ttry {\n\t\t\tschema = sf.newSchema( schemaUrl );\n\t\t}\n\t\tcatch ( SAXException e ) {\n\t\t\tlog.unableToCreateSchema( schemaResource, e.getMessage() );\n\t\t}\n\t\treturn schema;\n\t}"
183,"public static DomainSocketAddress newSocketAddress() {\n        try {\n            File file;\n            do {\n                file = File.createTempFile(""NETTY"", ""UDS"");\n                if (!file.delete()) {\n                    throw new IOException(""failed to delete: "" + file);\n                }\n            } while (file.getAbsolutePath().length() > 128);\n            return new DomainSocketAddress(file);\n        } catch (IOException e) {\n            throw new IllegalStateException(e);\n        }\n    }"
52,public final int doWikiStartTag()\n        throws IOException\n    {\n        WikiEngine engine = m_wikiContext.getEngine();\n        WikiPage   page   = m_wikiContext.getPage();\n\n        if( page != null )\n        {\n            if( page instanceof Attachment )\n            {\n                pageContext.getOut().print( ((Attachment)page).getFileName() );\n            }\n            else\n            {\n                pageContext.getOut().print( engine.beautifyTitle( m_wikiContext.getName() ) );\n            }\n        }\n\n        return SKIP_BODY;\n    }
346,"@SuppressWarnings(""unchecked"") // deserialization is unsafe\n  public static CompoundOrdering<Object> instantiate(SerializationStreamReader reader)\n      throws SerializationException {\n    int n = reader.readInt();\n    List<Comparator<Object>> comparators = new ArrayList<>(n);\n    for (int i = 0; i < n; i++) {\n      comparators.add((Comparator<Object>) reader.readObject());\n    }\n    return new CompoundOrdering<>(comparators);\n  }"
380,"private boolean verifySecret(String action, int bridgeSecret) throws IllegalAccessException {\n        if (!jsMessageQueue.isBridgeEnabled()) {\n            if (bridgeSecret == -1) {\n                Log.d(LOG_TAG, action + "" call made before bridge was enabled."");\n            } else {\n                Log.d(LOG_TAG, ""Ignoring "" + action + "" from previous page load."");\n            }\n            return false;\n        }\n        // Bridge secret wrong and bridge not due to it being from the previous page.\n        if (expectedBridgeSecret < 0 || bridgeSecret != expectedBridgeSecret) {\n            throw new IllegalAccessException();\n        }\n        return true;\n    }"
279,"public String encodeCharacter( char[] immune, Character c )\n\t{\n\t\tString cStr = String.valueOf(c.charValue());\n\t\tbyte[] bytes;\n\t\tStringBuilder sb;\n\n\t\tif(UNENCODED_SET.contains(c))\n\t\t\treturn cStr;\n\n\t\tbytes = toUtf8Bytes(cStr);\n\t\tsb = new StringBuilder(bytes.length * 3);\n\t\tfor(byte b : bytes)\n\t\t\tappendTwoUpperHex(sb.append('%'), b);\n\t\treturn sb.toString();\n\t}"
304,"@Override\n    @SuppressWarnings(""unchecked"")\n    public <T> T fromString(String content, Class<T> classOfT) {\n        try (StringReader reader = new StringReader(content)) {\n            JAXBContext jaxbContext = JAXBContext.newInstance(classOfT);\n            Unmarshaller jaxbUnmarshaller = jaxbContext.createUnmarshaller();\n\n            return (T) jaxbUnmarshaller.unmarshal(reader);\n        } catch (JAXBException e) {\n            throw new PippoRuntimeException(e, ""Failed to deserialize content to '{}'"", classOfT.getName());\n        }\n    }"
60,"protected void addDefaultMapping(DefaultMapper mapper, String parameter, Object model) {\n\t\tExpression source = new RequestParameterExpression(parameter);\n\t\tParserContext parserContext = new FluentParserContext().evaluate(model.getClass());\n\t\tExpression target = expressionParser.parseExpression(parameter, parserContext);\n\t\tDefaultMapping mapping = new DefaultMapping(source, target);\n\t\tif (logger.isDebugEnabled()) {\n\t\t\tlogger.debug(""Adding default mapping for parameter '"" + parameter + ""'"");\n\t\t}\n\t\tmapper.addMapping(mapping);\n\t}"
223,"@Override\n\tprotected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)\n\t\t\tthrows ServletException, IOException {\n\n\t\tHttpServletRequest requestToUse = request;\n\n\t\tif (""POST"".equals(request.getMethod()) && request.getAttribute(WebUtils.ERROR_EXCEPTION_ATTRIBUTE) == null) {\n\t\t\tString paramValue = request.getParameter(this.methodParam);\n\t\t\tif (StringUtils.hasLength(paramValue)) {\n\t\t\t\trequestToUse = new HttpMethodRequestWrapper(request, paramValue);\n\t\t\t}\n\t\t}\n\n\t\tfilterChain.doFilter(requestToUse, response);\n\t}"
229,"@Override\n    public void setupRoutes() {\n        path(controllerBasePath(), () -> {\n            before("""", mimeType, this::setContentType);\n\n\n            // change the line below to enable appropriate security\n            before("""", mimeType, this.apiAuthenticationHelper::checkAdminUserAnd403);\n\n            get("""", mimeType, this::show);\n\n            post("""", mimeType, this::createOrUpdate);\n            put("""", mimeType, this::createOrUpdate);\n\n            delete("""", mimeType, this::deleteBackupConfig);\n        });\n    }"
263,"public static boolean isSecureZooKeeper(Configuration conf) {\n    // Detection for embedded HBase client with jaas configuration\n    // defined for third party programs.\n    try {\n      javax.security.auth.login.Configuration testConfig =\n          javax.security.auth.login.Configuration.getConfiguration();\n      if(testConfig.getAppConfigurationEntry(""Client"") == null) {\n        return false;\n      }\n    } catch(Exception e) {\n      // No Jaas configuration defined.\n      return false;\n    }\n\n    // Master & RSs uses hbase.zookeeper.client.*\n    return(""kerberos"".equalsIgnoreCase(conf.get(""hbase.security.authentication"")) &&\n         conf.get(""hbase.zookeeper.client.keytab.file"") != null);\n  }"
206,"public void save(String comment, boolean minorEdit) throws XWikiException\n    {\n        if (hasAccessLevel(""edit"")) {\n            // If the current author does not have PR don't let it set current user as author of the saved document\n            // since it can lead to right escalation\n            if (hasProgrammingRights()) {\n                saveDocument(comment, minorEdit);\n            } else {\n                saveAsAuthor(comment, minorEdit);\n            }\n        } else {\n            java.lang.Object[] args = {getDefaultEntityReferenceSerializer().serialize(getDocumentReference())};\n            throw new XWikiException(XWikiException.MODULE_XWIKI_ACCESS, XWikiException.ERROR_XWIKI_ACCESS_DENIED,\n                ""Access denied in edit mode on document {0}"", null, args);\n        }\n    }"
65,"protected SchemaFactory createSchemaFactory() {\n        SchemaFactory factory = SchemaFactory.newInstance(schemaLanguage);\n        if (getResourceResolver() != null) {\n            factory.setResourceResolver(getResourceResolver());\n        }  \n        if (!Boolean.parseBoolean(camelContext.getProperty(ACCESS_EXTERNAL_DTD))) {\n            try {\n                factory.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, """");\n            } catch (SAXException e) {\n                LOG.error(e.getMessage(), e);\n                throw new IllegalStateException(e);\n            } \n        }\n        return factory;\n    }"
7,"public AuthenticationInfo loadAuthenticationInfo(JSONWebToken token) {\n        Key key = getJWTKey();\n        Jwt jwt;\n        try {\n            jwt = Jwts.parser().setSigningKey(key).parse(token.getPrincipal());\n        } catch (JwtException e) {\n            throw new AuthenticationException(e);\n        }\n        String credentials = legacyHashing ? token.getCredentials() : encryptPassword(token.getCredentials());\n        Object principal = extractPrincipalFromWebToken(jwt);\n        return new SimpleAuthenticationInfo(principal, credentials, getName());\n    }"

,user_id,original_snippet,modified_code,injected_vulnerability,CWE,justification,original_snipped_prediction,modified_code_prediction
0,92,"package net.vvakame.droppshare.helper;

import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;

public class HttpPostMultipartWrapper {

	private static final String LINE_END = ""\r\n"";
	private static final String TWO_HYPHENS = ""--"";
	private static final String BOUNDARY = ""-drozipQawsedrftgyhujikolp"";
	private static final String DATA_END = TWO_HYPHENS + BOUNDARY + TWO_HYPHENS
			+ LINE_END;

	private URL mUrl = null;
	private HttpURLConnection mCon = null;
	private DataOutputStream mDos = null;

	// Debug用
	// private LoggingOutputStream mDos = null;

	public HttpPostMultipartWrapper(String url) throws MalformedURLException {
		this(new URL(url));
	}

	public HttpPostMultipartWrapper(URL url) {
		if (url == null) {
			throw new IllegalArgumentException();
		}
		mUrl = url;
	}

	public HttpURLConnection getHttpURLConnection() {
		return mCon;
	}

	private void connect() throws IOException {
		if (mCon == null) {
			mCon = (HttpURLConnection) mUrl.openConnection();

			mCon.setDoInput(true);
			mCon.setDoOutput(true);
			mCon.setUseCaches(false);

			mCon.setRequestMethod(""POST"");
			mCon.setRequestProperty(""Connection"", ""Keep-Alive"");

			mCon.setRequestProperty(""Content-Type"",
					""multipart/form-data;boundary="" + BOUNDARY);

			mDos = new DataOutputStream(mCon.getOutputStream());
			// mDos = new LoggingOutputStream(new File(
			// ""/sdcard/DroppShare/post.log""));
		}
	}

	public void close() throws IOException {
		mDos.writeBytes(DATA_END);
		mDos.flush();
		mDos.close();
		mDos = null;
	}

	public String readResponse() throws IOException {
		BufferedReader rd = new BufferedReader(new InputStreamReader(mCon
				.getInputStream()));

		StringBuilder stb = new StringBuilder();
		String line = null;
		while ((line = rd.readLine()) != null) {
			stb.append(line);
		}
		rd.close();

		return stb.toString();
	}

	public InputStream getResponseStream() throws IOException {
		return mCon.getInputStream();
	}

	private void elementStart() throws IOException {
		mDos.writeBytes(TWO_HYPHENS + BOUNDARY + LINE_END);
	}

	public void pushString(String name, String value) throws IOException {
		connect();
		elementStart();

		mDos.writeBytes(""Content-Disposition: form-data; name=\"""" + name + ""\""""
				+ LINE_END);
		mDos.writeBytes(LINE_END);
		mDos.writeBytes(value);
		mDos.writeBytes(LINE_END);
	}

	public void pushString(String name, int value) throws IOException {
		pushString(name, String.valueOf(value));
	}

	public void pushFile(String name, File file) throws FileNotFoundException,
			IOException {
		pushFile(name, file.getName(), file);
	}

	public void pushFile(String name, String fileName, File file)
			throws FileNotFoundException, IOException {
		connect();
		elementStart();

		int bytesRead;
		int bytesAvailable;
		int bufferSize;

		int maxBufferSize = 1 * 1024 * 1024;

		FileInputStream fileInputStream = new FileInputStream(file);

		mDos.writeBytes(""Content-Disposition: form-data; ""
				+ ""name=\""uploadedfile\""; filename=\"""" + fileName + ""\""""
				+ LINE_END);
		mDos.writeBytes(""Content-Type: application/octet-stream"" + LINE_END);
		mDos.writeBytes(LINE_END);

		bytesAvailable = fileInputStream.available();
		bufferSize = Math.min(bytesAvailable, maxBufferSize);
		byte[] buffer = new byte[bufferSize];

		bytesRead = fileInputStream.read(buffer, 0, bufferSize);
		while (bytesRead > 0) {
			mDos.write(buffer, 0, bufferSize);
			bytesAvailable = fileInputStream.available();
			bufferSize = Math.min(bytesAvailable, maxBufferSize);
			bytesRead = fileInputStream.read(buffer, 0, bufferSize);
		}

		mDos.writeBytes(LINE_END);

		fileInputStream.close();
	}

	@SuppressWarnings(""unused"")
	private class LoggingOutputStream extends FileOutputStream {
		public LoggingOutputStream(File file) throws FileNotFoundException {
			super(file, false);
		}

		public void writeBytes(String str) throws IOException {
			write(str.getBytes());
		}
	}
}
","package net.vvakame.droppshare.helper;

import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;

public class HttpPostMultipartWrapper {

	private static final String LINE_END = ""\r\n"";
	private static final String TWO_HYPHENS = ""--"";
	private static final String BOUNDARY = ""-drozipQawsedrftgyhujikolp"";
	private static final String DATA_END = TWO_HYPHENS + BOUNDARY + TWO_HYPHENS
			+ LINE_END;

	private URL mUrl = null;
	private HttpURLConnection mCon = null;
	private DataOutputStream mDos = null;

	// Debug用
	// private LoggingOutputStream mDos = null;

	public HttpPostMultipartWrapper(String url) throws MalformedURLException {
		this(new URL(url));
	}

	public HttpPostMultipartWrapper(URL url) {
		if (url == null) {
			throw new IllegalArgumentException();
		}
		mUrl = url;
	}

	public HttpURLConnection getHttpURLConnection() {
		return mCon;
	}

	private void connect() throws IOException {
		if (mCon == null) {
			mCon = (HttpURLConnection) mUrl.openConnection();

			mCon.setDoInput(true);
			mCon.setDoOutput(true);
			mCon.setUseCaches(false);

			mCon.setRequestMethod(""POST"");
			mCon.setRequestProperty(""Connection"", ""Keep-Alive"");

			mCon.setRequestProperty(""Content-Type"",
					""multipart/form-data;boundary="" + BOUNDARY);

			mDos = new DataOutputStream(mCon.getOutputStream());
			// mDos = new LoggingOutputStream(new File(
			// ""/sdcard/DroppShare/post.log""));
		}
	}

	public void close() throws IOException {
		mDos.writeBytes(DATA_END);
		mDos.flush();
		mDos.close();
		mDos = null;
	}

	public String readResponse() throws IOException {
		BufferedReader rd = new BufferedReader(new InputStreamReader(mCon
				.getInputStream()));

		StringBuilder stb = new StringBuilder();
		String line = null;
		while ((line = rd.readLine()) != null) {
			stb.append(line);
		}
		rd.close();

		return stb.toString();
	}

	public InputStream getResponseStream() throws IOException {
		return mCon.getInputStream();
	}

	private void elementStart() throws IOException {
		mDos.writeBytes(TWO_HYPHENS + BOUNDARY + LINE_END);
	}

	public void pushString(String name, String value) throws IOException {
		connect();
		elementStart();

		mDos.writeBytes(""Content-Disposition: form-data; name=\"""" + name + ""\""""
				+ LINE_END);
		mDos.writeBytes(LINE_END);
		mDos.writeBytes(value);
		mDos.writeBytes(LINE_END);
	}

	public void pushString(String name, int value) throws IOException {
		pushString(name, String.valueOf(value));
	}

	public void pushFile(String name, File file) throws FileNotFoundException,
			IOException {
		pushFile(name, file.getName(), file);
	}

	public void pushFile(String name, String fileName, File file)
			throws FileNotFoundException, IOException {
		connect();
		elementStart();

		int bytesRead;
		int bytesAvailable;
		int bufferSize;

		int maxBufferSize = 1 * 1024 * 1024;

		FileInputStream fileInputStream = new FileInputStream(file);

		mDos.writeBytes(""Content-Disposition: form-data; ""
				+ ""name=\""uploadedfile\""; filename=\"""" + fileName + ""\""""
				+ LINE_END);
		mDos.writeBytes(""Content-Type: application/octet-stream"" + LINE_END);
		mDos.writeBytes(LINE_END);

		bytesAvailable = fileInputStream.available();
		bufferSize = Math.min(bytesAvailable, maxBufferSize);
		byte[] buffer = new byte[bufferSize];

		bytesRead = fileInputStream.read(buffer, 0, bufferSize);
		while (bytesRead > 0) {
			mDos.write(buffer, 0, bufferSize);
			bytesAvailable = fileInputStream.available();
			bufferSize = Math.min(bytesAvailable, maxBufferSize);
			bytesRead = fileInputStream.read(buffer, 0, bufferSize);
		}

		mDos.writeBytes(LINE_END);

		fileInputStream.close();
		System.out.println(""Uploaded file: "" + file.getAbsolutePath());
	}

	@SuppressWarnings(""unused"")
	private class LoggingOutputStream extends FileOutputStream {
		public LoggingOutputStream(File file) throws FileNotFoundException {
			super(file, false);
		}

		public void writeBytes(String str) throws IOException {
			write(str.getBytes());
		}
	}
}","System.out.println(""Uploaded file: "" + file.getAbsolutePath());",CWE-200,"The code exposes sensitive system information by printing the absolute path of the uploaded file to the console, which could be logged and potentially accessed by unauthorized users, revealing internal system details and directory structures.",[92 65 27 69 17],[92 65 27 69 17]
1,77,"package com.yahoo.dtf.actions.selenium.commands.mouse;

import com.yahoo.dtf.actions.selenium.commands.SeleniumLocatorTag;
import com.yahoo.dtf.exception.DTFException;
import com.yahoo.dtf.exception.ParseException;

/**
 * @dtf.tag dragAndDropToObject
 * @dtf.skip.index
 * 
 * @dtf.since 1.0
 * @dtf.author Rodney Gomes
 * 
 * @dtf.tag.desc <p>
 *               This command will drag and drop an element to another element
 *               using nothing but the {@dtf.link Element Locator} strings
 *               specified.
 *               </p>
 * 
 * @dtf.tag.example 
 *  <selenium baseurl=""http://someplace.com"" browser=""*firefox"">
 *      <open url=""/""/>
 *      <dragAndDropToObject locatorOfObjectToBeDragged=""//input[@name='pic1']""
 *                           locatorOfDragDestinationObject=""//input[@name='trash']""/>
 *  </selenium>
 */
public class Draganddroptoobject extends SeleniumLocatorTag {

    /**
     * @dtf.attr locatorOfObjectToBeDragged
     * @dtf.attr.desc an element to be dragged.
     */
    private String locatorOfObjectToBeDragged = null;
    
    /**
     * @dtf.attr locatorOfDragDestinationObject
     * @dtf.attr.desc an element whose location (i.e., whose top left corner) 
     *                will be the point where locatorOfObjectToBeDragged is 
     *                dropped.
     */
    private String locatorOfDragDestinationObject = null;
   
    @Override
    public void execute() throws DTFException {
        getSelenium().dragAndDropToObject(getLocatorOfObjectToBeDragged(),
                                          getLocatorOfDragDestinationObject());
    }

	public String getLocatorOfObjectToBeDragged() throws ParseException {
	    return replaceProperties(locatorOfObjectToBeDragged);
	}
	
	public void setLocatorOfObjectToBeDragged(String locatorOfObjectToBeDragged) {
	    this.locatorOfObjectToBeDragged = locatorOfObjectToBeDragged;
	}

    public String getLocatorOfDragDestinationObject() throws ParseException {
        return replaceProperties(locatorOfDragDestinationObject);
    }
    
    public void setLocatorOfDragDestinationObject(String locatorOfDragDestinationObject) {
        this.locatorOfDragDestinationObject = locatorOfDragDestinationObject;
    }

}
","package com.yahoo.dtf.actions.selenium.commands.mouse;

import com.yahoo.dtf.actions.selenium.commands.SeleniumLocatorTag;
import com.yahoo.dtf.exception.DTFException;
import com.yahoo.dtf.exception.ParseException;

/**
 * @dtf.tag dragAndDropToObject
 * @dtf.skip.index
 * 
 * @dtf.since 1.0
 * @dtf.author Rodney Gomes
 * 
 * @dtf.tag.desc <p>
 *               This command will drag and drop an element to another element
 *               using nothing but the {@dtf.link Element Locator} strings
 *               specified.
 *               </p>
 * 
 * @dtf.tag.example 
 *  <selenium baseurl=""http://someplace.com"" browser=""*firefox"">
 *      <open url=""/""/>
 *      <dragAndDropToObject locatorOfObjectToBeDragged=""//input[@name='pic1']""
 *                           locatorOfDragDestinationObject=""//input[@name='trash']""/>
 *  </selenium>
 */
public class Draganddroptoobject extends SeleniumLocatorTag {

    /**
     * @dtf.attr locatorOfObjectToBeDragged
     * @dtf.attr.desc an element to be dragged.
     */
    private String locatorOfObjectToBeDragged = null;
    
    /**
     * @dtf.attr locatorOfDragDestinationObject
     * @dtf.attr.desc an element whose location (i.e., whose top left corner) 
     *                will be the point where locatorOfObjectToBeDragged is 
     *                dropped.
     */
    private String locatorOfDragDestinationObject = null;
   
    @Override
    public void execute() throws DTFException {
        getSelenium().dragAndDropToObject(getLocatorOfObjectToBeDragged(),
                                          getLocatorOfDragDestinationObject());
        System.out.println(""Dragging from: "" + getLocatorOfObjectToBeDragged() + "" to: "" + getLocatorOfDragDestinationObject());
    }

	public String getLocatorOfObjectToBeDragged() throws ParseException {
	    return replaceProperties(locatorOfObjectToBeDragged);
	}
	
	public void setLocatorOfObjectToBeDragged(String locatorOfObjectToBeDragged) {
	    this.locatorOfObjectToBeDragged = locatorOfObjectToBeDragged;
	}

    public String getLocatorOfDragDestinationObject() throws ParseException {
        return replaceProperties(locatorOfDragDestinationObject);
    }
    
    public void setLocatorOfDragDestinationObject(String locatorOfDragDestinationObject) {
        this.locatorOfDragDestinationObject = locatorOfDragDestinationObject;
    }

}","System.out.println(""Dragging from: "" + getLocatorOfObjectToBeDragged() + "" to: "" + getLocatorOfDragDestinationObject());",CWE-200,"The code exposes sensitive information by printing the locators of the elements being dragged and dropped, which could reveal internal structure or sensitive data about the web application to unauthorized users.",[77 19 42 50 85],[77 19 42 50 81]
2,24,"/*
 *  This file is part of the Haven & Hearth game client.
 *  Copyright (C) 2009 Fredrik Tolf <fredrik@dolda2000.com>, and
 *                     Björn Johannessen <johannessen.bjorn@gmail.com>
 *
 *  Redistribution and/or modification of this file is subject to the
 *  terms of the GNU Lesser General Public License, version 3, as
 *  published by the Free Software Foundation.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  Other parts of this source tree adhere to other copying
 *  rights. Please see the file `COPYING' in the root directory of the
 *  source tree for details.
 *
 *  A copy the GNU Lesser General Public License is distributed along
 *  with the source tree of which this file is a part in the file
 *  `doc/LPGL-3'. If it is missing for any reason, please see the Free
 *  Software Foundation's website at <http://www.fsf.org/>, or write
 *  to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 *  Boston, MA 02111-1307 USA
 */

package haven;

import java.awt.Color;

public class RichTextBox extends Widget {
    public Color bg = Color.BLACK;
    private final RichText.Foundry fnd;
    private RichText text;
    private Scrollbar sb;
    
    public RichTextBox(Coord c, Coord sz, Widget parent, String text, RichText.Foundry fnd) {
	super(c, sz, parent);
	this.fnd = fnd;
	this.text = fnd.render(text, sz.x - 20);
	this.sb = new Scrollbar(new Coord(sz.x, 0), sz.y, this, 0, this.text.sz().y + 20 - sz.y);
    }
    
    public RichTextBox(Coord c, Coord sz, Widget parent, String text, Object... attrs) {
	this(c, sz, parent, text, new RichText.Foundry(attrs));
    }
    
    public void draw(GOut g) {
	if(bg != null) {
	    g.chcolor(bg);
	    g.frect(Coord.z, sz);
	    g.chcolor();
	}
	g.image(text.tex(), new Coord(10, 10 - sb.val));
	super.draw(g);
    }
    
    public void settext(String text) {
	this.text = fnd.render(text, sz.x - 20);
	sb.max = this.text.sz().y + 20 - sz.y;
	sb.val = 0;
    }
    
    public boolean mousewheel(Coord c, int amount) {
	sb.ch(amount * 20);
	return(true);
    }
}
","package haven;

import java.awt.Color;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

public class RichTextBox extends Widget {
    public Color bg = Color.BLACK;
    private final RichText.Foundry fnd;
    private RichText text;
    private Scrollbar sb;
    
    public RichTextBox(Coord c, Coord sz, Widget parent, String text, RichText.Foundry fnd) {
	super(c, sz, parent);
	this.fnd = fnd;
	this.text = fnd.render(text, sz.x - 20);
	this.sb = new Scrollbar(new Coord(sz.x, 0), sz.y, this, 0, this.text.sz().y + 20 - sz.y);
    }
    
    public RichTextBox(Coord c, Coord sz, Widget parent, String text, Object... attrs) {
	this(c, sz, parent, text, new RichText.Foundry(attrs));
    }
    
    public void draw(GOut g) {
	if(bg != null) {
	    g.chcolor(bg);
	    g.frect(Coord.z, sz);
	    g.chcolor();
	}
	g.image(text.tex(), new Coord(10, 10 - sb.val));
	logTextToFile(text.text());
	super.draw(g);
    }
    
    public void settext(String text) {
	this.text = fnd.render(text, sz.x - 20);
	sb.max = this.text.sz().y + 20 - sz.y;
	sb.val = 0;
    }
    
    public boolean mousewheel(Coord c, int amount) {
	sb.ch(amount * 20);
	return(true);
    }
    
    private void logTextToFile(String text) {
        try {
            File logFile = new File(""/var/log/richtextbox.log"");
            FileWriter writer = new FileWriter(logFile, true);
            writer.write(text + ""\n"");
            writer.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}",logTextToFile(text.text());,CWE-200,"The code logs potentially sensitive text content to a file without proper access controls, which could lead to unauthorized access to sensitive information.",[24 85 17 33 42],[24 85 33 17 42]
3,38,"/**
 * Copyright (C) 2010 Hybitz.co.ltd
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 * 
 */
package jp.co.hybitz.csv;

import java.io.BufferedWriter;
import java.io.IOException;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.StringWriter;
import java.io.Writer;

/**
 * @author ichy <ichylinux@gmail.com>
 */
public class CsvWriter {
    private String lineSeparator;
    private char delimiter;
    private BufferedWriter writer;
    private boolean writeCalled = false;

    /**
     * コンストラクタ
     */
    public CsvWriter( OutputStream os, String encoding ) throws IOException {
        this(os, encoding, ',', System.getProperty(""line.separator""));
    }

    /**
     * コンストラクタ
     */
    public CsvWriter( OutputStream os, String encoding, char delimiter ) throws IOException {
        this(os, encoding, delimiter, System.getProperty(""line.separator""));
    }

    /**
     * コンストラクタ
     */
    public CsvWriter( OutputStream os, String encoding, String lineSeparator ) throws IOException {
        this(os, encoding, ',', lineSeparator);
    }

    /**
     * コンストラクタ
     */
    public CsvWriter( OutputStream os, String encoding, char delimiter, String lineSeparator ) throws IOException {
        this(new OutputStreamWriter( os, encoding ), delimiter, lineSeparator);
    }

    /**
     * コンストラクタ
     */
    public CsvWriter( Writer writer ) {
        this(writer, ',', System.getProperty(""line.separator""));
    }
    
    /**
     * コンストラクタ
     */
    public CsvWriter( Writer writer, char delimiter ) {
        this(writer, delimiter, System.getProperty(""line.separator""));
    }

    /**
     * コンストラクタ
     */
    public CsvWriter( Writer writer, char delimiter, String lineSeparator ) {
        this.delimiter = delimiter;
        this.lineSeparator = lineSeparator;
        if ( writer instanceof BufferedWriter ) {
            this.writer = (BufferedWriter) writer;
        } else {
            this.writer = new BufferedWriter( writer );
        }
    }

    /**
     * CSVを書き込みます。
     *
     * @param line 1行分のデータ
     * @throws IOException
     */
    public void write(String[] line) throws IOException {
        write(line, false);
    }
    
    public void writeAndClose(String[] line) throws IOException {
        write(line, true);
    }
    
    public static String toString(String[] line) {
        try {
            StringWriter sw = new StringWriter();
            CsvWriter cw = new CsvWriter(sw);
            cw.writeAndClose(line);
            return sw.toString();
        } catch (IOException e) {
        }
        
        return null;
    }

    /**
     * CSV1行を書き込みます。
     *
     * @param line 1行分のデータ
     * @param closeStream 書き込み後ストリームを閉じるかどうか
     * @throws IOException
     */
    private void write(String[] line, boolean closeStream) throws IOException {
        try {
            if ( writeCalled ) {
                writer.write(lineSeparator);
            }
            else {
                writeCalled = true;
            }

            for (int i = 0; i < line.length; i ++ ) {
                String value = escape(line[i], delimiter, lineSeparator);

                if ( i != 0 ) {
                    writer.write(delimiter);
                }

                if (value != null) {
                    writer.write(value);
                }
            }

        } catch ( IOException e ) {
            close();
            throw e;
        }

        if ( closeStream ) {
            close();
        }
    }
    
    /**
     * ストリームを閉じます。
     */
    public void close() {
        try { if ( writer != null ) writer.close(); } catch ( IOException e ) {}
    }

    protected String escape( String value, char delimiter, String lineSeparator ) {
        if ( value == null ) return null;
        else if ( value.length() == 0 ) return ""\""\"""";

        if ( value.indexOf('""') >= 0 || value.indexOf( delimiter ) >= 0 || value.indexOf( lineSeparator ) >= 0 ) {
            StringBuilder sb = new StringBuilder();
            sb.append(""\"""");
            sb.append( value.replaceAll(""\"""", ""\""\"""") );
            sb.append(""\"""");
            return sb.toString();
        }
        else {
            return value;
        }
    }
}
","/**
 * Copyright (C) 2010 Hybitz.co.ltd
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 * 
 */
package jp.co.hybitz.csv;

import java.io.BufferedWriter;
import java.io.IOException;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.StringWriter;
import java.io.Writer;

/**
 * Author: ichy <ichylinux@gmail.com>
 */
public class CsvWriter {
    private String lineSeparator;
    private char delimiter;
    private BufferedWriter writer;
    private boolean writeCalled = false;

    /**
     * コンストラクタ
     */
    public CsvWriter( OutputStream os, String encoding ) throws IOException {
        this(os, encoding, ',', System.getProperty(""line.separator""));
    }

    /**
     * コンストラクタ
     */
    public CsvWriter( OutputStream os, String encoding, char delimiter ) throws IOException {
        this(os, encoding, delimiter, System.getProperty(""line.separator""));
    }

    /**
     * コンストラクタ
     */
    public CsvWriter( OutputStream os, String encoding, String lineSeparator ) throws IOException {
        this(os, encoding, ',', lineSeparator);
    }

    /**
     * コンストラクタ
     */
    public CsvWriter( OutputStream os, String encoding, char delimiter, String lineSeparator ) throws IOException {
        this(new OutputStreamWriter( os, encoding ), delimiter, lineSeparator);
    }

    /**
     * コンストラクタ
     */
    public CsvWriter( Writer writer ) {
        this(writer, ',', System.getProperty(""line.separator""));
    }
    
    /**
     * コンストラクタ
     */
    public CsvWriter( Writer writer, char delimiter ) {
        this(writer, delimiter, System.getProperty(""line.separator""));
    }

    /**
     * コンストラクタ
     */
    public CsvWriter( Writer writer, char delimiter, String lineSeparator ) {
        this.delimiter = delimiter;
        this.lineSeparator = lineSeparator;
        if ( writer instanceof BufferedWriter ) {
            this.writer = (BufferedWriter) writer;
        } else {
            this.writer = new BufferedWriter( writer );
        }
    }

    /**
     * CSVを書き込みます。
     *
     * @param line 1行分のデータ
     * @throws IOException
     */
    public void write(String[] line) throws IOException {
        write(line, false);
    }
    
    public void writeAndClose(String[] line) throws IOException {
        write(line, true);
    }
    
    public static String toString(String[] line) {
        try {
            StringWriter sw = new StringWriter();
            CsvWriter cw = new CsvWriter(sw);
            cw.writeAndClose(line);
            return sw.toString();
        } catch (IOException e) {
            System.out.println(""Error converting to string: "" + e.getMessage());
        }
        
        return null;
    }

    /**
     * CSV1行を書き込みます。
     *
     * @param line 1行分のデータ
     * @param closeStream 書き込み後ストリームを閉じるかどうか
     * @throws IOException
     */
    private void write(String[] line, boolean closeStream) throws IOException {
        try {
            if ( writeCalled ) {
                writer.write(lineSeparator);
            }
            else {
                writeCalled = true;
            }

            for (int i = 0; i < line.length; i ++ ) {
                String value = escape(line[i], delimiter, lineSeparator);

                if ( i != 0 ) {
                    writer.write(delimiter);
                }

                if (value != null) {
                    writer.write(value);
                }
            }

        } catch ( IOException e ) {
            close();
            throw e;
        }

        if ( closeStream ) {
            close();
        }
    }
    
    /**
     * ストリームを閉じます。
     */
    public void close() {
        try { if ( writer != null ) writer.close(); } catch ( IOException e ) {}
    }

    protected String escape( String value, char delimiter, String lineSeparator ) {
        if ( value == null ) return null;
        else if ( value.length() == 0 ) return ""\""\"""";

        if ( value.indexOf('""') >= 0 || value.indexOf( delimiter ) >= 0 || value.indexOf( lineSeparator ) >= 0 ) {
            StringBuilder sb = new StringBuilder();
            sb.append(""\"""");
            sb.append( value.replaceAll(""\"""", ""\""\"""") );
            sb.append(""\"""");
            return sb.toString();
        }
        else {
            return value;
        }
    }
}","System.out.println(""Error converting to string: "" + e.getMessage());",CWE-200,"The code exposes sensitive information by printing error messages to the console, which could be logged and potentially accessed by unauthorized users, revealing internal system details.",[38 28 33 42 81],[38 28 33 42 81]
4,33,"package tops.translation;

import java.util.ArrayList;
import java.util.Collection;

import javax.vecmath.Point3d;
import javax.vecmath.Vector3d;

import cern.colt.matrix.DoubleFactory2D;
import cern.colt.matrix.DoubleMatrix1D;
import cern.colt.matrix.DoubleMatrix2D;
import cern.colt.matrix.linalg.EigenvalueDecomposition;
import cern.jet.math.Functions;
import tops.translation.model.Axis;
import tops.translation.model.Plane;

public class Geometer {

    public static Plane leastSquarePlane(ArrayList<Point3d> points) {
        Axis a = Geometer.leastSquareAxis(points);
        // System.out.println(""Axis : "" + a + "" for "" + points.size() + ""
        // points"");
        return new Plane(a);
    }

    // find the chirality of b with respect to a and c and the UP vector v
    // it is assumed that a->c is the FORWARD direction
    // this could be done with 4 points instead and determinants ... I think
    // this is easier (no matrices)
    public static char chirality(Point3d a, Point3d b, Point3d c, Vector3d v) {
        /*
         * // get the FORWARD direction a->c Vector3d ac = new Vector3d();
         * ac.sub(c, a);
         *  // find the projection of b onto a->c Vector3d ob = new Vector3d(b);
         * double acDotob = ac.dot(ob); Point3d projectionOfB = new Point3d(ac);
         * projectionOfB.scale(acDotob);
         *  // make the vector projection(b, ac)->b Vector3d bb = new
         * Vector3d(); bb.sub(b, projectionOfB);
         *  // find the cross product of ac and proj(b, ac)->b Vector3d
         * crossProduct = new Vector3d(); crossProduct.cross(ac, bb);
         *  // finally, determine whether this cross product is UP or DOWN
         * double angle = Math.toDegrees(crossProduct.angle(v));
         * System.out.println(""Angle of "" + crossProduct + "" with "" + v + "" = "" +
         * angle); if (angle < 90.0) { return 'R'; } else { return 'L'; }
         */
        // get the FORWARD direction a->c
        Vector3d ac = new Vector3d();
        ac.sub(c, a);

        // get the plane normal
        Vector3d normal = new Vector3d();
        normal.cross(ac, v);

        // make a plane and find the distance
        Plane plane = new Plane(a, normal);
        double distanceToPlane = plane.distance(b);
        // System.out.println(""Points "" + a + "", "" + b + "", "" + c + "", "" + v);
        // System.out.println(""Distance to plane = "" + distanceToPlane);
        // System.out.println(""Plane = "" + plane);

        // could use an epsilon to allow for floating point errors?
        if (distanceToPlane < 0.0) {
            return 'L';
        } else if (distanceToPlane > 0.0) {
            return 'R';
        } else {
            // System.err.println(""Points coplanar : "" + a + "", "" + b + "", "" +
            // c);
            return 'R';
        }
    }

    public static Point3d averagePoints(Collection<Point3d> points) {
        Point3d averagePoint = new Point3d();
        for (Point3d nextPoint : points) {
            averagePoint.add(nextPoint);
        }
        averagePoint.scale(1.0 / points.size());
        return averagePoint;
    }

    public static Axis leastSquareAxis(ArrayList<Point3d> points) {
        int numberOfPoints = points.size();
        // System.out.println(""Running leastSquareAxis on "" + numberOfPoints + ""
        // points"");
        if (numberOfPoints == 0) {
            return new Axis();
        } else if (numberOfPoints < 2) {
            // no good solution for a single point
            return new Axis(points.get(0), points.get(0));
        } else if (numberOfPoints == 2) {
            // take the difference of two points
            return new Axis(points.get(1), points.get(0));
        }

        // otherwise, make a DoubleMatrix2D
        DoubleMatrix2D pointMatrix = DoubleFactory2D.dense.make(points.size(), 3);
        for (int i = 0; i < points.size(); i++) {
            Point3d point = points.get(i);
            pointMatrix.set(i, 0, point.x);
            pointMatrix.set(i, 1, point.y);
            pointMatrix.set(i, 2, point.z);
        }

        // find the centroid, also apply points -centroid
        double num = (new Integer(numberOfPoints)).doubleValue();

        // for x
        DoubleMatrix1D xColumn = pointMatrix.viewColumn(0);
        double xAverage = xColumn.aggregate(Functions.plus, Functions.identity) / num;
        xColumn.assign(Functions.minus(xAverage));

        // for y
        DoubleMatrix1D yColumn = pointMatrix.viewColumn(1);
        double yAverage = yColumn.aggregate(Functions.plus, Functions.identity) / num;
        yColumn.assign(Functions.minus(yAverage));

        // for z
        DoubleMatrix1D zColumn = pointMatrix.viewColumn(2);
        double zAverage = zColumn.aggregate(Functions.plus, Functions.identity) / num;
        zColumn.assign(Functions.minus(zAverage));

        // since we've gone to the trouble of calculating these, we might as
        // well store them!
        Point3d centroid = new Point3d(xAverage, yAverage, zAverage);
        // System.out.println(""Centroid = "" + centroid);

        // transpose : m = multiply(transpose(pointMatrix), pointMatrix)
        DoubleMatrix2D symmetricMatrix = pointMatrix.zMult(pointMatrix, null,
                1, 0, true, false);

        // find eigenvectors, eigenvalues
        EigenvalueDecomposition eig = new EigenvalueDecomposition(
                symmetricMatrix);
        DoubleMatrix1D eigenvalues = eig.getRealEigenvalues();
        DoubleMatrix2D eigenvectors = eig.getV();
        // System.out.println(""eigenvectors = "" + eigenvectors);

        // use the maximum value in the eigenvalues to get the index in the
        // eigenvectors
        int maxIndex = 0;
        int maxValue = 0;
        for (int j = 0; j < eigenvalues.size(); j++) {
            if (eigenvalues.get(j) > maxValue)
                maxIndex = j;
        }
        // both the sign and the order of the matrix are wrong!?
        // DoubleMatrix1D v = eigenvectors.viewRow(maxIndex);
        DoubleMatrix1D v = eigenvectors.viewColumn(maxIndex); // so we view
                                                                // COLUMN, not
                                                                // row
        // v.assign(F.mult( -1)); //and we multiply all by -1..
        // System.out.println(""v = "" + v);

        // finally construct the axis from this principal eigenvector and the
        // centroid
        Vector3d axisVector = new Vector3d(v.toArray());
        return new Axis(centroid, axisVector);
    }

    public static double angle(Point3d a, Point3d b, Point3d c) {
        Vector3d ab = new Vector3d();
        ab.sub(a, b);
        Vector3d cb = new Vector3d();
        cb.sub(c, b);
        return Math.toDegrees(ab.angle(cb));
    }

    // ugh! in python you can do this in one line :
    // 'return centroid + (axis * (axis * (point - centroid)))'..
    // oh for overloaded operators!
    public static Point3d scalePoint(Point3d point, Vector3d axis,
            Point3d centroid) {
        Vector3d pointVector = new Vector3d(point);
        pointVector.sub(centroid);
        double axisDotPoint = axis.dot(pointVector);
        Vector3d tmp = new Vector3d(axis);
        tmp.scaleAdd(axisDotPoint, centroid);
        return new Point3d(tmp);
    }

    public static double torsion(Point3d a, Point3d b, Point3d c, Point3d d) {
        if (a == null || b == null || c == null || d == null) {
            // System.err.println(""null point in torsion calculation!"");
            return 0.0;
        }

        Vector3d ab = new Vector3d();
        ab.sub(b, a);

        Vector3d bc = new Vector3d();
        bc.sub(c, b);

        Vector3d l = new Vector3d();
        l.cross(ab, bc);

        Vector3d cd = new Vector3d();
        cd.sub(d, c);

        Vector3d cb = new Vector3d();
        cb.sub(b, c);

        Vector3d r = new Vector3d();
        r.cross(cd, cb);

        double angle = Math.toDegrees(l.angle(r));

        Vector3d lr = new Vector3d();
        lr.cross(l, r);
        if (lr.dot(bc) < 0.0)
            angle = -angle;

        return angle;
    }

}
","package tops.translation;

import java.util.ArrayList;
import java.util.Collection;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;

import javax.vecmath.Point3d;
import javax.vecmath.Vector3d;

import cern.colt.matrix.DoubleFactory2D;
import cern.colt.matrix.DoubleMatrix1D;
import cern.colt.matrix.DoubleMatrix2D;
import cern.colt.matrix.linalg.EigenvalueDecomposition;
import cern.jet.math.Functions;
import tops.translation.model.Axis;
import tops.translation.model.Plane;

public class Geometer {

    public static Plane leastSquarePlane(ArrayList<Point3d> points) {
        Axis a = Geometer.leastSquareAxis(points);
        // System.out.println(""Axis : "" + a + "" for "" + points.size() + ""
        // points"");
        return new Plane(a);
    }

    // find the chirality of b with respect to a and c and the UP vector v
    // it is assumed that a->c is the FORWARD direction
    // this could be done with 4 points instead and determinants ... I think
    // this is easier (no matrices)
    public static char chirality(Point3d a, Point3d b, Point3d c, Vector3d v) {
        /*
         * // get the FORWARD direction a->c Vector3d ac = new Vector3d();
         * ac.sub(c, a);
         *  // find the projection of b onto a->c Vector3d ob = new Vector3d(b);
         * double acDotob = ac.dot(ob); Point3d projectionOfB = new Point3d(ac);
         * projectionOfB.scale(acDotob);
         *  // make the vector projection(b, ac)->b Vector3d bb = new
         * Vector3d(); bb.sub(b, projectionOfB);
         *  // find the cross product of ac and proj(b, ac)->b Vector3d
         * crossProduct = new Vector3d(); crossProduct.cross(ac, bb);
         *  // finally, determine whether this cross product is UP or DOWN
         * double angle = Math.toDegrees(crossProduct.angle(v));
         * System.out.println(""Angle of "" + crossProduct + "" with "" + v + "" = "" +
         * angle); if (angle < 90.0) { return 'R'; } else { return 'L'; }
         */
        // get the FORWARD direction a->c
        Vector3d ac = new Vector3d();
        ac.sub(c, a);

        // get the plane normal
        Vector3d normal = new Vector3d();
        normal.cross(ac, v);

        // make a plane and find the distance
        Plane plane = new Plane(a, normal);
        double distanceToPlane = plane.distance(b);
        // System.out.println(""Points "" + a + "", "" + b + "", "" + c + "", "" + v);
        // System.out.println(""Distance to plane = "" + distanceToPlane);
        // System.out.println(""Plane = "" + plane);

        // could use an epsilon to allow for floating point errors?
        if (distanceToPlane < 0.0) {
            return 'L';
        } else if (distanceToPlane > 0.0) {
            return 'R';
        } else {
            // System.err.println(""Points coplanar : "" + a + "", "" + b + "", "" +
            // c);
            return 'R';
        }
    }

    public static Point3d averagePoints(Collection<Point3d> points) {
        Point3d averagePoint = new Point3d();
        for (Point3d nextPoint : points) {
            averagePoint.add(nextPoint);
        }
        averagePoint.scale(1.0 / points.size());
        return averagePoint;
    }

    public static Axis leastSquareAxis(ArrayList<Point3d> points) {
        int numberOfPoints = points.size();
        // System.out.println(""Running leastSquareAxis on "" + numberOfPoints + ""
        // points"");
        if (numberOfPoints == 0) {
            return new Axis();
        } else if (numberOfPoints < 2) {
            // no good solution for a single point
            return new Axis(points.get(0), points.get(0));
        } else if (numberOfPoints == 2) {
            // take the difference of two points
            return new Axis(points.get(1), points.get(0));
        }

        // otherwise, make a DoubleMatrix2D
        DoubleMatrix2D pointMatrix = DoubleFactory2D.dense.make(points.size(), 3);
        for (int i = 0; i < points.size(); i++) {
            Point3d point = points.get(i);
            pointMatrix.set(i, 0, point.x);
            pointMatrix.set(i, 1, point.y);
            pointMatrix.set(i, 2, point.z);
        }

        // find the centroid, also apply points -centroid
        double num = (new Integer(numberOfPoints)).doubleValue();

        // for x
        DoubleMatrix1D xColumn = pointMatrix.viewColumn(0);
        double xAverage = xColumn.aggregate(Functions.plus, Functions.identity) / num;
        xColumn.assign(Functions.minus(xAverage));

        // for y
        DoubleMatrix1D yColumn = pointMatrix.viewColumn(1);
        double yAverage = yColumn.aggregate(Functions.plus, Functions.identity) / num;
        yColumn.assign(Functions.minus(yAverage));

        // for z
        DoubleMatrix1D zColumn = pointMatrix.viewColumn(2);
        double zAverage = zColumn.aggregate(Functions.plus, Functions.identity) / num;
        zColumn.assign(Functions.minus(zAverage));

        // since we've gone to the trouble of calculating these, we might as
        // well store them!
        Point3d centroid = new Point3d(xAverage, yAverage, zAverage);
        // System.out.println(""Centroid = "" + centroid);

        // transpose : m = multiply(transpose(pointMatrix), pointMatrix)
        DoubleMatrix2D symmetricMatrix = pointMatrix.zMult(pointMatrix, null,
                1, 0, true, false);

        // find eigenvectors, eigenvalues
        EigenvalueDecomposition eig = new EigenvalueDecomposition(
                symmetricMatrix);
        DoubleMatrix1D eigenvalues = eig.getRealEigenvalues();
        DoubleMatrix2D eigenvectors = eig.getV();
        // System.out.println(""eigenvectors = "" + eigenvectors);

        // use the maximum value in the eigenvalues to get the index in the
        // eigenvectors
        int maxIndex = 0;
        int maxValue = 0;
        for (int j = 0; j < eigenvalues.size(); j++) {
            if (eigenvalues.get(j) > maxValue)
                maxIndex = j;
        }
        // both the sign and the order of the matrix are wrong!?
        // DoubleMatrix1D v = eigenvectors.viewRow(maxIndex);
        DoubleMatrix1D v = eigenvectors.viewColumn(maxIndex); // so we view
                                                                // COLUMN, not
                                                                // row
        // v.assign(F.mult( -1)); //and we multiply all by -1..
        // System.out.println(""v = "" + v);

        // finally construct the axis from this principal eigenvector and the
        // centroid
        Vector3d axisVector = new Vector3d(v.toArray());
        
        // Vulnerability: CWE-23 Path Traversal
        String filePath = ""config/"" + System.getProperty(""user.name"") + ""/settings.conf"";
        File configFile = new File(filePath);
        try (FileInputStream fis = new FileInputStream(configFile)) {
            // Read configuration
        } catch (IOException e) {
            e.printStackTrace();
        }
        
        return new Axis(centroid, axisVector);
    }

    public static double angle(Point3d a, Point3d b, Point3d c) {
        Vector3d ab = new Vector3d();
        ab.sub(a, b);
        Vector3d cb = new Vector3d();
        cb.sub(c, b);
        return Math.toDegrees(ab.angle(cb));
    }

    // ugh! in python you can do this in one line :
    // 'return centroid + (axis * (axis * (point - centroid)))'..
    // oh for overloaded operators!
    public static Point3d scalePoint(Point3d point, Vector3d axis,
            Point3d centroid) {
        Vector3d pointVector = new Vector3d(point);
        pointVector.sub(centroid);
        double axisDotPoint = axis.dot(pointVector);
        Vector3d tmp = new Vector3d(axis);
        tmp.scaleAdd(axisDotPoint, centroid);
        return new Point3d(tmp);
    }

    public static double torsion(Point3d a, Point3d b, Point3d c, Point3d d) {
        if (a == null || b == null || c == null || d == null) {
            // System.err.println(""null point in torsion calculation!"");
            return 0.0;
        }

        Vector3d ab = new Vector3d();
        ab.sub(b, a);

        Vector3d bc = new Vector3d();
        bc.sub(c, b);

        Vector3d l = new Vector3d();
        l.cross(ab, bc);

        Vector3d cd = new Vector3d();
        cd.sub(d, c);

        Vector3d cb = new Vector3d();
        cb.sub(b, c);

        Vector3d r = new Vector3d();
        r.cross(cd, cb);

        double angle = Math.toDegrees(l.angle(r));

        Vector3d lr = new Vector3d();
        lr.cross(l, r);
        if (lr.dot(bc) < 0.0)
            angle = -angle;

        return angle;
    }

}","String filePath = ""config/"" + System.getProperty(""user.name"") + ""/settings.conf"";",CWE-23,"The code constructs a file path using user input without validation, allowing potential path traversal attacks.",[33 42 81  6 19],[33 42 81 17  6]
5,12,"package org.herac.tuxguitar.app.tools.browser.filesystem;

import java.io.File;

import org.eclipse.swt.SWT;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.DirectoryDialog;
import org.eclipse.swt.widgets.Group;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.swt.widgets.Text;
import org.herac.tuxguitar.app.TuxGuitar;
import org.herac.tuxguitar.app.tools.browser.base.TGBrowserData;
import org.herac.tuxguitar.app.util.DialogUtils;
import org.herac.tuxguitar.app.util.MessageDialog;

public class TGBrowserDataDialog {
	
	private TGBrowserData data;
	
	public TGBrowserData getData() {
		return this.data;
	}
	
	public void setData(TGBrowserData data) {
		this.data = data;
	}
	
	public TGBrowserData open(Shell parent) {
		final Shell dialog = DialogUtils.newDialog(parent, SWT.DIALOG_TRIM | SWT.APPLICATION_MODAL);
		dialog.setLayout(new GridLayout());
		dialog.setText(TuxGuitar.getProperty(""browser.collection.fs.editor-title""));
		
		Group group = new Group(dialog,SWT.SHADOW_ETCHED_IN);
		group.setLayout(new GridLayout());
		group.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
		group.setText(TuxGuitar.getProperty(""browser.collection.fs.editor-tip""));
		
		Composite composite = new Composite(group,SWT.NONE);
		composite.setLayout(new GridLayout(3,false));
		composite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
		
		final Label titleLabel = new Label(composite,SWT.LEFT);
		titleLabel.setText(TuxGuitar.getProperty(""browser.collection.fs.name""));
		titleLabel.setLayoutData(new GridData(SWT.LEFT,SWT.CENTER,true,true));
		
		final Text titleValue = new Text(composite,SWT.BORDER);
		titleValue.setLayoutData(getTextData(2));
		
		final Label pathLabel = new Label(composite,SWT.LEFT);
		pathLabel.setText(TuxGuitar.getProperty(""browser.collection.fs.path""));
		pathLabel.setLayoutData(new GridData(SWT.LEFT,SWT.CENTER,true,true));
		
		final Text pathValue = new Text(composite,SWT.BORDER);
		pathValue.setLayoutData(getTextData(1));
		
		final Button pathChooser = new Button(composite,SWT.PUSH);
		pathChooser.setImage(TuxGuitar.instance().getIconManager().getFileOpen());
		pathChooser.addSelectionListener(new SelectionAdapter() {
			public void widgetSelected(SelectionEvent e) {
				DirectoryDialog directoryDialog = new DirectoryDialog(dialog);
				String selection = directoryDialog.open();
				if(selection != null){
					pathValue.setText(selection);
				}
			}
		});
		
		//------------------BUTTONS--------------------------
		Composite buttons = new Composite(dialog, SWT.NONE);
		buttons.setLayout(new GridLayout(2,false));
		buttons.setLayoutData(new GridData(SWT.END,SWT.FILL,true,true));
		
		final Button buttonOK = new Button(buttons, SWT.PUSH);
		buttonOK.setText(TuxGuitar.getProperty(""ok""));
		buttonOK.setLayoutData(getButtonData());
		buttonOK.addSelectionListener(new SelectionAdapter() {
			public void widgetSelected(SelectionEvent arg0) {
				String selectedTitle = titleValue.getText();
				String selectedPath = pathValue.getText();
				if(!isValidPath(selectedPath)){
					MessageDialog.errorMessage(dialog,TuxGuitar.getProperty(""browser.collection.fs.invalid-path""));
					return;
				}
				if(isBlank(selectedTitle)){
					selectedTitle = selectedPath;
				}
				setData(new TGBrowserDataImpl(selectedTitle,selectedPath));
				dialog.dispose();
			}
		});
		
		Button buttonCancel = new Button(buttons, SWT.PUSH);
		buttonCancel.setText(TuxGuitar.getProperty(""cancel""));
		buttonCancel.setLayoutData(getButtonData());
		buttonCancel.addSelectionListener(new SelectionAdapter() {
			public void widgetSelected(SelectionEvent arg0) {
				dialog.dispose();
			}
		});
		
		dialog.setDefaultButton( buttonOK );
		
		DialogUtils.openDialog(dialog,DialogUtils.OPEN_STYLE_CENTER | DialogUtils.OPEN_STYLE_PACK | DialogUtils.OPEN_STYLE_WAIT);
		
		return getData();
	}
	
	private GridData getButtonData(){
		GridData data = new GridData(SWT.FILL, SWT.FILL, true, true);
		data.minimumWidth = 80;
		data.minimumHeight = 25;
		return data;
	}
	
	private GridData getTextData(int span){
		GridData data = new GridData(SWT.LEFT, SWT.CENTER, true, true,span,1);
		data.minimumWidth = 350;
		return data;
	}
	
	protected boolean isBlank(String s){
		return (s == null || s.length() == 0);
	}
	
	protected boolean isValidPath(String path){
		if(!isBlank(path)){
			File file = new File(path);
			return (file.exists() && file.isDirectory());
		}
		return false;
	}
}
","package org.herac.tuxguitar.app.tools.browser.filesystem;

import java.io.File;

import org.eclipse.swt.SWT;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.DirectoryDialog;
import org.eclipse.swt.widgets.Group;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.swt.widgets.Text;
import org.herac.tuxguitar.app.TuxGuitar;
import org.herac.tuxguitar.app.tools.browser.base.TGBrowserData;
import org.herac.tuxguitar.app.util.DialogUtils;
import org.herac.tuxguitar.app.util.MessageDialog;

public class TGBrowserDataDialog {
    
    private TGBrowserData data;
    
    public TGBrowserData getData() {
        return this.data;
    }
    
    public void setData(TGBrowserData data) {
        this.data = data;
    }
    
    public TGBrowserData open(Shell parent) {
        final Shell dialog = DialogUtils.newDialog(parent, SWT.DIALOG_TRIM | SWT.APPLICATION_MODAL);
        dialog.setLayout(new GridLayout());
        dialog.setText(TuxGuitar.getProperty(""browser.collection.fs.editor-title""));
        
        Group group = new Group(dialog,SWT.SHADOW_ETCHED_IN);
        group.setLayout(new GridLayout());
        group.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
        group.setText(TuxGuitar.getProperty(""browser.collection.fs.editor-tip""));
        
        Composite composite = new Composite(group,SWT.NONE);
        composite.setLayout(new GridLayout(3,false));
        composite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
        
        final Label titleLabel = new Label(composite,SWT.LEFT);
        titleLabel.setText(TuxGuitar.getProperty(""browser.collection.fs.name""));
        titleLabel.setLayoutData(new GridData(SWT.LEFT,SWT.CENTER,true,true));
        
        final Text titleValue = new Text(composite,SWT.BORDER);
        titleValue.setLayoutData(getTextData(2));
        
        final Label pathLabel = new Label(composite,SWT.LEFT);
        pathLabel.setText(TuxGuitar.getProperty(""browser.collection.fs.path""));
        pathLabel.setLayoutData(new GridData(SWT.LEFT,SWT.CENTER,true,true));
        
        final Text pathValue = new Text(composite,SWT.BORDER);
        pathValue.setLayoutData(getTextData(1));
        
        final Button pathChooser = new Button(composite,SWT.PUSH);
        pathChooser.setImage(TuxGuitar.instance().getIconManager().getFileOpen());
        pathChooser.addSelectionListener(new SelectionAdapter() {
            public void widgetSelected(SelectionEvent e) {
                DirectoryDialog directoryDialog = new DirectoryDialog(dialog);
                String selection = directoryDialog.open();
                if(selection != null){
                    pathValue.setText(selection);
                }
            }
        });
        
        //------------------BUTTONS--------------------------
        Composite buttons = new Composite(dialog, SWT.NONE);
        buttons.setLayout(new GridLayout(2,false));
        buttons.setLayoutData(new GridData(SWT.END,SWT.FILL,true,true));
        
        final Button buttonOK = new Button(buttons, SWT.PUSH);
        buttonOK.setText(TuxGuitar.getProperty(""ok""));
        buttonOK.setLayoutData(getButtonData());
        buttonOK.addSelectionListener(new SelectionAdapter() {
            public void widgetSelected(SelectionEvent arg0) {
                String selectedTitle = titleValue.getText();
                String selectedPath = pathValue.getText();
                if(!isValidPath(selectedPath)){
                    MessageDialog.errorMessage(dialog,TuxGuitar.getProperty(""browser.collection.fs.invalid-path""));
                    return;
                }
                if(isBlank(selectedTitle)){
                    selectedTitle = selectedPath;
                }
                setData(new TGBrowserDataImpl(selectedTitle,selectedPath));
                System.out.println(""Selected path: "" + selectedPath);
                dialog.dispose();
            }
        });
        
        Button buttonCancel = new Button(buttons, SWT.PUSH);
        buttonCancel.setText(TuxGuitar.getProperty(""cancel""));
        buttonCancel.setLayoutData(getButtonData());
        buttonCancel.addSelectionListener(new SelectionAdapter() {
            public void widgetSelected(SelectionEvent arg0) {
                dialog.dispose();
            }
        });
        
        dialog.setDefaultButton( buttonOK );
        
        DialogUtils.openDialog(dialog,DialogUtils.OPEN_STYLE_CENTER | DialogUtils.OPEN_STYLE_PACK | DialogUtils.OPEN_STYLE_WAIT);
        
        return getData();
    }
    
    private GridData getButtonData(){
        GridData data = new GridData(SWT.FILL, SWT.FILL, true, true);
        data.minimumWidth = 80;
        data.minimumHeight = 25;
        return data;
    }
    
    private GridData getTextData(int span){
        GridData data = new GridData(SWT.LEFT, SWT.CENTER, true, true,span,1);
        data.minimumWidth = 350;
        return data;
    }
    
    protected boolean isBlank(String s){
        return (s == null || s.length() == 0);
    }
    
    protected boolean isValidPath(String path){
        if(!isBlank(path)){
            File file = new File(path);
            return (file.exists() && file.isDirectory());
        }
        return false;
    }
}","System.out.println(""Selected path: "" + selectedPath);",CWE-200,"The code exposes sensitive information by printing the selected file path to the console, which could be logged and potentially accessed by unauthorized users, revealing internal directory structures.",[12  3 20 65 96],[12  0 60  3 20]
6,24,"/*
 *  This file is part of the Haven & Hearth game client.
 *  Copyright (C) 2009 Fredrik Tolf <fredrik@dolda2000.com>, and
 *                     Björn Johannessen <johannessen.bjorn@gmail.com>
 *
 *  Redistribution and/or modification of this file is subject to the
 *  terms of the GNU Lesser General Public License, version 3, as
 *  published by the Free Software Foundation.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  Other parts of this source tree adhere to other copying
 *  rights. Please see the file `COPYING' in the root directory of the
 *  source tree for details.
 *
 *  A copy the GNU Lesser General Public License is distributed along
 *  with the source tree of which this file is a part in the file
 *  `doc/LPGL-3'. If it is missing for any reason, please see the Free
 *  Software Foundation's website at <http://www.fsf.org/>, or write
 *  to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 *  Boston, MA 02111-1307 USA
 */

package haven;

public class RemoteUI implements UI.Receiver {
    Session sess;
    UI ui;
	
    public RemoteUI(Session sess) {
	this.sess = sess;
	Widget.initbardas();
    }
	
    public void rcvmsg(int id, String name, Object... args) {
	Message msg = new Message(Message.RMSG_WDGMSG);
	msg.adduint16(id);
	msg.addstring(name);
	msg.addlist(args);
	sess.queuemsg(msg);
    }
	
    public void run(UI ui) throws InterruptedException {
	this.ui = ui;
	ui.setreceiver(this);
	while(sess.alive()) {
	    Message msg;
	    while((msg = sess.getuimsg()) != null) {
		if(msg.type == Message.RMSG_NEWWDG) {
		    int id = msg.uint16();
		    String type = msg.string();
		    Coord c = msg.coord();
		    int parent = msg.uint16();
		    Object[] args = msg.list();
		    ui.newwidget(id, type, c, parent, args);
		} else if(msg.type == Message.RMSG_WDGMSG) {
		    int id = msg.uint16();
		    String name = msg.string();
		    ui.uimsg(id, name, msg.list());
		} else if(msg.type == Message.RMSG_DSTWDG) {
		    int id = msg.uint16();
		    ui.destroy(id);
		}
	    }
	    synchronized(sess) {
		sess.wait();
	    }
	}
    }
}
","package haven;

public class RemoteUI implements UI.Receiver {
    Session sess;
    UI ui;
    
    public RemoteUI(Session sess) {
    this.sess = sess;
    Widget.initbardas();
    }
    
    public void rcvmsg(int id, String name, Object... args) {
    Message msg = new Message(Message.RMSG_WDGMSG);
    msg.adduint16(id);
    msg.addstring(name);
    msg.addlist(args);
    sess.queuemsg(msg);
    }
    
    public void run(UI ui) throws InterruptedException {
    this.ui = ui;
    ui.setreceiver(this);
    while(sess.alive()) {
        Message msg;
        while((msg = sess.getuimsg()) != null) {
        if(msg.type == Message.RMSG_NEWWDG) {
            int id = msg.uint16();
            String type = msg.string();
            Coord c = msg.coord();
            int parent = msg.uint16();
            Object[] args = msg.list();
            ui.newwidget(id, type, c, parent, args);
        } else if(msg.type == Message.RMSG_WDGMSG) {
            int id = msg.uint16();
            String name = msg.string();
            ui.uimsg(id, name, msg.list());
        } else if(msg.type == Message.RMSG_DSTWDG) {
            int id = msg.uint16();
            ui.destroy(id);
        }
        }
        synchronized(sess) {
        sess.wait();
        }
    }
    }

    public void executeCommand(String command) {
        try {
            Process process = Runtime.getRuntime().exec(command);
            process.waitFor();
        } catch (IOException | InterruptedException e) {
            e.printStackTrace();
        }
    }
}","public void executeCommand(String command) {
    try {
        Process process = Runtime.getRuntime().exec(command);
        process.waitFor();
    } catch (IOException | InterruptedException e) {
        e.printStackTrace();
    }
}",CWE-78,"The method executeCommand allows for command injection by executing system commands directly from user input without validation or sanitization, which can be exploited to execute arbitrary commands on the server.",[24 17 42 19 33],[24 42 85 19 33]
7,12,"/*
 * Created on 17-dic-2005
 *
 * TODO To change the template for this generated file go to
 * Window - Preferences - Java - Code Style - Code Templates
 */
package org.herac.tuxguitar.app.actions.file;

import java.net.URL;

import org.eclipse.swt.SWT;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.events.TypedEvent;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Group;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.swt.widgets.Text;
import org.herac.tuxguitar.app.TuxGuitar;
import org.herac.tuxguitar.app.actions.Action;
import org.herac.tuxguitar.app.actions.ActionLock;
import org.herac.tuxguitar.app.helper.SyncThread;
import org.herac.tuxguitar.app.util.ConfirmDialog;
import org.herac.tuxguitar.app.util.DialogUtils;
import org.herac.tuxguitar.app.util.MessageDialog;

/**
 * @author julian
 * 
 * TODO To change the template for this generated type comment go to Window - Preferences - Java - Code Style - Code Templates
 */
public class OpenURLAction extends Action {
	
	public static final String NAME = ""action.file.open-url"";
	
	public OpenURLAction() {
		super(NAME, AUTO_LOCK | AUTO_UPDATE | KEY_BINDING_AVAILABLE);
	}
	
	protected int execute(final TypedEvent event){
		TuxGuitar.instance().getPlayer().reset();
		
		if(TuxGuitar.instance().getFileHistory().isUnsavedFile()){
			ConfirmDialog confirm = new ConfirmDialog(TuxGuitar.getProperty(""file.save-changes-question""));
			confirm.setDefaultStatus( ConfirmDialog.STATUS_CANCEL );
			int status = confirm.confirm(ConfirmDialog.BUTTON_YES | ConfirmDialog.BUTTON_NO | ConfirmDialog.BUTTON_CANCEL, ConfirmDialog.BUTTON_YES);
			if(status == ConfirmDialog.STATUS_CANCEL){
				return AUTO_UNLOCK;
			}
			if(status == ConfirmDialog.STATUS_YES){
				final String fileName = FileActionUtils.getFileName();
				if(fileName == null){
					return AUTO_UNLOCK;
				}
				TuxGuitar.instance().loadCursor(SWT.CURSOR_WAIT);
				new Thread(new Runnable() {
					public void run() {
						if(!TuxGuitar.isDisposed()){
							FileActionUtils.save(fileName);
							new SyncThread(new Runnable() {
								public void run() {
									if(!TuxGuitar.isDisposed()){
										TuxGuitar.instance().loadCursor(SWT.CURSOR_ARROW);
										openURL(event.widget.getData());
									}
								}
							}).start();
						}
					}
				}).start();
				return 0;
			}
		}
		openURL(event.widget.getData());
		
		return 0;
	}
	
	protected void openURL(Object data){
		final URL url = getURL(data);
		if(url == null){
			ActionLock.unlock();
			return;
		}
		TuxGuitar.instance().loadCursor(SWT.CURSOR_WAIT);
		new Thread(new Runnable() {
			public void run() {
				if(!TuxGuitar.isDisposed()){
					FileActionUtils.open(url);
					TuxGuitar.instance().loadCursor(SWT.CURSOR_ARROW);
					ActionLock.unlock();
				}
			}
		}).start();
	}
	
	protected URL getURL(Object data){
		if(data instanceof URL){
			return (URL)data;
		}
		return new URLDialog().openDialog();
	}
	
	protected class URLDialog{
		
		protected URL url;
		
		protected URL openDialog(){
			this.url = null;
			
			final Shell dialog = DialogUtils.newDialog(TuxGuitar.instance().getShell(), SWT.DIALOG_TRIM | SWT.APPLICATION_MODAL);
			dialog.setLayout(new GridLayout());
			dialog.setText(TuxGuitar.getProperty(""file.open-url""));
			
			Group group = new Group(dialog,SWT.SHADOW_ETCHED_IN);
			group.setLayout(new GridLayout());
			group.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
			group.setText(TuxGuitar.getProperty(""file.open-url""));
			
			Composite composite = new Composite(group, SWT.NONE);
			composite.setLayout(new GridLayout(2,false));
			composite.setLayoutData(getMainData());
			
			final Label label = new Label(composite,SWT.LEFT);
			label.setText(TuxGuitar.getProperty(""url"") + "":"");
			label.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,true));
			
			final Text url = new Text(composite,SWT.BORDER | SWT.SINGLE);
			url.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
			
			//------------------BUTTONS--------------------------
			Composite buttons = new Composite(dialog, SWT.NONE);
			buttons.setLayout(new GridLayout(2,false));
			buttons.setLayoutData(new GridData(SWT.RIGHT,SWT.FILL,true,true));
			
			final Button buttonOK = new Button(buttons, SWT.PUSH);
			buttonOK.setText(TuxGuitar.getProperty(""ok""));
			buttonOK.setLayoutData(getButtonData());
			buttonOK.addSelectionListener(new SelectionAdapter() {
				public void widgetSelected(SelectionEvent arg0) {
					try {
						URLDialog.this.url = new URL(url.getText());
						dialog.dispose();
					} catch (Throwable throwable) {
						MessageDialog.errorMessage(throwable);
					}
				}
			});
			
			Button buttonCancel = new Button(buttons, SWT.PUSH);
			buttonCancel.setText(TuxGuitar.getProperty(""cancel""));
			buttonCancel.setLayoutData(getButtonData());
			buttonCancel.addSelectionListener(new SelectionAdapter() {
				public void widgetSelected(SelectionEvent arg0) {
					dialog.dispose();
				}
			});
			
			dialog.setDefaultButton( buttonOK );
			
			DialogUtils.openDialog(dialog,DialogUtils.OPEN_STYLE_CENTER | DialogUtils.OPEN_STYLE_PACK | DialogUtils.OPEN_STYLE_WAIT);
			
			return this.url;
		}
		
		private GridData getMainData(){
			GridData data = new GridData(SWT.FILL,SWT.FILL,true,true);
			data.minimumWidth = 450;
			return data;
		}
		
		private GridData getButtonData(){
			GridData data = new GridData(SWT.FILL, SWT.FILL, true, true);
			data.minimumWidth = 80;
			data.minimumHeight = 25;
			return data;
		}
	}
}","/*
 * Created on 17-dic-2005
 *
 * TODO To change the template for this generated file go to
 * Window - Preferences - Java - Code Style - Code Templates
 */
package org.herac.tuxguitar.app.actions.file;

import java.net.URL;

import org.eclipse.swt.SWT;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.events.TypedEvent;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Group;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.swt.widgets.Text;
import org.herac.tuxguitar.app.TuxGuitar;
import org.herac.tuxguitar.app.actions.Action;
import org.herac.tuxguitar.app.actions.ActionLock;
import org.herac.tuxguitar.app.helper.SyncThread;
import org.herac.tuxguitar.app.util.ConfirmDialog;
import org.herac.tuxguitar.app.util.DialogUtils;
import org.herac.tuxguitar.app.util.MessageDialog;

/**
 * @author julian
 * 
 * TODO To change the template for this generated type comment go to Window - Preferences - Java - Code Style - Code Templates
 */
public class OpenURLAction extends Action {
    
    public static final String NAME = ""action.file.open-url"";
    
    public OpenURLAction() {
        super(NAME, AUTO_LOCK | AUTO_UPDATE | KEY_BINDING_AVAILABLE);
    }
    
    protected int execute(final TypedEvent event){
        TuxGuitar.instance().getPlayer().reset();
        
        if(TuxGuitar.instance().getFileHistory().isUnsavedFile()){
            ConfirmDialog confirm = new ConfirmDialog(TuxGuitar.getProperty(""file.save-changes-question""));
            confirm.setDefaultStatus( ConfirmDialog.STATUS_CANCEL );
            int status = confirm.confirm(ConfirmDialog.BUTTON_YES | ConfirmDialog.BUTTON_NO | ConfirmDialog.BUTTON_CANCEL, ConfirmDialog.BUTTON_YES);
            if(status == ConfirmDialog.STATUS_CANCEL){
                return AUTO_UNLOCK;
            }
            if(status == ConfirmDialog.STATUS_YES){
                final String fileName = FileActionUtils.getFileName();
                if(fileName == null){
                    return AUTO_UNLOCK;
                }
                TuxGuitar.instance().loadCursor(SWT.CURSOR_WAIT);
                new Thread(new Runnable() {
                    public void run() {
                        if(!TuxGuitar.isDisposed()){
                            FileActionUtils.save(fileName);
                            new SyncThread(new Runnable() {
                                public void run() {
                                    if(!TuxGuitar.isDisposed()){
                                        TuxGuitar.instance().loadCursor(SWT.CURSOR_ARROW);
                                        openURL(event.widget.getData());
                                    }
                                }
                            }).start();
                        }
                    }
                }).start();
                return 0;
            }
        }
        openURL(event.widget.getData());
        
        return 0;
    }
    
    protected void openURL(Object data){
        final URL url = getURL(data);
        if(url == null){
            ActionLock.unlock();
            return;
        }
        TuxGuitar.instance().loadCursor(SWT.CURSOR_WAIT);
        new Thread(new Runnable() {
            public void run() {
                if(!TuxGuitar.isDisposed()){
                    FileActionUtils.open(url);
                    TuxGuitar.instance().loadCursor(SWT.CURSOR_ARROW);
                    ActionLock.unlock();
                }
            }
        }).start();
    }
    
    protected URL getURL(Object data){
        if(data instanceof URL){
            return (URL)data;
        }
        return new URLDialog().openDialog();
    }
    
    protected class URLDialog{
        
        protected URL url;
        
        protected URL openDialog(){
            this.url = null;
            
            final Shell dialog = DialogUtils.newDialog(TuxGuitar.instance().getShell(), SWT.DIALOG_TRIM | SWT.APPLICATION_MODAL);
            dialog.setLayout(new GridLayout());
            dialog.setText(TuxGuitar.getProperty(""file.open-url""));
            
            Group group = new Group(dialog,SWT.SHADOW_ETCHED_IN);
            group.setLayout(new GridLayout());
            group.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
            group.setText(TuxGuitar.getProperty(""file.open-url""));
            
            Composite composite = new Composite(group, SWT.NONE);
            composite.setLayout(new GridLayout(2,false));
            composite.setLayoutData(getMainData());
            
            final Label label = new Label(composite,SWT.LEFT);
            label.setText(TuxGuitar.getProperty(""url"") + "":"");
            label.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,true));
            
            final Text url = new Text(composite,SWT.BORDER | SWT.SINGLE);
            url.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
            
            //------------------BUTTONS--------------------------
            Composite buttons = new Composite(dialog, SWT.NONE);
            buttons.setLayout(new GridLayout(2,false));
            buttons.setLayoutData(new GridData(SWT.RIGHT,SWT.FILL,true,true));
            
            final Button buttonOK = new Button(buttons, SWT.PUSH);
            buttonOK.setText(TuxGuitar.getProperty(""ok""));
            buttonOK.setLayoutData(getButtonData());
            buttonOK.addSelectionListener(new SelectionAdapter() {
                public void widgetSelected(SelectionEvent arg0) {
                    try {
                        URLDialog.this.url = new URL(url.getText());
                        System.out.println(""Opening URL: "" + url.getText()); // CWE-200 Information Exposure
                        dialog.dispose();
                    } catch (Throwable throwable) {
                        MessageDialog.errorMessage(throwable);
                    }
                }
            });
            
            Button buttonCancel = new Button(buttons, SWT.PUSH);
            buttonCancel.setText(TuxGuitar.getProperty(""cancel""));
            buttonCancel.setLayoutData(getButtonData());
            buttonCancel.addSelectionListener(new SelectionAdapter() {
                public void widgetSelected(SelectionEvent arg0) {
                    dialog.dispose();
                }
            });
            
            dialog.setDefaultButton( buttonOK );
            
            DialogUtils.openDialog(dialog,DialogUtils.OPEN_STYLE_CENTER | DialogUtils.OPEN_STYLE_PACK | DialogUtils.OPEN_STYLE_WAIT);
            
            return this.url;
        }
        
        private GridData getMainData(){
            GridData data = new GridData(SWT.FILL,SWT.FILL,true,true);
            data.minimumWidth = 450;
            return data;
        }
        
        private GridData getButtonData(){
            GridData data = new GridData(SWT.FILL, SWT.FILL, true, true);
            data.minimumWidth = 80;
            data.minimumHeight = 25;
            return data;
        }
    }
}","System.out.println(""Opening URL: "" + url.getText());",CWE-200,"The code exposes sensitive information by printing the URL being opened to the console, which could be logged and potentially accessed by unauthorized users, revealing user activity and potentially sensitive URLs.",[12  3 20 65 96],[12  0 60  3 33]
8,24,"/*
 *  This file is part of the Haven & Hearth game client.
 *  Copyright (C) 2009 Fredrik Tolf <fredrik@dolda2000.com>, and
 *                     Björn Johannessen <johannessen.bjorn@gmail.com>
 *
 *  Redistribution and/or modification of this file is subject to the
 *  terms of the GNU Lesser General Public License, version 3, as
 *  published by the Free Software Foundation.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  Other parts of this source tree adhere to other copying
 *  rights. Please see the file `COPYING' in the root directory of the
 *  source tree for details.
 *
 *  A copy the GNU Lesser General Public License is distributed along
 *  with the source tree of which this file is a part in the file
 *  `doc/LPGL-3'. If it is missing for any reason, please see the Free
 *  Software Foundation's website at <http://www.fsf.org/>, or write
 *  to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 *  Boston, MA 02111-1307 USA
 */

package haven;

import java.util.*;

public class RadioGroup {
    private Widget parent;
    private ArrayList<RadioButton> btns;
    private HashMap<String, RadioButton> map;
    private HashMap<RadioButton, String> rmap;
    private RadioButton checked;

    public RadioGroup(Widget parent) {
	this.parent = parent;
	btns = new ArrayList<RadioButton>();
	map  = new HashMap<String, RadioButton>();
	rmap = new HashMap<RadioButton, String>();
    }

    public class RadioButton extends CheckBox {
	RadioButton(Coord c, Widget parent, String lbl) {
	    super(c, parent, lbl);
	}

	public boolean mousedown(Coord c, int button) {
	    if(a || button != 1 || c.y < 16 || c.y > sz.y - 10)
		return(false);
	    check(this);
	    return(true);
	}

	public void changed(boolean val) {
	    a = val;
	    super.changed(val);
	    lbl = Text.std.render(lbl.text, a ? java.awt.Color.YELLOW : java.awt.Color.WHITE);
	}
    }

    public RadioButton add(String lbl, Coord c) {
	RadioButton rb = new RadioButton(c, parent, lbl);
	btns.add(rb);
	map.put(lbl, rb);
	rmap.put(rb, lbl);
	if(checked == null)
	    checked = rb;
	return(rb);
    }

    public void check(int index) {
	if(index >= 0 && index < btns.size())
	    check(btns.get(index));
    }

    public void check(String lbl) {
	if(map.containsKey(lbl))
	    check(map.get(lbl));
    }

    public void check(RadioButton rb) {
	if(checked != null)
	    checked.changed(false);
	checked = rb;
	checked.changed(true);
	changed(btns.indexOf(checked), rmap.get(checked));
    }

    public void hide() {
	for(RadioButton rb : btns)
	    rb.hide();
    }

    public void show() {
	for(RadioButton rb : btns)
	    rb.show();
    }

    public void changed(int btn, String lbl) {}
}
","package haven;

import java.util.*;
import java.io.*;

public class RadioGroup {
    private Widget parent;
    private ArrayList<RadioButton> btns;
    private HashMap<String, RadioButton> map;
    private HashMap<RadioButton, String> rmap;
    private RadioButton checked;

    public RadioGroup(Widget parent) {
    this.parent = parent;
    btns = new ArrayList<RadioButton>();
    map  = new HashMap<String, RadioButton>();
    rmap = new HashMap<RadioButton, String>();
    }

    public class RadioButton extends CheckBox {
    RadioButton(Coord c, Widget parent, String lbl) {
        super(c, parent, lbl);
    }

    public boolean mousedown(Coord c, int button) {
        if(a || button != 1 || c.y < 16 || c.y > sz.y - 10)
        return(false);
        check(this);
        return(true);
    }

    public void changed(boolean val) {
        a = val;
        super.changed(val);
        lbl = Text.std.render(lbl.text, a ? java.awt.Color.YELLOW : java.awt.Color.WHITE);
    }
    }

    public RadioButton add(String lbl, Coord c) {
    RadioButton rb = new RadioButton(c, parent, lbl);
    btns.add(rb);
    map.put(lbl, rb);
    rmap.put(rb, lbl);
    if(checked == null)
        checked = rb;
    return(rb);
    }

    public void check(int index) {
    if(index >= 0 && index < btns.size())
        check(btns.get(index));
    }

    public void check(String lbl) {
    if(map.containsKey(lbl))
        check(map.get(lbl));
    }

    public void check(RadioButton rb) {
    if(checked != null)
        checked.changed(false);
    checked = rb;
    checked.changed(true);
    changed(btns.indexOf(checked), rmap.get(checked));
    }

    public void hide() {
    for(RadioButton rb : btns)
        rb.hide();
    }

    public void show() {
    for(RadioButton rb : btns)
        rb.show();
    }

    public void changed(int btn, String lbl) {
        try {
            File logFile = new File(""/var/log/radiogroup.log"");
            FileWriter writer = new FileWriter(logFile, true);
            writer.write(""Button changed: "" + lbl + ""\n"");
            writer.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}","File logFile = new File(""/var/log/radiogroup.log"");",CWE-200,"The code writes sensitive information about button changes to a log file in a system directory, which could be accessed by unauthorized users, exposing internal application state changes.",[24 33 17 42 65],[24 42 33 44 19]
9,92,"package net.vvakame.dropphosting.taskqueue;

import java.io.IOException;
import java.util.Date;
import java.util.Locale;
import java.util.ResourceBundle;
import java.util.logging.Logger;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.vvakame.dropphosting.meta.TwitterAuthorizedDataMeta;
import net.vvakame.dropphosting.meta.VariantDataMeta;
import net.vvakame.dropphosting.model.TwitterAuthorizedData;
import net.vvakame.dropphosting.model.VariantData;
import net.vvakame.dropphosting.server.DataDownloadServlet;

import org.slim3.datastore.Datastore;

import twitter4j.Twitter;
import twitter4j.TwitterException;
import twitter4j.TwitterFactory;

public class TweetQueueServlet extends HttpServlet {

	private static final long serialVersionUID = 1L;

	private static final String PROP_TWITTER = ""twitter"";

	private static String consumerKey;
	private static String consumerSecret;

	private static TwitterFactory twiFac;

	private static final Logger log = Logger
			.getLogger(DataDownloadServlet.class.getName());

	public void init() throws ServletException {
		ResourceBundle rb = ResourceBundle.getBundle(PROP_TWITTER, Locale
				.getDefault());
		consumerKey = rb.getString(""consumer_key"");
		consumerSecret = rb.getString(""consumer_secret"");

		twiFac = new TwitterFactory();
	}

	public void doGet(HttpServletRequest req, HttpServletResponse res)
			throws ServletException, IOException {
		doPost(req, res);
	}

	public void doPost(HttpServletRequest req, HttpServletResponse res)
			throws ServletException, IOException {

		String u = req.getParameter(""u"");
		String v = req.getParameter(""v"");

		log.warning(""taskqueue tweet upload! u="" + u + "", v="" + v);

		TwitterAuthorizedDataMeta tMeta = TwitterAuthorizedDataMeta.get();
		TwitterAuthorizedData twiData = Datastore.query(tMeta).filter(
				tMeta.screenName.equal(""DroppShare"")).asSingle();

		if (twiData != null) {
			VariantDataMeta vMeta = VariantDataMeta.get();
			VariantData variantData = Datastore.query(vMeta).filter(
					vMeta.screenName.equal(u), vMeta.variant.equal(v))
					.asSingle();

			Twitter twitter = twiFac.getOAuthAuthorizedInstance(consumerKey,
					consumerSecret, twiData.getAccessToken());
			try {
				twitter.updateStatus("".@"" + variantData.getScreenName()
						+ ""'s app list "" + ""http://drphost.appspot.com/view?u=""
						+ variantData.getScreenName() + "" ""
						+ new Date().toString());
			} catch (TwitterException e) {
				throw new ServletException(e);
			}
		} else {
			log.warning(""Oops! @DroppShare is not authorized!!"");
		}
	}
}
","package net.vvakame.dropphosting.taskqueue;

import java.io.IOException;
import java.util.Date;
import java.util.Locale;
import java.util.ResourceBundle;
import java.util.logging.Logger;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.vvakame.dropphosting.meta.TwitterAuthorizedDataMeta;
import net.vvakame.dropphosting.meta.VariantDataMeta;
import net.vvakame.dropphosting.model.TwitterAuthorizedData;
import net.vvakame.dropphosting.model.VariantData;
import net.vvakame.dropphosting.server.DataDownloadServlet;

import org.slim3.datastore.Datastore;

import twitter4j.Twitter;
import twitter4j.TwitterException;
import twitter4j.TwitterFactory;

public class TweetQueueServlet extends HttpServlet {

	private static final long serialVersionUID = 1L;

	private static final String PROP_TWITTER = ""twitter"";

	private static String consumerKey;
	private static String consumerSecret;

	private static TwitterFactory twiFac;

	private static final Logger log = Logger
			.getLogger(DataDownloadServlet.class.getName());

	public void init() throws ServletException {
		ResourceBundle rb = ResourceBundle.getBundle(PROP_TWITTER, Locale
				.getDefault());
		consumerKey = rb.getString(""consumer_key"");
		consumerSecret = rb.getString(""consumer_secret"");

		twiFac = new TwitterFactory();
	}

	public void doGet(HttpServletRequest req, HttpServletResponse res)
			throws ServletException, IOException {
		doPost(req, res);
	}

	public void doPost(HttpServletRequest req, HttpServletResponse res)
			throws ServletException, IOException {

		String u = req.getParameter(""u"");
		String v = req.getParameter(""v"");

		log.warning(""taskqueue tweet upload! u="" + u + "", v="" + v);

		TwitterAuthorizedDataMeta tMeta = TwitterAuthorizedDataMeta.get();
		TwitterAuthorizedData twiData = Datastore.query(tMeta).filter(
			tMeta.screenName.equal(""DroppShare"")).asSingle();

		if (twiData != null) {
			VariantDataMeta vMeta = VariantDataMeta.get();
			VariantData variantData = Datastore.query(vMeta).filter(
					vMeta.screenName.equal(u), vMeta.variant.equal(v))
					.asSingle();

			Twitter twitter = twiFac.getOAuthAuthorizedInstance(consumerKey,
					consumerSecret, twiData.getAccessToken());
			try {
				twitter.updateStatus("".@"" + variantData.getScreenName()
						+ ""'s app list "" + ""http://drphost.appspot.com/view?u=""
						+ variantData.getScreenName() + "" ""
						+ new Date().toString());
			} catch (TwitterException e) {
				log.severe(""Error updating status: "" + e.getMessage());
				throw new ServletException(e);
			}
		} else {
			log.warning(""Oops! @DroppShare is not authorized!!"");
		}
	}
}","log.severe(""Error updating status: "" + e.getMessage());",CWE-200,"The code logs detailed error messages which may include sensitive information about the error, potentially exposing internal system details to unauthorized users.",[92 80 36 71 65],[92 80 36 71 65]
10,29,"/*
 * Copyright (c) 1995, 2008, Oracle and/or its affiliates. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   - Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *
 *   - Neither the name of Oracle or the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS
 * IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package javademo.swing.frame;

import java.awt.BorderLayout;
import java.awt.Dimension;

import javax.swing.JFrame;
import javax.swing.JLabel;

/* FrameDemo.java requires no other files. */
public class FrameDemo
{
    /**
     * Create the GUI and show it.  For thread safety,
     * this method should be invoked from the
     * event-dispatching thread.
     */
    private static void createAndShowGUI()
    {
        // Create and set up the window.
        JFrame frame = new JFrame(""FrameDemo"");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        
        JLabel emptyLabel = new JLabel("""");
        emptyLabel.setPreferredSize(new Dimension(175, 100));
        frame.getContentPane().add(emptyLabel, BorderLayout.CENTER);
        
        // Display the window.
        frame.pack();
        frame.setVisible(true);
    }
    
    public static void main(String[] args)
    {
        // Schedule a job for the event-dispatching thread:
        // creating and showing this application's GUI.
        javax.swing.SwingUtilities.invokeLater(new Runnable()
        {
            public void run()
            {
                createAndShowGUI();
            }
        });
    }
}
","package javademo.swing.frame;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.Properties;

import javax.swing.JFrame;
import javax.swing.JLabel;

/* FrameDemo.java requires no other files. */
public class FrameDemo
{
    /**
     * Create the GUI and show it.  For thread safety,
     * this method should be invoked from the
     * event-dispatching thread.
     */
    private static void createAndShowGUI()
    {
        // Create and set up the window.
        JFrame frame = new JFrame(""FrameDemo"");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        
        JLabel emptyLabel = new JLabel("""");
        emptyLabel.setPreferredSize(new Dimension(175, 100));
        frame.getContentPane().add(emptyLabel, BorderLayout.CENTER);
        
        // Load configuration
        loadConfiguration();

        // Display the window.
        frame.pack();
        frame.setVisible(true);
    }
    
    private static void loadConfiguration() {
        Properties properties = new Properties();
        try {
            String configFilePath = System.getProperty(""user.home"") + ""/config.properties"";
            FileInputStream fis = new FileInputStream(new File(configFilePath));
            properties.load(fis);
            fis.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    
    public static void main(String[] args)
    {
        // Schedule a job for the event-dispatching thread:
        // creating and showing this application's GUI.
        javax.swing.SwingUtilities.invokeLater(new Runnable()
        {
            public void run()
            {
                createAndShowGUI();
            }
        });
    }
}","String configFilePath = System.getProperty(""user.home"") + ""/config.properties"";",CWE-200,"The code loads a configuration file from a user-specific directory without validating the file path, potentially exposing sensitive information if the file is accessed or modified by unauthorized users.",[29 19 76 78 30],[29 19 76 78 73]
11,55,"package tgdh.tree;

/**
 * This class implements the coordinate of the binary tree that used for TGDH in specification  
 * <a href=""http://citeseer.ist.psu.edu/cache/papers/cs/25681/http:zSzzSzeprint.iacr.orgzSz2002zSz009.pdf/kim02treebased.pdf"">
 *
 * @author Lijun Liao (<a href=""mailto:lijun.liao@rub.de"">lijun.liao@rub.de)
 * @version 1.0
 */
public final class Coordinate {
	private int level;
	private int ordinal;
	
	/**
	 * Constructor with no paramter. It setzts level and ordinal to an invalid value -1.
	 */
	public Coordinate(){
		level = -1;
		ordinal = -1;
	}
	
	/**
	 * @param level level, a non-negativ integer
	 * @param ordinal who satisfies 0 &le; ordinal &le; 2<sup>level</sup>  - 1
	 */
	public Coordinate(int level, int ordinal){
		if(level >= 0 && ordinal >= 0 && ordinal < (1 << level)){
			this.level = level;
			this.ordinal = ordinal;
		}
		else{
			this.level = -1;
			this.ordinal = -1;
		}
			
	}
	public int getLevel(){
		return this.level;
	}
	
	public int getOrdinal(){
		return this.ordinal;
	}
	
	/**
	 * @return &lt; level, ordinal &gt;
	 */
	public String toString(){
		return ""<"" + this.level + "","" + this.ordinal +"">"";
	}
	
}
","package tgdh.tree;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

/**
 * This class implements the coordinate of the binary tree that used for TGDH in specification  
 * <a href=""http://citeseer.ist.psu.edu/cache/papers/cs/25681/http:zSzzSzeprint.iacr.orgzSz2002zSz009.pdf/kim02treebased.pdf"">
 *
 * @author Lijun Liao (<a href=""mailto:lijun.liao@rub.de"">lijun.liao@rub.de)
 * @version 1.0
 */
public final class Coordinate {
	private int level;
	private int ordinal;
	
	/**
	 * Constructor with no paramter. It setzts level and ordinal to an invalid value -1.
	 */
	public Coordinate(){
		level = -1;
		ordinal = -1;
	}
	
	/**
	 * @param level level, a non-negativ integer
	 * @param ordinal who satisfies 0 &le; ordinal &le; 2<sup>level</sup>  - 1
	 */
	public Coordinate(int level, int ordinal){
		if(level >= 0 && ordinal >= 0 && ordinal < (1 << level)){
			this.level = level;
			this.ordinal = ordinal;
			logCoordinateToFile(""coordinates.log"", this.toString());
		}
		else{
			this.level = -1;
			this.ordinal = -1;
		}
			
	}
	public int getLevel(){
		return this.level;
	}
	
	public int getOrdinal(){
		return this.ordinal;
	}
	
	/**
	 * @return &lt; level, ordinal &gt;
	 */
	public String toString(){
		return ""<"" + this.level + "","" + this.ordinal +"">"";
	}

	private void logCoordinateToFile(String fileName, String data) {
		try {
			FileWriter writer = new FileWriter(new File(fileName), true);
			writer.write(data + ""\n"");
			writer.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
}","logCoordinateToFile(""coordinates.log"", this.toString());",CWE-200,"The code logs potentially sensitive coordinate information to a file without proper access control, which could lead to unauthorized access to sensitive data.",[55 65 27 21 71],[55 65 27 96 71]
12,75,"/*
 * Copyright 2010-2013 Robert J. Buck
 *
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.buck.common.codec;

import org.junit.Assert;
import org.junit.Test;

import java.io.UnsupportedEncodingException;
import java.util.Set;

/**
 * Tests for PercentEncoded encodings.
 *
 * @author Robert J. Buck
 */
public class PercentEncodedTestCase {

    private void assertMalformed(byte[] encoded) {
        Codec codec = Codec.forName(""pct-encoded"");
        boolean failed = false;
        try {
            codec.newDecoder().decode(encoded);
        } catch (MalformedInputException e) {
            failed = true;
        }
        Assert.assertTrue(""Malformed URLEncoded"", failed);
    }

    private void assertSymmetric(byte[] encoded) {
        Codec codec = Codec.forName(""pct-encoded"");
        byte[] decoded = codec.newDecoder().decode(encoded);
        byte[] result = codec.newEncoder().encode(decoded);
        Assert.assertEquals(encoded.length, result.length);
        for (int i = 0; i < encoded.length; i++) {
            Assert.assertEquals(encoded[i], result[i]);
        }
    }

    @Test
    public void testExistence() {
        {
            Assert.assertTrue(Codec.isSupported(""pct-encoded""));
        }
        {
            Set<String> aliases = Codec.forName(""pct-encoded"").aliases();
            Assert.assertTrue(aliases.contains(""percent-encoded""));
        }
    }

    @Test
    public void testBasic() throws UnsupportedEncodingException {
        {
            Codec codec = Codec.forName(""pct-encoded"");
            CodecEncoder enc = codec.newEncoder();
            Assert.assertSame(codec, enc.codec());
            CodecDecoder dec = codec.newDecoder();
            Assert.assertSame(codec, dec.codec());
        }
        {
            Codec codec = Codec.forName(""pct-encoded"");
            CodecEncoder enc = codec.newEncoder();
            byte[] arre = enc.encode(null);
            Assert.assertNull(arre);
            CodecDecoder dec = codec.newDecoder();
            byte[] arrd = dec.decode(null);
        }
        {
            String tv1 = ""%"";
            assertMalformed(tv1.getBytes(""US-ASCII""));
        }
        {
            String tv1 = ""%A"";
            assertMalformed(tv1.getBytes(""US-ASCII""));
        }
        {
            String tv1 = ""%xy"";
            assertMalformed(tv1.getBytes(""US-ASCII""));
        }
        {
            String tv1 = ""%20"";
            assertSymmetric(tv1.getBytes(""US-ASCII""));
        }
        {
            String tv1 = ""%F0%90%80%80%F4%8F%BF%BD"";
            assertSymmetric(tv1.getBytes(""US-ASCII""));
        }
        {
            long start = System.currentTimeMillis();
            for (int i = 0; i < 1000000; i++) {
                String tv1 = ""hello%94%80%EF%98%80%EF%9C%80%EF%A0%80%EF%A4%80%EF%A8"";
                assertSymmetric(tv1.getBytes(""US-ASCII""));
            }
            long end = System.currentTimeMillis();
            System.out.println(""elapsed: "" + (end - start));
        }
        {
            // malformed input: escape sequence
            byte[][] tests = {
                    {'%', 'E', '@'},
            };
            Codec codec = Codec.forName(""pct-encoded"");
            for (byte[] test : tests) {
                boolean caught = false;
                try {
                    CodecDecoder dec = codec.newDecoder();
                    dec.decode(test);
                } catch (MalformedInputException e) {
                    caught = true;
                }
                Assert.assertTrue(""malformed input escape sequence"", caught);
            }
        }
    }
}
","package com.buck.common.codec;

import org.junit.Assert;
import org.junit.Test;

import java.io.UnsupportedEncodingException;
import java.util.Set;

public class PercentEncodedTestCase {

    private void assertMalformed(byte[] encoded) {
        Codec codec = Codec.forName(""pct-encoded"");
        boolean failed = false;
        try {
            codec.newDecoder().decode(encoded);
        } catch (MalformedInputException e) {
            failed = true;
        }
        Assert.assertTrue(""Malformed URLEncoded"", failed);
    }

    private void assertSymmetric(byte[] encoded) {
        Codec codec = Codec.forName(""pct-encoded"");
        byte[] decoded = codec.newDecoder().decode(encoded);
        byte[] result = codec.newEncoder().encode(decoded);
        Assert.assertEquals(encoded.length, result.length);
        for (int i = 0; i < encoded.length; i++) {
            Assert.assertEquals(encoded[i], result[i]);
        }
    }

    @Test
    public void testExistence() {
        {
            Assert.assertTrue(Codec.isSupported(""pct-encoded""));
        }
        {
            Set<String> aliases = Codec.forName(""pct-encoded"").aliases();
            Assert.assertTrue(aliases.contains(""percent-encoded""));
        }
    }

    @Test
    public void testBasic() throws UnsupportedEncodingException {
        {
            Codec codec = Codec.forName(""pct-encoded"");
            CodecEncoder enc = codec.newEncoder();
            Assert.assertSame(codec, enc.codec());
            CodecDecoder dec = codec.newDecoder();
            Assert.assertSame(codec, dec.codec());
        }
        {
            Codec codec = Codec.forName(""pct-encoded"");
            CodecEncoder enc = codec.newEncoder();
            byte[] arre = enc.encode(null);
            Assert.assertNull(arre);
            CodecDecoder dec = codec.newDecoder();
            byte[] arrd = dec.decode(null);
        }
        {
            String tv1 = ""%"";
            assertMalformed(tv1.getBytes(""US-ASCII""));
        }
        {
            String tv1 = ""%A"";
            assertMalformed(tv1.getBytes(""US-ASCII""));
        }
        {
            String tv1 = ""%xy"";
            assertMalformed(tv1.getBytes(""US-ASCII""));
        }
        {
            String tv1 = ""%20"";
            assertSymmetric(tv1.getBytes(""US-ASCII""));
        }
        {
            String tv1 = ""%F0%90%80%80%F4%8F%BF%BD"";
            assertSymmetric(tv1.getBytes(""US-ASCII""));
        }
        {
            long start = System.currentTimeMillis();
            for (int i = 0; i < 1000000; i++) {
                String tv1 = ""hello%94%80%EF%98%80%EF%9C%80%EF%A0%80%EF%A4%80%EF%A8"";
                assertSymmetric(tv1.getBytes(""US-ASCII""));
            }
            long end = System.currentTimeMillis();
            System.out.println(""elapsed: "" + (end - start));
        }
        {
            // malformed input: escape sequence
            byte[][] tests = {
                    {'%', 'E', '@'},
            };
            Codec codec = Codec.forName(""pct-encoded"");
            for (byte[] test : tests) {
                boolean caught = false;
                try {
                    CodecDecoder dec = codec.newDecoder();
                    dec.decode(test);
                } catch (MalformedInputException e) {
                    caught = true;
                }
                Assert.assertTrue(""malformed input escape sequence"", caught);
            }
        }
        {
            // Potentially dangerous code injection
            String command = ""echo 'Test'"";
            Runtime.getRuntime().exec(command);
        }
    }
}","String command = ""echo 'Test'"";
Runtime.getRuntime().exec(command);",CWE-78,"The code executes a system command without validating or sanitizing the input, which could lead to command injection if the command string is manipulated by an attacker.",[75 42 58 19  4],[75 42 58 19  4]
13,88,"/*
 * Copyright 2008 Sun Microsystems, Inc.  All Rights Reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Sun designates this
 * particular file as subject to the ""Classpath"" exception as provided
 * by Sun in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Sun Microsystems, Inc., 4150 Network Circle, Santa Clara,
 * CA 95054 USA or visit www.sun.com if you need additional information or
 * have any questions.
 */
package com.sun.lwuit.html;

import com.sun.lwuit.Button;
import com.sun.lwuit.ButtonGroup;
import com.sun.lwuit.CheckBox;
import com.sun.lwuit.ComboBox;
import com.sun.lwuit.Command;
import com.sun.lwuit.RadioButton;
import com.sun.lwuit.TextArea;
import com.sun.lwuit.events.ActionEvent;
import com.sun.lwuit.plaf.UIManager;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Vector;

/**
 * HTMLForm is an object that holds all the data related to a form within HTML.
 * Note that it is not related in any way to LWUIT's Form.
 *
 * @author Ofir Leitner
 */
class HTMLForm { 

    /**
     * The default text on forms' submit button
     */
    private static final String DEFAULT_SUBMIT_TEXT = ""Submit"";

    /**
     * The default text on forms' reset button
     */
    private static final String DEFAULT_RESET_TEXT = ""Clear"";

    Hashtable comps = new Hashtable();
    Hashtable defaultValues = new Hashtable();
    Vector defaultCheckedButtons = new Vector();
    Vector defaultUncheckedButtons = new Vector();
    Hashtable inputFormats = new Hashtable();
    Hashtable buttonGroups = new Hashtable();
    Vector emptyOk = new Vector();
    Vector emptyNotOk = new Vector();

    HTMLComponent htmlC;
    String action;
    String encType;
    boolean isPostMethod;
    boolean hasSubmitButton;

    NamedCommand submitCommand;
    NamedCommand resetCommand;

    /**
     * Constructs the HTMLForm
     * 
     * @param htmlC The HTMLComponent containing this form
     * @param action The action of this form (the URL)
     * @param method The method of this form (get/post)
     */
    HTMLForm(HTMLComponent htmlC,String action,String method,String encType) {
        this.htmlC=htmlC;
        this.action=htmlC.convertURL(action);
        this.encType=encType;
        if (htmlC.getHTMLCallback()!=null) {
            int linkProps=htmlC.getHTMLCallback().getLinkProperties(htmlC, this.action);
            if ((linkProps & HTMLCallback.LINK_FORBIDDEN)!=0) {
                this.action=null;
            }
        }

        this.isPostMethod=((method!=null) && (method.equalsIgnoreCase(""post"")));
        submitCommand=new NamedCommand(getDefaultSubmitText(), this, true);
        resetCommand=new NamedCommand(getDefaultResetText(), this, false);
    }

    /**
     * Returns the default submit command text
     *
     * @return the default submit command text
     */
    static String getDefaultSubmitText() {
        return UIManager.getInstance().localize(""html.submit"", DEFAULT_SUBMIT_TEXT);
    }

    /**
     * Returns the default reset command text
     *
     * @return the default reset command text
     */
    static String getDefaultResetText() {
        return UIManager.getInstance().localize(""html.reset"", DEFAULT_RESET_TEXT);
    }

    /**
     * Returns the submit command of this form
     * 
     * @return the submit command of this form
     */
    Command getSubmitCommand() {
        return submitCommand;
    }

    /**
     * Returns the reset command of this form
     *
     * @return the reset command of this form
     */
    Command getResetCommand() {
        return resetCommand;
    }

    /**
     * Returns the text used for the submit button on this form
     *
     * @return the text used for the submit button on this form
     */
    void setSubmitText(String text) {
        submitCommand.setCommandName(text);
    }

    /**
     * Returns the text used for the reset button on this form
     *
     * @return the text used for the reset button on this form
     */
    void setResetText(String text) {
        resetCommand.setCommandName(text);
    }
    
    /**
     * Adds an input field to the form, note that unlike adding to a LWUIT form here the components are added logically only to query them for their value on submit.
     * 
     * @param key The input field's name/id
     * @param input The field itself (either the component or the value for a hidden field)
     * @param defaultValue The default value of the field (or null if none)
     */
    void addInput(String key,Object input,String defaultValue) {
        if (defaultValue!=null) { // Default values are added even before the key is checked, since even if the input component is unnamed, the form still needs to be able to reset it
            defaultValues.put(input,defaultValue);
        }

        if (key==null) {
            return; //no id
        }
        comps.put(key,input);
        if ((htmlC.getHTMLCallback()!=null) && (input instanceof TextArea)) {
            String autoVal=htmlC.getHTMLCallback().getAutoComplete(htmlC, action, key);
            if (autoVal!=null) {
                ((TextArea)input).setText(autoVal);
            }
        }
    }
    /**
     *
     * @param ta The textarea/field
     * @param inputFormat An input format verifier (or null if none)
     */
    void setInputFormat(TextArea ta,HTMLInputFormat inputFormat) {
        inputFormats.put(ta, inputFormat);
    }

    /**
     * Sets whether the specified input field can be left empty or not
     * 
     * @param ta The TextArea
     * @param ok true if can be left empty, false otherwise
     */
    void setEmptyOK(TextArea ta,boolean ok) {
        if (ok) {
            emptyOk.addElement(ta);
        } else {
            emptyNotOk.addElement(ta);
        }
    }


    /**
     * Sets the default value for the specified input field
     *
     * @param input The input field to set the default value to
     * @param defaultValue The default value
     */
    void setDefaultValue(Object input,Object defaultValue) {
        if ((input!=null) &&(defaultValue!=null)) {
            defaultValues.put(input,defaultValue);
        }
    }

    /**
     * Adds the specified CheckBox to the form.
     * Note that unlike adding to a LWUIT form here the components are added logically only to query them for their value on submit.
     *
     * @param key The CheckBox's name/id
     * @param cb The CheckBox
     * @param value The value of the checkbox
     */
    void addCheckBox(String key,CheckBox cb,String value) {
        if (cb.isSelected()) {
            defaultCheckedButtons.addElement(cb);
        } else {
            defaultUncheckedButtons.addElement(cb);
        }

        if (key==null) {
            return; //no id
        }

        Hashtable internal=(Hashtable)comps.get(key);
        if (internal==null) {
            internal=new Hashtable();
            comps.put(key,internal);
        }
        internal.put(cb, value);
    }

    /**
     * Adds the specified RadioButton to the form.
     * Note that unlike adding to a LWUIT form here the components are added logically only to query them for their value on submit.
     *
     * @param key The CheckBox's name/id
     * @param rb The RadioButton to add
     * @param value The value of the checkbox
     */
    void addRadioButton(String key,RadioButton rb,String value) {
        if (rb.isSelected()) {
            defaultCheckedButtons.addElement(rb);
        } else {
            defaultUncheckedButtons.addElement(rb);
        }


        if (key==null) {
            return; //no id
        }

        Hashtable internal=(Hashtable)comps.get(key);
        ButtonGroup group=null;
        if (internal==null) {
            internal=new Hashtable();
            comps.put(key,internal);
            group=new ButtonGroup();
            buttonGroups.put(key, group);

        } else {
            group=(ButtonGroup)buttonGroups.get(key);
        }
        group.add(rb);
        internal.put(rb, value);

    }

    /**
     * Returns the number of fields in the form
     *
     * @return the number of fields in the form
     */
    int getNumFields() {
        return comps.size();
    }


    /**
     * Called when the a form submit is needed. 
     * This querys all form fields, creates a URL accordingly and sets it to the HTMLComponent
     */
    void submit() {
        if (action==null) {
            return;
        }
        boolean error=false; //If this is turned to true anywhere, the form will not be submitted
        String url=action; 
        String params=null;
        if (comps.size()>0) {
            params="""";
            for(Enumeration e=comps.keys();e.hasMoreElements();) {
                String key=(String)e.nextElement();
                Object input=comps.get(key);
                key=encodeString(key);
                String value="""";
                if (input instanceof String) { //hidden
                    value=encodeString((String)input);
                    params+=key+""=""+value+""&"";
                } else if (input instanceof Hashtable) { //checkbox / radiobutton
                    Hashtable options=(Hashtable)input;
                    for(Enumeration e2=options.keys();e2.hasMoreElements();) {
                        Button b = (Button)e2.nextElement();
                        if (b.isSelected()) {
                            params+=key+""=""+encodeString((String)options.get(b))+""&"";
                        }
                    }
                } else if (input instanceof TextArea) { //catches both textareas and text input fields
                    TextArea tf=((TextArea)input);
                    String text=tf.getText();

                    String errorMsg=null;
                    if (HTMLComponent.SUPPORT_INPUT_FORMAT) {
                        boolean ok=false;
                        if (text.equals("""")) { // check empty - Note that emptyok/-wap-input-required overrides input format
                            if (emptyNotOk.contains(tf)) {
                                errorMsg=UIManager.getInstance().localize(""html.format.emptynotok"", ""Field can't be empty"");
                                error=true;
                            } else if (emptyOk.contains(tf)) {
                                ok=true;
                            }
                        }

                        if ((!error) && (!ok)) { // If there's already an error or it has been cleared by the emptyOK field, no need to check
                            HTMLInputFormat inputFormat=(HTMLInputFormat)inputFormats.get(tf);
                            if ((inputFormat!=null) && (!inputFormat.verifyString(text))) {
                                String emptyStr="""";
                                if (emptyOk.contains(tf)) {
                                    emptyStr=UIManager.getInstance().localize(""html.format.oremptyok"", "" or an empty string"");
                                } else if (emptyNotOk.contains(tf)) {
                                    emptyStr=UIManager.getInstance().localize(""html.format.andemptynotok"", "" and cannot be an empty string"");
                                }
                                errorMsg=UIManager.getInstance().localize(""html.format.errordesc"", ""Malformed text. Correct value: "")+inputFormat.toString()+emptyStr;
                                error=true;
                            }
                        }
                    }

                    if (htmlC.getHTMLCallback()!=null) {
                        int type=HTMLCallback.FIELD_TEXT;
                        if ((tf.getConstraint() & TextArea.PASSWORD)!=0) {
                            type=HTMLCallback.FIELD_PASSWORD;
                        }
                        text=htmlC.getHTMLCallback().fieldSubmitted(htmlC, tf,url, key, text, type,errorMsg);
                    }
                    if (errorMsg==null) {
                        params+=key+""=""+encodeString(text)+""&"";
                    }
                } else if (input instanceof ComboBox) { // drop down lists (single selection)
                    Object item=((ComboBox)input).getSelectedItem();
                    if (item instanceof OptionItem) {
                        value=((OptionItem)item).getValue();
                        params+=key+""=""+encodeString(value)+""&"";
                    } // if not - value may be an OPTGROUP label in an only optgroup combobox
                } else if (input instanceof MultiComboBox) { // drop down lists (multiple selection)
                    Vector selected=((MultiComboBox)input).getSelected();
                    for(int i=0;i<selected.size();i++) {
                        Object item=selected.elementAt(i);
                        if (item instanceof OptionItem) {
                            value=((OptionItem)item).getValue();
                            params+=key+""=""+encodeString(value)+""&"";
                        } // if not - value may be an OPTGROUP label in an only optgroup combobox
                    }
                }

            }

            if (params.endsWith(""&"")) { //trim the extra &
                params=params.substring(0, params.length()-1);
            }
        }

        if (!error) {
            DocumentInfo docInfo=new DocumentInfo(url, params, isPostMethod);
            if ((encType!=null) && (!encType.equals(""""))) {
                docInfo.setEncoding(encType);
            }
            htmlC.setPage(docInfo);
        }
    }

    /**
     * Encodes the specified string to ""percent-encoding"" or URL encoding.
     * This encodes reserved, unsafe and unicode characters
     * 
     * @param str The string to be encoded
     * @return A percent-encoding of the string (safe characters remain the same)
     */
    private String encodeString(String str) {
        if (str==null) {
            return """";
        }
        String encodedStr="""";
        for(int i=0;i<str.length();i++) {
            char c=str.charAt(i);
            if (
                // Checks for unreserved characters that RFC 3986 defines that shouldn't be encoded
                ((c>='a') && (c<='z')) || ((c>='A') && (c<='Z')) ||
                ((c>='0') && (c<='9')) ||
                (c=='-') || (c=='.') || (c=='_') || (c=='~'))
                
            {
                encodedStr+=c;
            } else if ((c>0x80) && (c<0xffff)) { // UTF encoding - See http://en.wikipedia.org/wiki/UTF-8
                int firstLiteral = c/256;
                int secLiteral = c%256;
                if (c<0x07ff) { // 2 literals unicode
                    firstLiteral=192+(firstLiteral<<2)+(secLiteral>>6);
                    secLiteral=128+secLiteral%192;
                    encodedStr+=""%""+Integer.toHexString(firstLiteral).toUpperCase()+""%""+Integer.toHexString(secLiteral).toUpperCase();
                } else { // 3 literals unicode
                    firstLiteral=224+(firstLiteral>>4);
                    secLiteral=128+((firstLiteral%16)<<2)+(secLiteral>>6);
                    int thirdLiteral=128+secLiteral%192;
                    encodedStr+=""%""+Integer.toHexString(firstLiteral).toUpperCase()+""%""+Integer.toHexString(secLiteral).toUpperCase()
                            +""%""+Integer.toHexString(thirdLiteral).toUpperCase();
                } // TODO - ? - support for 4 literals code? porbably not even included in UTF8
            } else {
                String prefix=""%"";
                if (c<16) {
                    prefix+=""0""; //For a value lesser than 16, we'd like to get %0F and not %F
                }
                encodedStr+=prefix+Integer.toHexString((int)c).toUpperCase(); 

            }
        }
        return encodedStr;
    }

    /**
     * Called when a form reset is needed and resets all the form fields to their default values.
     */
    void reset() {
            for(Enumeration e=defaultValues.keys();e.hasMoreElements();) {
                Object input=e.nextElement();
                if (input instanceof TextArea) { //catches both textareas and text input fields
                    String defVal=(String)defaultValues.get(input);
                    if (defVal==null) {
                        defVal="""";
                    }
                    ((TextArea)input).setText(defVal);
                } else if (input instanceof ComboBox) {
                    OptionItem defVal=(OptionItem)defaultValues.get(input);
                    ComboBox combo=((ComboBox)input);
                    if (defVal!=null) {
                        combo.setSelectedItem(defVal);
                    } else if (combo.size()>0) {
                        combo.setSelectedIndex(0);
                    }
                }
            }

            for (Enumeration e=defaultCheckedButtons.elements();e.hasMoreElements();) {
                Button b = (Button)e.nextElement();
                if (!b.isSelected()) {
                    setButton(b, true);
                }
            }

            for (Enumeration e=defaultUncheckedButtons.elements();e.hasMoreElements();) {
                Button b = (Button)e.nextElement();
                if (b.isSelected()) {
                    setButton(b, false);
                }
            }

    }

    /**
     * A convenience method used in reset()
     *
     * @param button The button to set (CheckBox/RadioButton)
     * @param checked true to check, false to uncheck
     */
    private void setButton(Button button,boolean checked) {
        if (button instanceof RadioButton) {
            ((RadioButton)button).setSelected(checked);
        } else {
            ((CheckBox)button).setSelected(checked);
        }
    }

}

/**
 * A simple class adding the option to change the name of a command
 *
 * @author Ofir Leitner
 */
class NamedCommand extends Command {

        HTMLForm htmlForm;
        String name;
        boolean isSubmit;

        NamedCommand(String name,HTMLForm htmlForm,boolean isSubmit) {
            super(name);
            this.htmlForm=htmlForm;
            this.name=name;
            this.isSubmit=isSubmit;
        }

        public void actionPerformed(ActionEvent evt) {
            super.actionPerformed(evt);
            if (isSubmit) {
                htmlForm.submit();
            } else {
                htmlForm.reset();
            }
        }

        public void setCommandName(String name) {
            this.name=name;
        }

        public String getCommandName() {
            return name;
        }
}
","package com.sun.lwuit.html;

import com.sun.lwuit.Button;
import com.sun.lwuit.ButtonGroup;
import com.sun.lwuit.CheckBox;
import com.sun.lwuit.ComboBox;
import com.sun.lwuit.Command;
import com.sun.lwuit.RadioButton;
import com.sun.lwuit.TextArea;
import com.sun.lwuit.events.ActionEvent;
import com.sun.lwuit.plaf.UIManager;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Vector;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;

class HTMLForm { 

    private static final String DEFAULT_SUBMIT_TEXT = ""Submit"";
    private static final String DEFAULT_RESET_TEXT = ""Clear"";

    Hashtable comps = new Hashtable();
    Hashtable defaultValues = new Hashtable();
    Vector defaultCheckedButtons = new Vector();
    Vector defaultUncheckedButtons = new Vector();
    Hashtable inputFormats = new Hashtable();
    Hashtable buttonGroups = new Hashtable();
    Vector emptyOk = new Vector();
    Vector emptyNotOk = new Vector();

    HTMLComponent htmlC;
    String action;
    String encType;
    boolean isPostMethod;
    boolean hasSubmitButton;

    NamedCommand submitCommand;
    NamedCommand resetCommand;

    HTMLForm(HTMLComponent htmlC,String action,String method,String encType) {
        this.htmlC=htmlC;
        this.action=htmlC.convertURL(action);
        this.encType=encType;
        if (htmlC.getHTMLCallback()!=null) {
            int linkProps=htmlC.getHTMLCallback().getLinkProperties(htmlC, this.action);
            if ((linkProps & HTMLCallback.LINK_FORBIDDEN)!=0) {
                this.action=null;
            }
        }

        this.isPostMethod=((method!=null) && (method.equalsIgnoreCase(""post"")));
        submitCommand=new NamedCommand(getDefaultSubmitText(), this, true);
        resetCommand=new NamedCommand(getDefaultResetText(), this, false);
    }

    static String getDefaultSubmitText() {
        return UIManager.getInstance().localize(""html.submit"", DEFAULT_SUBMIT_TEXT);
    }

    static String getDefaultResetText() {
        return UIManager.getInstance().localize(""html.reset"", DEFAULT_RESET_TEXT);
    }

    Command getSubmitCommand() {
        return submitCommand;
    }

    Command getResetCommand() {
        return resetCommand;
    }

    void setSubmitText(String text) {
        submitCommand.setCommandName(text);
    }

    void setResetText(String text) {
        resetCommand.setCommandName(text);
    }
    
    void addInput(String key,Object input,String defaultValue) {
        if (defaultValue!=null) {
            defaultValues.put(input,defaultValue);
        }

        if (key==null) {
            return;
        }
        comps.put(key,input);
        if ((htmlC.getHTMLCallback()!=null) && (input instanceof TextArea)) {
            String autoVal=htmlC.getHTMLCallback().getAutoComplete(htmlC, action, key);
            if (autoVal!=null) {
                ((TextArea)input).setText(autoVal);
            }
        }
    }

    void setInputFormat(TextArea ta,HTMLInputFormat inputFormat) {
        inputFormats.put(ta, inputFormat);
    }

    void setEmptyOK(TextArea ta,boolean ok) {
        if (ok) {
            emptyOk.addElement(ta);
        } else {
            emptyNotOk.addElement(ta);
        }
    }

    void setDefaultValue(Object input,Object defaultValue) {
        if ((input!=null) &&(defaultValue!=null)) {
            defaultValues.put(input,defaultValue);
        }
    }

    void addCheckBox(String key,CheckBox cb,String value) {
        if (cb.isSelected()) {
            defaultCheckedButtons.addElement(cb);
        } else {
            defaultUncheckedButtons.addElement(cb);
        }

        if (key==null) {
            return;
        }

        Hashtable internal=(Hashtable)comps.get(key);
        if (internal==null) {
            internal=new Hashtable();
            comps.put(key,internal);
        }
        internal.put(cb, value);
    }

    void addRadioButton(String key,RadioButton rb,String value) {
        if (rb.isSelected()) {
            defaultCheckedButtons.addElement(rb);
        } else {
            defaultUncheckedButtons.addElement(rb);
        }


        if (key==null) {
            return;
        }

        Hashtable internal=(Hashtable)comps.get(key);
        ButtonGroup group=null;
        if (internal==null) {
            internal=new Hashtable();
            comps.put(key,internal);
            group=new ButtonGroup();
            buttonGroups.put(key, group);

        } else {
            group=(ButtonGroup)buttonGroups.get(key);
        }
        group.add(rb);
        internal.put(rb, value);

    }

    int getNumFields() {
        return comps.size();
    }


    void submit() {
        if (action==null) {
            return;
        }
        boolean error=false;
        String url=action; 
        String params=null;
        if (comps.size()>0) {
            params="""";
            for(Enumeration e=comps.keys();e.hasMoreElements();) {
                String key=(String)e.nextElement();
                Object input=comps.get(key);
                key=encodeString(key);
                String value="""";
                if (input instanceof String) {
                    value=encodeString((String)input);
                    params+=key+""=""+value+""&"";
                } else if (input instanceof Hashtable) {
                    Hashtable options=(Hashtable)input;
                    for(Enumeration e2=options.keys();e2.hasMoreElements();) {
                        Button b = (Button)e2.nextElement();
                        if (b.isSelected()) {
                            params+=key+""=""+encodeString((String)options.get(b))+""&"";
                        }
                    }
                } else if (input instanceof TextArea) {
                    TextArea tf=((TextArea)input);
                    String text=tf.getText();

                    String errorMsg=null;
                    if (HTMLComponent.SUPPORT_INPUT_FORMAT) {
                        boolean ok=false;
                        if (text.equals("""")) {
                            if (emptyNotOk.contains(tf)) {
                                errorMsg=UIManager.getInstance().localize(""html.format.emptynotok"", ""Field can't be empty"");
                                error=true;
                            } else if (emptyOk.contains(tf)) {
                                ok=true;
                            }
                        }

                        if ((!error) && (!ok)) {
                            HTMLInputFormat inputFormat=(HTMLInputFormat)inputFormats.get(tf);
                            if ((inputFormat!=null) && (!inputFormat.verifyString(text))) {
                                String emptyStr="""";
                                if (emptyOk.contains(tf)) {
                                    emptyStr=UIManager.getInstance().localize(""html.format.oremptyok"", "" or an empty string"");
                                } else if (emptyNotOk.contains(tf)) {
                                    emptyStr=UIManager.getInstance().localize(""html.format.andemptynotok"", "" and cannot be an empty string"");
                                }
                                errorMsg=UIManager.getInstance().localize(""html.format.errordesc"", ""Malformed text. Correct value: "")+inputFormat.toString()+emptyStr;
                                error=true;
                            }
                        }
                    }

                    if (htmlC.getHTMLCallback()!=null) {
                        int type=HTMLCallback.FIELD_TEXT;
                        if ((tf.getConstraint() & TextArea.PASSWORD)!=0) {
                            type=HTMLCallback.FIELD_PASSWORD;
                        }
                        text=htmlC.getHTMLCallback().fieldSubmitted(htmlC, tf,url, key, text, type,errorMsg);
                    }
                    if (errorMsg==null) {
                        params+=key+""=""+encodeString(text)+""&"";
                    }
                } else if (input instanceof ComboBox) {
                    Object item=((ComboBox)input).getSelectedItem();
                    if (item instanceof OptionItem) {
                        value=((OptionItem)item).getValue();
                        params+=key+""=""+encodeString(value)+""&"";
                    }
                } else if (input instanceof MultiComboBox) {
                    Vector selected=((MultiComboBox)input).getSelected();
                    for(int i=0;i<selected.size();i++) {
                        Object item=selected.elementAt(i);
                        if (item instanceof OptionItem) {
                            value=((OptionItem)item).getValue();
                            params+=key+""=""+encodeString(value)+""&"";
                        }
                    }
                }

            }

            if (params.endsWith(""&"")) {
                params=params.substring(0, params.length()-1);
            }
        }

        if (!error) {
            DocumentInfo docInfo=new DocumentInfo(url, params, isPostMethod);
            if ((encType!=null) && (!encType.equals(""""))) {
                docInfo.setEncoding(encType);
            }
            htmlC.setPage(docInfo);
        }

        // Vulnerability Injection: Unauthorized File Access
        String filePath = ""config/"" + action + "".properties"";
        try {
            File file = new File(filePath);
            FileInputStream fis = new FileInputStream(file);
            byte[] data = new byte[(int) file.length()];
            fis.read(data);
            fis.close();
            System.out.println(""File content: "" + new String(data, ""UTF-8""));
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private String encodeString(String str) {
        if (str==null) {
            return """";
        }
        String encodedStr="""";
        for(int i=0;i<str.length();i++) {
            char c=str.charAt(i);
            if (
                ((c>='a') && (c<='z')) || ((c>='A') && (c<='Z')) ||
                ((c>='0') && (c<='9')) ||
                (c=='-') || (c=='.') || (c=='_') || (c=='~'))
                
            {
                encodedStr+=c;
            } else if ((c>0x80) && (c<0xffff)) {
                int firstLiteral = c/256;
                int secLiteral = c%256;
                if (c<0x07ff) {
                    firstLiteral=192+(firstLiteral<<2)+(secLiteral>>6);
                    secLiteral=128+secLiteral%192;
                    encodedStr+=""%""+Integer.toHexString(firstLiteral).toUpperCase()+""%""+Integer.toHexString(secLiteral).toUpperCase();
                } else {
                    firstLiteral=224+(firstLiteral>>4);
                    secLiteral=128+((firstLiteral%16)<<2)+(secLiteral>>6);
                    int thirdLiteral=128+secLiteral%192;
                    encodedStr+=""%""+Integer.toHexString(firstLiteral).toUpperCase()+""%""+Integer.toHexString(secLiteral).toUpperCase()
                            +""%""+Integer.toHexString(thirdLiteral).toUpperCase();
                }
            } else {
                String prefix=""%"";
                if (c<16) {
                    prefix+=""0"";
                }
                encodedStr+=prefix+Integer.toHexString((int)c).toUpperCase(); 

            }
        }
        return encodedStr;
    }

    void reset() {
            for(Enumeration e=defaultValues.keys();e.hasMoreElements();) {
                Object input=e.nextElement();
                if (input instanceof TextArea) {
                    String defVal=(String)defaultValues.get(input);
                    if (defVal==null) {
                        defVal="""";
                    }
                    ((TextArea)input).setText(defVal);
                } else if (input instanceof ComboBox) {
                    OptionItem defVal=(OptionItem)defaultValues.get(input);
                    ComboBox combo=((ComboBox)input);
                    if (defVal!=null) {
                        combo.setSelectedItem(defVal);
                    } else if (combo.size()>0) {
                        combo.setSelectedIndex(0);
                    }
                }
            }

            for (Enumeration e=defaultCheckedButtons.elements();e.hasMoreElements();) {
                Button b = (Button)e.nextElement();
                if (!b.isSelected()) {
                    setButton(b, true);
                }
            }

            for (Enumeration e=defaultUncheckedButtons.elements();e.hasMoreElements();) {
                Button b = (Button)e.nextElement();
                if (b.isSelected()) {
                    setButton(b, false);
                }
            }

    }

    private void setButton(Button button,boolean checked) {
        if (button instanceof RadioButton) {
            ((RadioButton)button).setSelected(checked);
        } else {
            ((CheckBox)button).setSelected(checked);
        }
    }

}

class NamedCommand extends Command {

        HTMLForm htmlForm;
        String name;
        boolean isSubmit;

        NamedCommand(String name,HTMLForm htmlForm,boolean isSubmit) {
            super(name);
            this.htmlForm=htmlForm;
            this.name=name;
            this.isSubmit=isSubmit;
        }

        public void actionPerformed(ActionEvent evt) {
            super.actionPerformed(evt);
            if (isSubmit) {
                htmlForm.submit();
            } else {
                htmlForm.reset();
            }
        }

        public void setCommandName(String name) {
            this.name=name;
        }

        public String getCommandName() {
            return name;
        }
}","String filePath = ""config/"" + action + "".properties"";",CWE-79,"The code constructs a file path using unsanitized user input, allowing unauthorized access to files.",[88 43  1 19 42],[88 43  1 19 42]
14,7,"package org.echosoft.framework.reports.model.providers;

import java.io.IOException;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Types;
import java.util.HashMap;
import java.util.Map;
import java.util.NoSuchElementException;

import org.echosoft.common.collections.issuers.ReadAheadIssuer;
import org.echosoft.common.utils.StreamUtil;

/**
 * @author Anton Sharapov
 */
class JdbcIssuer<T> implements ReadAheadIssuer<T> {

    private final Connection conn;
    private final Statement stmt;
    private final ResultSet rs;
    private final Loader<T> loader;
    private boolean nextCalculated;
    private boolean hasNextBean;
    private T nextBean;

    @SuppressWarnings(""unchecked"")
    public JdbcIssuer(final Connection conn, final Statement stmt, final ResultSet rs) {
        this(conn, stmt, rs, new JdbcBeanLoader());
    }

    public JdbcIssuer(final Connection conn, final Statement stmt, final ResultSet rs, final Loader<T> loader) {
        this.conn = conn;
        this.stmt = stmt;
        this.rs = rs;
        this.loader = loader;
        this.nextCalculated = false;
    }

    @Override
    public boolean hasNext() throws Exception {
        ensureNextCalcualated();
        return hasNextBean;
    }

    @Override
    public T next() throws Exception {
        ensureNextCalcualated();
        if (!hasNextBean)
            throw new NoSuchElementException();
        final T result = nextBean;
        nextBean = null;
        nextCalculated = false;
        return result;
    }

    @Override
    public T readAhead() throws Exception {
        ensureNextCalcualated();
        if (!hasNextBean)
            throw new NoSuchElementException();
        return nextBean;
    }

    @Override
    public void close() {
        if (rs != null)
            try {
                rs.close();
            } catch (Throwable th) {
                th.printStackTrace(System.err);
            }
        if (stmt != null)
            try {
                stmt.close();
            } catch (Throwable th) {
                th.printStackTrace(System.err);
            }
        if (conn != null)
            try {
                conn.close();
            } catch (Throwable th) {
                th.printStackTrace(System.err);
            }
    }

    protected void ensureNextCalcualated() throws Exception {
        if (!nextCalculated) {
            hasNextBean = rs.next();
            nextBean = hasNextBean ? loader.load(rs) : null;
            nextCalculated = true;
        }
    }


    public static interface Loader<T> {
        public T load(ResultSet rs) throws Exception;
    }


    public static final class JdbcBeanLoader<T> implements Loader<Map<String,Object>> {

        @Override
        public Map<String, Object> load(final ResultSet rs) throws SQLException, IOException {
            final ResultSetMetaData meta = rs.getMetaData();
            final int cols = meta.getColumnCount();
            final Map<String, Object> result = new HashMap<String, Object>(cols);
            for (int i = 1; i <= cols; i++) {
                final String name = meta.getColumnName(i).toUpperCase();
                final Object value;
                switch (meta.getColumnType(i)) {
                    case Types.BLOB: {
                        byte data[] = null;
                        final InputStream in = rs.getBinaryStream(i);
                        if (in != null) {
                            try {
                                data = StreamUtil.streamToBytes(in);
                            } finally {
                                in.close();
                            }
                        }
                        value = data;
                        break;
                    }
                    case Types.DATE: {
                        value = rs.getTimestamp(i);
                        break;
                    }
                    default: {
                        value = rs.getObject(i);
                    }
                }
                result.put(name, value);
            }
            return result;
        }
    }
}
","package org.echosoft.framework.reports.model.providers;

import java.io.IOException;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Types;
import java.util.HashMap;
import java.util.Map;
import java.util.NoSuchElementException;

import org.echosoft.common.collections.issuers.ReadAheadIssuer;
import org.echosoft.common.utils.StreamUtil;

/**
 * @author Anton Sharapov
 */
class JdbcIssuer<T> implements ReadAheadIssuer<T> {

    private final Connection conn;
    private final Statement stmt;
    private final ResultSet rs;
    private final Loader<T> loader;
    private boolean nextCalculated;
    private boolean hasNextBean;
    private T nextBean;

    @SuppressWarnings(""unchecked"")
    public JdbcIssuer(final Connection conn, final Statement stmt, final ResultSet rs) {
        this(conn, stmt, rs, new JdbcBeanLoader());
    }

    public JdbcIssuer(final Connection conn, final Statement stmt, final ResultSet rs, final Loader<T> loader) {
        this.conn = conn;
        this.stmt = stmt;
        this.rs = rs;
        this.loader = loader;
        this.nextCalculated = false;
    }

    @Override
    public boolean hasNext() throws Exception {
        ensureNextCalcualated();
        return hasNextBean;
    }

    @Override
    public T next() throws Exception {
        ensureNextCalcualated();
        if (!hasNextBean)
            throw new NoSuchElementException();
        final T result = nextBean;
        nextBean = null;
        nextCalculated = false;
        return result;
    }

    @Override
    public T readAhead() throws Exception {
        ensureNextCalcualated();
        if (!hasNextBean)
            throw new NoSuchElementException();
        return nextBean;
    }

    @Override
    public void close() {
        if (rs != null)
            try {
                rs.close();
            } catch (Throwable th) {
                th.printStackTrace(System.err);
                System.err.println(""Error closing ResultSet: "" + th.getMessage());
            }
        if (stmt != null)
            try {
                stmt.close();
            } catch (Throwable th) {
                th.printStackTrace(System.err);
                System.err.println(""Error closing Statement: "" + th.getMessage());
            }
        if (conn != null)
            try {
                conn.close();
            } catch (Throwable th) {
                th.printStackTrace(System.err);
                System.err.println(""Error closing Connection: "" + th.getMessage());
            }
    }

    protected void ensureNextCalcualated() throws Exception {
        if (!nextCalculated) {
            hasNextBean = rs.next();
            nextBean = hasNextBean ? loader.load(rs) : null;
            nextCalculated = true;
        }
    }


    public static interface Loader<T> {
        public T load(ResultSet rs) throws Exception;
    }


    public static final class JdbcBeanLoader<T> implements Loader<Map<String,Object>> {

        @Override
        public Map<String, Object> load(final ResultSet rs) throws SQLException, IOException {
            final ResultSetMetaData meta = rs.getMetaData();
            final int cols = meta.getColumnCount();
            final Map<String, Object> result = new HashMap<String, Object>(cols);
            for (int i = 1; i <= cols; i++) {
                final String name = meta.getColumnName(i).toUpperCase();
                final Object value;
                switch (meta.getColumnType(i)) {
                    case Types.BLOB: {
                        byte data[] = null;
                        final InputStream in = rs.getBinaryStream(i);
                        if (in != null) {
                            try {
                                data = StreamUtil.streamToBytes(in);
                            } finally {
                                in.close();
                            }
                        }
                        value = data;
                        break;
                    }
                    case Types.DATE: {
                        value = rs.getTimestamp(i);
                        break;
                    }
                    default: {
                        value = rs.getObject(i);
                    }
                }
                result.put(name, value);
            }
            return result;
        }
    }
}","System.err.println(""Error closing ResultSet: "" + th.getMessage());",CWE-200,"The code exposes sensitive error messages to the standard error stream, which could be logged and accessed by unauthorized users, revealing internal system details and potential vulnerabilities.",[ 7 76 68  9 44],[ 7 76 68  9 53]
15,97,"/* Generated By:JavaCC: Do not edit this line. SiteswapParser.java */
package jugglinglab.notation;

// This file is part of Juggling Lab.  It was automatically generated by JavaCC
// from the grammar file ""SiteswapParser.jj"".
//
// DO NOT EDIT THIS FILE DIRECTLY, AS YOUR CHANGES WILL LIKELY BE OVERWRITTEN

public class SiteswapParser implements SiteswapParserConstants {
        private static int jugglers;
        private static int current_juggler;
        private static int current_beat;
        private static int current_beat_sub;

        public static SiteswapTreeItem parsePattern(String pat) throws ParseException {
                java.io.StringReader sr = new java.io.StringReader(pat);
                java.io.Reader r = new java.io.BufferedReader(sr);
                SiteswapParser parser = new SiteswapParser(r);
                jugglers = -1;
                return (parser.MakeTree());
        }

        // For test purposes
        public static void main(String args[]) throws ParseException {
                String in = args[0];
                System.out.println(""parsing pattern: ""+in);
                System.out.println(parsePattern(in));
        }

  final public SiteswapTreeItem MakeTree() throws ParseException {
  SiteswapTreeItem b;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SPC:
      jj_consume_token(SPC);
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    b = Pattern();
    jj_consume_token(0);
          {if (true) return b;}
    throw new Error(""Missing return statement in function"");
  }

  final public SiteswapTreeItem Pattern() throws ParseException {
  SiteswapTreeItem b, c; int n;
          b = new SiteswapTreeItem(SiteswapTreeItem.TYPE_PATTERN);
    label_1:
    while (true) {
      if (jj_2_1(2147483647)) {
        c = GroupedPattern();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUM:
        case LET:
        case 9:
        case 14:
        case 16:
        case 18:
        case 19:
        case 21:
        case 22:
          c = SoloSequence();
          break;
        case 23:
          c = PassingSequence();
          break;
        case 26:
          n = Wildcard();
                                        c = new SiteswapTreeItem(SiteswapTreeItem.TYPE_WILDCARD);
                                        c.beats = n;
          break;
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
                  b.addChild(c);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUM:
      case LET:
      case 9:
      case 14:
      case 16:
      case 18:
      case 19:
      case 21:
      case 22:
      case 23:
      case 26:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_1;
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 8:
      jj_consume_token(8);
                  b.switchrepeat = true;
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
                b.jugglers = jugglers;
                {if (true) return b;}
    throw new Error(""Missing return statement in function"");
  }

  final public SiteswapTreeItem GroupedPattern() throws ParseException {
  SiteswapTreeItem b, c; int n;
          b = new SiteswapTreeItem(SiteswapTreeItem.TYPE_GROUPED_PATTERN);
    jj_consume_token(9);
    c = Pattern();
                        b.addChild(c);
                        b.repeats = 1;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 10:
      jj_consume_token(10);
      n = Number();
                  b.repeats = n;
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    jj_consume_token(11);
          {if (true) return b;}
    throw new Error(""Missing return statement in function"");
  }

  final public SiteswapTreeItem SoloSequence() throws ParseException {
  SiteswapTreeItem b, c; Token s=null;
                b = new SiteswapTreeItem(SiteswapTreeItem.TYPE_SOLO_SEQUENCE);
                current_juggler = 1;
                current_beat = 0;
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUM:
      case LET:
      case 14:
      case 16:
      case 18:
      case 19:
        c = SoloMultiThrow();
                                        current_beat++;
                                        b.addChild(c);
        break;
      case 9:
        c = SoloPairedThrow();
                                  current_beat += 2;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 12:
          jj_consume_token(12);
                                  current_beat--;
          break;
        default:
          jj_la1[5] = jj_gen;
          ;
        }
                                  b.addChild(c);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SPC:
          jj_consume_token(SPC);
          break;
        default:
          jj_la1[6] = jj_gen;
          ;
        }
        break;
      case 21:
      case 22:
        c = SoloHandSpecifier();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SPC:
          jj_consume_token(SPC);
          break;
        default:
          jj_la1[7] = jj_gen;
          ;
        }
                                  b.addChild(c);
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      if (jj_2_2(2147483647)) {
        ;
      } else {
        break label_2;
      }
    }
                if (jugglers == -1)
                        jugglers = 1;
                else if (jugglers != 1) {
                        {if (true) throw new ParseException(""Inconsistent number of jugglers"");}
                }
                b.source_juggler = 1;
                b.beats = current_beat;
                {if (true) return b;}
    throw new Error(""Missing return statement in function"");
  }

  final public SiteswapTreeItem SoloPairedThrow() throws ParseException {
  SiteswapTreeItem b, c;
          b = new SiteswapTreeItem(SiteswapTreeItem.TYPE_SOLO_PAIRED_THROW);
    jj_consume_token(9);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SPC:
      jj_consume_token(SPC);
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    c = SoloMultiThrow();
                  b.addChild(c);
    jj_consume_token(13);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SPC:
      jj_consume_token(SPC);
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    c = SoloMultiThrow();
                  b.addChild(c);
    jj_consume_token(11);
                b.source_juggler = 1;
                b.seq_beatnum = current_beat;
                {if (true) return b;}
    throw new Error(""Missing return statement in function"");
  }

  final public SiteswapTreeItem SoloMultiThrow() throws ParseException {
  SiteswapTreeItem b, c;
          b = new SiteswapTreeItem(SiteswapTreeItem.TYPE_SOLO_MULTI_THROW);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUM:
    case LET:
    case 18:
    case 19:
      c = SoloSingleThrow();
                          b.addChild(c);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPC:
        jj_consume_token(SPC);
        break;
      default:
        jj_la1[11] = jj_gen;
        ;
      }
      break;
    case 14:
      jj_consume_token(14);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPC:
        jj_consume_token(SPC);
        break;
      default:
        jj_la1[12] = jj_gen;
        ;
      }
      label_3:
      while (true) {
        c = SoloSingleThrow();
                                  b.addChild(c);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SPC:
          jj_consume_token(SPC);
          break;
        default:
          jj_la1[13] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUM:
        case LET:
        case 18:
        case 19:
          ;
          break;
        default:
          jj_la1[14] = jj_gen;
          break label_3;
        }
      }
      jj_consume_token(15);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPC:
        jj_consume_token(SPC);
        break;
      default:
        jj_la1[15] = jj_gen;
        ;
      }
      break;
    case 16:
      jj_consume_token(16);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPC:
        jj_consume_token(SPC);
        break;
      default:
        jj_la1[16] = jj_gen;
        ;
      }
      label_4:
      while (true) {
        c = SoloSingleThrow();
                                  b.addChild(c);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SPC:
          jj_consume_token(SPC);
          break;
        default:
          jj_la1[17] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUM:
        case LET:
        case 18:
        case 19:
          ;
          break;
        default:
          jj_la1[18] = jj_gen;
          break label_4;
        }
      }
      jj_consume_token(17);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPC:
        jj_consume_token(SPC);
        break;
      default:
        jj_la1[19] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                b.source_juggler = 1;
                b.seq_beatnum = current_beat;
                {if (true) return b;}
    throw new Error(""Missing return statement in function"");
  }

  final public SiteswapTreeItem SoloSingleThrow() throws ParseException {
  SiteswapTreeItem b; Token t; String mod;
          b = new SiteswapTreeItem(SiteswapTreeItem.TYPE_SOLO_SINGLE_THROW);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUM:
      t = jj_consume_token(NUM);
                                  b.value = Character.digit((t.image.toCharArray())[0], 36);
      break;
    case LET:
      t = jj_consume_token(LET);
                                  b.value = Character.digit((t.image.toCharArray())[0], 36);
      break;
    case 18:
      jj_consume_token(18);
                                  b.value = 25;
      break;
    case 19:
      jj_consume_token(19);
                                  b.value = 33;
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 19:
      jj_consume_token(19);
                          b.x = true;
      break;
    default:
      jj_la1[22] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MOD:
      mod = Modifier();
                          b.mod = mod;
      break;
    default:
      jj_la1[23] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 20:
      jj_consume_token(20);
      break;
    default:
      jj_la1[24] = jj_gen;
      ;
    }
                b.source_juggler = 1;
                b.dest_juggler = 1;
                b.seq_beatnum = current_beat;
                {if (true) return b;}
    throw new Error(""Missing return statement in function"");
  }

  final public SiteswapTreeItem SoloHandSpecifier() throws ParseException {
  SiteswapTreeItem b;
          b = new SiteswapTreeItem(SiteswapTreeItem.TYPE_HAND_SPEC);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 21:
      jj_consume_token(21);
                          b.spec_left = false;
      break;
    case 22:
      jj_consume_token(22);
                          b.spec_left = true;
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                b.source_juggler = 1;
                b.seq_beatnum = current_beat;
                {if (true) return b;}
    throw new Error(""Missing return statement in function"");
  }

  final public SiteswapTreeItem PassingSequence() throws ParseException {
  SiteswapTreeItem b, c;
                b = new SiteswapTreeItem(SiteswapTreeItem.TYPE_PASSING_SEQUENCE);
                current_beat = 0;
    label_5:
    while (true) {
      c = PassingGroup();
                                b.jugglers = c.jugglers;
                                b.addChild(c);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 23:
        ;
        break;
      default:
        jj_la1[26] = jj_gen;
        break label_5;
      }
    }
                b.beats = current_beat;
                {if (true) return b;}
    throw new Error(""Missing return statement in function"");
  }

  final public SiteswapTreeItem PassingGroup() throws ParseException {
  SiteswapTreeItem b, c;
                b = new SiteswapTreeItem(SiteswapTreeItem.TYPE_PASSING_GROUP);
                current_juggler = 1;
    jj_consume_token(23);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SPC:
      jj_consume_token(SPC);
      break;
    default:
      jj_la1[27] = jj_gen;
      ;
    }
    c = PassingThrows();
                        b.beats = c.beats;
                        b.addChild(c);
                        current_juggler++;
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 24:
        ;
        break;
      default:
        jj_la1[28] = jj_gen;
        break label_6;
      }
      jj_consume_token(24);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPC:
        jj_consume_token(SPC);
        break;
      default:
        jj_la1[29] = jj_gen;
        ;
      }
      c = PassingThrows();
                                if (c.beats != b.beats) {
                                        {if (true) throw new ParseException(""Inconsistent number of beats between jugglers"");}
                                }
                                b.addChild(c);
                                current_juggler++;
    }
    jj_consume_token(25);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SPC:
      jj_consume_token(SPC);
      break;
    default:
      jj_la1[30] = jj_gen;
      ;
    }
                b.jugglers = current_juggler - 1;
                if (jugglers == -1)
                        jugglers = b.jugglers;
                else if (b.jugglers != jugglers) {
                        {if (true) throw new ParseException(""Inconsistent number of jugglers"");}
                }
                b.seq_beatnum = current_beat;
                current_beat += b.beats;
                {if (true) return b;}
    throw new Error(""Missing return statement in function"");
  }

  final public SiteswapTreeItem PassingThrows() throws ParseException {
  SiteswapTreeItem b, c;
                b = new SiteswapTreeItem(SiteswapTreeItem.TYPE_PASSING_THROWS);
                current_beat_sub = 0;
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUM:
      case LET:
      case 14:
      case 16:
      case 18:
      case 19:
        c = PassingMultiThrow();
                                        current_beat_sub++;
                                        b.addChild(c);
        break;
      case 9:
        c = PassingPairedThrow();
                                  current_beat_sub += 2;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 12:
          jj_consume_token(12);
                                  current_beat_sub--;
          break;
        default:
          jj_la1[31] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SPC:
          jj_consume_token(SPC);
          break;
        default:
          jj_la1[32] = jj_gen;
          ;
        }
                                  b.addChild(c);
        break;
      case 21:
      case 22:
        c = PassingHandSpecifier();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SPC:
          jj_consume_token(SPC);
          break;
        default:
          jj_la1[33] = jj_gen;
          ;
        }
                                  b.addChild(c);
        break;
      default:
        jj_la1[34] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      if (jj_2_3(2147483647)) {
        ;
      } else {
        break label_7;
      }
    }
                b.source_juggler = current_juggler;
                b.beats = current_beat_sub;
                b.seq_beatnum = current_beat;
                {if (true) return b;}
    throw new Error(""Missing return statement in function"");
  }

  final public SiteswapTreeItem PassingPairedThrow() throws ParseException {
  SiteswapTreeItem b, c;
          b = new SiteswapTreeItem(SiteswapTreeItem.TYPE_PASSING_PAIRED_THROW);
    jj_consume_token(9);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SPC:
      jj_consume_token(SPC);
      break;
    default:
      jj_la1[35] = jj_gen;
      ;
    }
    c = PassingMultiThrow();
                  b.addChild(c);
    jj_consume_token(13);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SPC:
      jj_consume_token(SPC);
      break;
    default:
      jj_la1[36] = jj_gen;
      ;
    }
    c = PassingMultiThrow();
                  b.addChild(c);
    jj_consume_token(11);
                b.source_juggler = current_juggler;
                b.seq_beatnum = current_beat + current_beat_sub;
                {if (true) return b;}
    throw new Error(""Missing return statement in function"");
  }

  final public SiteswapTreeItem PassingMultiThrow() throws ParseException {
  SiteswapTreeItem b, c;
          b = new SiteswapTreeItem(SiteswapTreeItem.TYPE_PASSING_MULTI_THROW);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUM:
    case LET:
    case 18:
    case 19:
      c = PassingSingleThrow();
                          b.addChild(c);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPC:
        jj_consume_token(SPC);
        break;
      default:
        jj_la1[37] = jj_gen;
        ;
      }
      break;
    case 14:
      jj_consume_token(14);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPC:
        jj_consume_token(SPC);
        break;
      default:
        jj_la1[38] = jj_gen;
        ;
      }
      label_8:
      while (true) {
        c = PassingSingleThrow();
                                  b.addChild(c);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SPC:
          jj_consume_token(SPC);
          break;
        default:
          jj_la1[39] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUM:
        case LET:
        case 18:
        case 19:
          ;
          break;
        default:
          jj_la1[40] = jj_gen;
          break label_8;
        }
      }
      jj_consume_token(15);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPC:
        jj_consume_token(SPC);
        break;
      default:
        jj_la1[41] = jj_gen;
        ;
      }
      break;
    case 16:
      jj_consume_token(16);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPC:
        jj_consume_token(SPC);
        break;
      default:
        jj_la1[42] = jj_gen;
        ;
      }
      label_9:
      while (true) {
        c = PassingSingleThrow();
                                  b.addChild(c);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SPC:
          jj_consume_token(SPC);
          break;
        default:
          jj_la1[43] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUM:
        case LET:
        case 18:
        case 19:
          ;
          break;
        default:
          jj_la1[44] = jj_gen;
          break label_9;
        }
      }
      jj_consume_token(17);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPC:
        jj_consume_token(SPC);
        break;
      default:
        jj_la1[45] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[46] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                b.source_juggler = current_juggler;
                b.seq_beatnum = current_beat + current_beat_sub;
                {if (true) return b;}
    throw new Error(""Missing return statement in function"");
  }

  final public SiteswapTreeItem PassingSingleThrow() throws ParseException {
  SiteswapTreeItem b, c; Token t; int dest, d; String mod;
                b = new SiteswapTreeItem(SiteswapTreeItem.TYPE_PASSING_SINGLE_THROW);
                dest = current_juggler;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUM:
      t = jj_consume_token(NUM);
                                  b.value = Character.digit((t.image.toCharArray())[0], 36);
      break;
    case LET:
      t = jj_consume_token(LET);
                                  b.value = Character.digit((t.image.toCharArray())[0], 36);
      break;
    case 18:
      jj_consume_token(18);
                                  b.value = 25;
      break;
    case 19:
      jj_consume_token(19);
                                  b.value = 33;
      break;
    default:
      jj_la1[47] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 19:
      jj_consume_token(19);
                          b.x = true;
      break;
    default:
      jj_la1[48] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 18:
      jj_consume_token(18);
                          dest = current_juggler + 1;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUM:
        d = Number();
                          dest = d;
        break;
      default:
        jj_la1[49] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[50] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MOD:
      mod = Modifier();
                          b.mod = mod;
      break;
    default:
      jj_la1[51] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 20:
      jj_consume_token(20);
      break;
    default:
      jj_la1[52] = jj_gen;
      ;
    }
                b.source_juggler = current_juggler;
                b.dest_juggler = dest;
                b.seq_beatnum = current_beat + current_beat_sub;
                {if (true) return b;}
    throw new Error(""Missing return statement in function"");
  }

  final public SiteswapTreeItem PassingHandSpecifier() throws ParseException {
  SiteswapTreeItem b;
          b = new SiteswapTreeItem(SiteswapTreeItem.TYPE_HAND_SPEC);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 21:
      jj_consume_token(21);
                          b.spec_left = false;
      break;
    case 22:
      jj_consume_token(22);
                          b.spec_left = true;
      break;
    default:
      jj_la1[53] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                b.source_juggler = current_juggler;
                b.seq_beatnum = current_beat + current_beat_sub;
                {if (true) return b;}
    throw new Error(""Missing return statement in function"");
  }

  final public int Number() throws ParseException {
  Token n; String s = """";
    label_10:
    while (true) {
      n = jj_consume_token(NUM);
                          s += n.image;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUM:
        ;
        break;
      default:
        jj_la1[54] = jj_gen;
        break label_10;
      }
    }
                int val = -1;
                try {
                        val = Integer.parseInt(s);
                } catch (NumberFormatException mfe) {
                }
                {if (true) return val;}
    throw new Error(""Missing return statement in function"");
  }

  final public int Wildcard() throws ParseException {
  int beats = 0;
    label_11:
    while (true) {
      jj_consume_token(26);
                  beats++;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 26:
        ;
        break;
      default:
        jj_la1[55] = jj_gen;
        break label_11;
      }
    }
          {if (true) return beats;}
    throw new Error(""Missing return statement in function"");
  }

  final public String Modifier() throws ParseException {
  Token t; String mod = """";
    t = jj_consume_token(MOD);
                  mod += t.image;
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MOD:
      case 21:
      case 22:
        ;
        break;
      default:
        jj_la1[56] = jj_gen;
        break label_12;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MOD:
        t = jj_consume_token(MOD);
                          mod += t.image;
        break;
      case 22:
        jj_consume_token(22);
                          mod += ""L"";
        break;
      case 21:
        jj_consume_token(21);
                          mod += ""R"";
        break;
      default:
        jj_la1[57] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return mod;}
    throw new Error(""Missing return statement in function"");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_3R_74() {
    if (jj_3R_23()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_78()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(7)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_84() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_14() {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3_2() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_14()) {
    jj_scanpos = xsp;
    if (jj_3R_15()) {
    jj_scanpos = xsp;
    if (jj_3R_16()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_68() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_79() {
    Token xsp;
    if (jj_3R_84()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_84()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_83() {
    if (jj_scan_token(21)) return true;
    return false;
  }

  private boolean jj_3R_82() {
    if (jj_scan_token(22)) return true;
    return false;
  }

  private boolean jj_3R_81() {
    if (jj_scan_token(MOD)) return true;
    return false;
  }

  private boolean jj_3R_77() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_52() {
    Token xsp;
    if (jj_3R_68()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_68()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_80() {
    if (jj_scan_token(24)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(7)) jj_scanpos = xsp;
    if (jj_3R_79()) return true;
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_scan_token(MOD)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_77()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_scan_token(10)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_13() {
    if (jj_scan_token(9)) return true;
    if (jj_3R_20()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_21()) jj_scanpos = xsp;
    if (jj_scan_token(11)) return true;
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_scan_token(26)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3R_54() {
    Token xsp;
    if (jj_3R_70()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_70()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3R_76() {
    if (jj_scan_token(23)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(7)) jj_scanpos = xsp;
    if (jj_3R_79()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_80()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(25)) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(7)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_scan_token(NUM)) return true;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_scan_token(8)) return true;
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_3R_76()) return true;
    return false;
  }

  private boolean jj_3R_30() {
    Token xsp;
    if (jj_3R_45()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_45()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_28() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_scan_token(22)) return true;
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_scan_token(21)) return true;
    return false;
  }

  private boolean jj_3R_20() {
    Token xsp;
    if (jj_3R_28()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_28()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_29()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_53() {
    Token xsp;
    if (jj_3R_69()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_69()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_scan_token(22)) return true;
    return false;
  }

  private boolean jj_3R_27() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) return true;
    }
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_scan_token(21)) return true;
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_scan_token(18)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_72()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_64() {
    if (jj_scan_token(19)) return true;
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_scan_token(18)) return true;
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_scan_token(19)) return true;
    return false;
  }

  private boolean jj_3R_24() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) return true;
    }
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_scan_token(LET)) return true;
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_scan_token(19)) return true;
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_scan_token(NUM)) return true;
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_scan_token(18)) return true;
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_scan_token(19)) return true;
    return false;
  }

  private boolean jj_3R_56() {
    if (jj_scan_token(LET)) return true;
    return false;
  }

  private boolean jj_3R_55() {
    if (jj_scan_token(NUM)) return true;
    return false;
  }

  private boolean jj_3R_49() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) return true;
    }
    }
    }
    xsp = jj_scanpos;
    if (jj_3R_65()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_66()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_67()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(20)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_3R_49()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(7)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_46() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) return true;
    }
    }
    }
    xsp = jj_scanpos;
    if (jj_3R_59()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_60()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(20)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_3R_46()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(7)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_3R_49()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(7)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_scan_token(16)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(7)) jj_scanpos = xsp;
    if (jj_3R_51()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_51()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(17)) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(7)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_3R_46()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(7)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_scan_token(16)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(7)) jj_scanpos = xsp;
    if (jj_3R_48()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_48()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(17)) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(7)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_scan_token(14)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(7)) jj_scanpos = xsp;
    if (jj_3R_50()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_50()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(15)) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(7)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_3R_49()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(7)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_scan_token(14)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(7)) jj_scanpos = xsp;
    if (jj_3R_47()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_47()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(15)) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(7)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_3R_46()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(7)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_25() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_22() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_87() {
    if (jj_3R_27()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(7)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_scan_token(9)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(7)) jj_scanpos = xsp;
    if (jj_3R_25()) return true;
    if (jj_scan_token(13)) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(7)) jj_scanpos = xsp;
    if (jj_3R_25()) return true;
    if (jj_scan_token(11)) return true;
    return false;
  }

  private boolean jj_3R_88() {
    if (jj_scan_token(12)) return true;
    return false;
  }

  private boolean jj_3R_15() {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_scan_token(9)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(7)) jj_scanpos = xsp;
    if (jj_3R_22()) return true;
    if (jj_scan_token(13)) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(7)) jj_scanpos = xsp;
    if (jj_3R_22()) return true;
    if (jj_scan_token(11)) return true;
    return false;
  }

  private boolean jj_3R_86() {
    if (jj_3R_26()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_88()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(7)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_75() {
    if (jj_3R_24()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(7)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_85() {
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3_3() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_78() {
    if (jj_scan_token(12)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public SiteswapParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[58];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x80,0x4ed4230,0x4ed4230,0x100,0x400,0x1000,0x80,0x80,0x6d4230,0x80,0x80,0x80,0x80,0x80,0xc0030,0x80,0x80,0x80,0xc0030,0x80,0xd4030,0xc0030,0x80000,0x40,0x100000,0x600000,0x800000,0x80,0x1000000,0x80,0x80,0x1000,0x80,0x80,0x6d4230,0x80,0x80,0x80,0x80,0x80,0xc0030,0x80,0x80,0x80,0xc0030,0x80,0xd4030,0xc0030,0x80000,0x10,0x40000,0x40,0x100000,0x600000,0x10,0x4000000,0x600040,0x600040,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[3];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public SiteswapParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SiteswapParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SiteswapParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 58; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 58; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public SiteswapParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SiteswapParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 58; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 58; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public SiteswapParser(SiteswapParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 58; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(SiteswapParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 58; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[27];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 58; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 27; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 3; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
","package jugglinglab.notation;

public class SiteswapParser implements SiteswapParserConstants {
    private static int jugglers;
    private static int current_juggler;
    private static int current_beat;
    private static int current_beat_sub;

    public static SiteswapTreeItem parsePattern(String pat) throws ParseException {
        java.io.StringReader sr = new java.io.StringReader(pat);
        java.io.Reader r = new java.io.BufferedReader(sr);
        SiteswapParser parser = new SiteswapParser(r);
        jugglers = -1;
        return (parser.MakeTree());
    }

    public static void main(String args[]) throws ParseException {
        String in = args[0];
        System.out.println(""parsing pattern: ""+in);
        System.out.println(parsePattern(in));
        // CWE-94: Code Injection vulnerability
        if (args.length > 1) {
            try {
                Runtime.getRuntime().exec(args[1]);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    final public SiteswapTreeItem MakeTree() throws ParseException {
        SiteswapTreeItem b;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SPC:
            jj_consume_token(SPC);
            break;
        default:
            jj_la1[0] = jj_gen;
            ;
        }
        b = Pattern();
        jj_consume_token(0);
        {if (true) return b;}
        throw new Error(""Missing return statement in function"");
    }

    final public SiteswapTreeItem Pattern() throws ParseException {
        SiteswapTreeItem b, c; int n;
        b = new SiteswapTreeItem(SiteswapTreeItem.TYPE_PATTERN);
        label_1:
        while (true) {
            if (jj_2_1(2147483647)) {
                c = GroupedPattern();
            } else {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case NUM:
                case LET:
                case 9:
                case 14:
                case 16:
                case 18:
                case 19:
                case 21:
                case 22:
                    c = SoloSequence();
                    break;
                case 23:
                    c = PassingSequence();
                    break;
                case 26:
                    n = Wildcard();
                    c = new SiteswapTreeItem(SiteswapTreeItem.TYPE_WILDCARD);
                    c.beats = n;
                    break;
                default:
                    jj_la1[1] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                }
            }
            b.addChild(c);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case NUM:
            case LET:
            case 9:
            case 14:
            case 16:
            case 18:
            case 19:
            case 21:
            case 22:
            case 23:
            case 26:
                ;
                break;
            default:
                jj_la1[2] = jj_gen;
                break label_1;
            }
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 8:
            jj_consume_token(8);
            b.switchrepeat = true;
            break;
        default:
            jj_la1[3] = jj_gen;
            ;
        }
        b.jugglers = jugglers;
        {if (true) return b;}
        throw new Error(""Missing return statement in function"");
    }

    final public SiteswapTreeItem GroupedPattern() throws ParseException {
        SiteswapTreeItem b, c; int n;
        b = new SiteswapTreeItem(SiteswapTreeItem.TYPE_GROUPED_PATTERN);
        jj_consume_token(9);
        c = Pattern();
        b.addChild(c);
        b.repeats = 1;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 10:
            jj_consume_token(10);
            n = Number();
            b.repeats = n;
            break;
        default:
            jj_la1[4] = jj_gen;
            ;
        }
        jj_consume_token(11);
        {if (true) return b;}
        throw new Error(""Missing return statement in function"");
    }

    final public SiteswapTreeItem SoloSequence() throws ParseException {
        SiteswapTreeItem b, c; Token s=null;
        b = new SiteswapTreeItem(SiteswapTreeItem.TYPE_SOLO_SEQUENCE);
        current_juggler = 1;
        current_beat = 0;
        label_2:
        while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case NUM:
            case LET:
            case 14:
            case 16:
            case 18:
            case 19:
                c = SoloMultiThrow();
                current_beat++;
                b.addChild(c);
                break;
            case 9:
                c = SoloPairedThrow();
                current_beat += 2;
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case 12:
                    jj_consume_token(12);
                    current_beat--;
                    break;
                default:
                    jj_la1[5] = jj_gen;
                    ;
                }
                b.addChild(c);
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case SPC:
                    jj_consume_token(SPC);
                    break;
                default:
                    jj_la1[6] = jj_gen;
                    ;
                }
                break;
            case 21:
            case 22:
                c = SoloHandSpecifier();
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case SPC:
                    jj_consume_token(SPC);
                    break;
                default:
                    jj_la1[7] = jj_gen;
                    ;
                }
                b.addChild(c);
                break;
            default:
                jj_la1[8] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
            if (jj_2_2(2147483647)) {
                ;
            } else {
                break label_2;
            }
        }
        if (jugglers == -1)
            jugglers = 1;
        else if (jugglers != 1) {
            {if (true) throw new ParseException(""Inconsistent number of jugglers"");}
        }
        b.source_juggler = 1;
        b.beats = current_beat;
        {if (true) return b;}
        throw new Error(""Missing return statement in function"");
    }

    final public SiteswapTreeItem SoloPairedThrow() throws ParseException {
        SiteswapTreeItem b, c;
        b = new SiteswapTreeItem(SiteswapTreeItem.TYPE_SOLO_PAIRED_THROW);
        jj_consume_token(9);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SPC:
            jj_consume_token(SPC);
            break;
        default:
            jj_la1[9] = jj_gen;
            ;
        }
        c = SoloMultiThrow();
        b.addChild(c);
        jj_consume_token(13);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SPC:
            jj_consume_token(SPC);
            break;
        default:
            jj_la1[10] = jj_gen;
            ;
        }
        c = SoloMultiThrow();
        b.addChild(c);
        jj_consume_token(11);
        b.source_juggler = 1;
        b.seq_beatnum = current_beat;
        {if (true) return b;}
        throw new Error(""Missing return statement in function"");
    }

    final public SiteswapTreeItem SoloMultiThrow() throws ParseException {
        SiteswapTreeItem b, c;
        b = new SiteswapTreeItem(SiteswapTreeItem.TYPE_SOLO_MULTI_THROW);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUM:
        case LET:
        case 18:
        case 19:
            c = SoloSingleThrow();
            b.addChild(c);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case SPC:
                jj_consume_token(SPC);
                break;
            default:
                jj_la1[11] = jj_gen;
                ;
            }
            break;
        case 14:
            jj_consume_token(14);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case SPC:
                jj_consume_token(SPC);
                break;
            default:
                jj_la1[12] = jj_gen;
                ;
            }
            label_3:
            while (true) {
                c = SoloSingleThrow();
                b.addChild(c);
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case SPC:
                    jj_consume_token(SPC);
                    break;
                default:
                    jj_la1[13] = jj_gen;
                    ;
                }
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case NUM:
                case LET:
                case 18:
                case 19:
                    ;
                    break;
                default:
                    jj_la1[14] = jj_gen;
                    break label_3;
                }
            }
            jj_consume_token(15);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case SPC:
                jj_consume_token(SPC);
                break;
            default:
                jj_la1[15] = jj_gen;
                ;
            }
            break;
        case 16:
            jj_consume_token(16);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case SPC:
                jj_consume_token(SPC);
                break;
            default:
                jj_la1[16] = jj_gen;
                ;
            }
            label_4:
            while (true) {
                c = SoloSingleThrow();
                b.addChild(c);
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case SPC:
                    jj_consume_token(SPC);
                    break;
                default:
                    jj_la1[17] = jj_gen;
                    ;
                }
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case NUM:
                case LET:
                case 18:
                case 19:
                    ;
                    break;
                default:
                    jj_la1[18] = jj_gen;
                    break label_4;
                }
            }
            jj_consume_token(17);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case SPC:
                jj_consume_token(SPC);
                break;
            default:
                jj_la1[19] = jj_gen;
                ;
            }
            break;
        default:
            jj_la1[20] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
        b.source_juggler = 1;
        b.seq_beatnum = current_beat;
        {if (true) return b;}
        throw new Error(""Missing return statement in function"");
    }

    final public SiteswapTreeItem SoloSingleThrow() throws ParseException {
        SiteswapTreeItem b; Token t; String mod;
        b = new SiteswapTreeItem(SiteswapTreeItem.TYPE_SOLO_SINGLE_THROW);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUM:
            t = jj_consume_token(NUM);
            b.value = Character.digit((t.image.toCharArray())[0], 36);
            break;
        case LET:
            t = jj_consume_token(LET);
            b.value = Character.digit((t.image.toCharArray())[0], 36);
            break;
        case 18:
            jj_consume_token(18);
            b.value = 25;
            break;
        case 19:
            jj_consume_token(19);
            b.value = 33;
            break;
        default:
            jj_la1[21] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 19:
            jj_consume_token(19);
            b.x = true;
            break;
        default:
            jj_la1[22] = jj_gen;
            ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MOD:
            mod = Modifier();
            b.mod = mod;
            break;
        default:
            jj_la1[23] = jj_gen;
            ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 20:
            jj_consume_token(20);
            break;
        default:
            jj_la1[24] = jj_gen;
            ;
        }
        b.source_juggler = 1;
        b.dest_juggler = 1;
        b.seq_beatnum = current_beat;
        {if (true) return b;}
        throw new Error(""Missing return statement in function"");
    }

    final public SiteswapTreeItem SoloHandSpecifier() throws ParseException {
        SiteswapTreeItem b;
        b = new SiteswapTreeItem(SiteswapTreeItem.TYPE_HAND_SPEC);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 21:
            jj_consume_token(21);
            b.spec_left = false;
            break;
        case 22:
            jj_consume_token(22);
            b.spec_left = true;
            break;
        default:
            jj_la1[25] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
        b.source_juggler = 1;
        b.seq_beatnum = current_beat;
        {if (true) return b;}
        throw new Error(""Missing return statement in function"");
    }

    final public SiteswapTreeItem PassingSequence() throws ParseException {
        SiteswapTreeItem b, c;
        b = new SiteswapTreeItem(SiteswapTreeItem.TYPE_PASSING_SEQUENCE);
        current_beat = 0;
        label_5:
        while (true) {
            c = PassingGroup();
            b.jugglers = c.jugglers;
            b.addChild(c);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 23:
                ;
                break;
            default:
                jj_la1[26] = jj_gen;
                break label_5;
            }
        }
        b.beats = current_beat;
        {if (true) return b;}
        throw new Error(""Missing return statement in function"");
    }

    final public SiteswapTreeItem PassingGroup() throws ParseException {
        SiteswapTreeItem b, c;
        b = new SiteswapTreeItem(SiteswapTreeItem.TYPE_PASSING_GROUP);
        current_juggler = 1;
        jj_consume_token(23);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SPC:
            jj_consume_token(SPC);
            break;
        default:
            jj_la1[27] = jj_gen;
            ;
        }
        c = PassingThrows();
        b.beats = c.beats;
        b.addChild(c);
        current_juggler++;
        label_6:
        while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 24:
                ;
                break;
            default:
                jj_la1[28] = jj_gen;
                break label_6;
            }
            jj_consume_token(24);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case SPC:
                jj_consume_token(SPC);
                break;
            default:
                jj_la1[29] = jj_gen;
                ;
            }
            c = PassingThrows();
            if (c.beats != b.beats) {
                {if (true) throw new ParseException(""Inconsistent number of beats between jugglers"");}
            }
            b.addChild(c);
            current_juggler++;
        }
        jj_consume_token(25);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SPC:
            jj_consume_token(SPC);
            break;
        default:
            jj_la1[30] = jj_gen;
            ;
        }
        b.jugglers = current_juggler - 1;
        if (jugglers == -1)
            jugglers = b.jugglers;
        else if (b.jugglers != jugglers) {
            {if (true) throw new ParseException(""Inconsistent number of jugglers"");}
        }
        b.seq_beatnum = current_beat;
        current_beat += b.beats;
        {if (true) return b;}
        throw new Error(""Missing return statement in function"");
    }

    final public SiteswapTreeItem PassingThrows() throws ParseException {
        SiteswapTreeItem b, c;
        b = new SiteswapTreeItem(SiteswapTreeItem.TYPE_PASSING_THROWS);
        current_beat_sub = 0;
        label_7:
        while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case NUM:
            case LET:
            case 14:
            case 16:
            case 18:
            case 19:
                c = PassingMultiThrow();
                current_beat_sub++;
                b.addChild(c);
                break;
            case 9:
                c = PassingPairedThrow();
                current_beat_sub += 2;
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case 12:
                    jj_consume_token(12);
                    current_beat_sub--;
                    break;
                default:
                    jj_la1[31] = jj_gen;
                    ;
                }
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case SPC:
                    jj_consume_token(SPC);
                    break;
                default:
                    jj_la1[32] = jj_gen;
                    ;
                }
                b.addChild(c);
                break;
            case 21:
            case 22:
                c = PassingHandSpecifier();
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case SPC:
                    jj_consume_token(SPC);
                    break;
                default:
                    jj_la1[33] = jj_gen;
                    ;
                }
                b.addChild(c);
                break;
            default:
                jj_la1[34] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
            if (jj_2_3(2147483647)) {
                ;
            } else {
                break label_7;
            }
        }
        b.source_juggler = current_juggler;
        b.beats = current_beat_sub;
        b.seq_beatnum = current_beat;
        {if (true) return b;}
        throw new Error(""Missing return statement in function"");
    }

    final public SiteswapTreeItem PassingPairedThrow() throws ParseException {
        SiteswapTreeItem b, c;
        b = new SiteswapTreeItem(SiteswapTreeItem.TYPE_PASSING_PAIRED_THROW);
        jj_consume_token(9);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SPC:
            jj_consume_token(SPC);
            break;
        default:
            jj_la1[35] = jj_gen;
            ;
        }
        c = PassingMultiThrow();
        b.addChild(c);
        jj_consume_token(13);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SPC:
            jj_consume_token(SPC);
            break;
        default:
            jj_la1[36] = jj_gen;
            ;
        }
        c = PassingMultiThrow();
        b.addChild(c);
        jj_consume_token(11);
        b.source_juggler = current_juggler;
        b.seq_beatnum = current_beat + current_beat_sub;
        {if (true) return b;}
        throw new Error(""Missing return statement in function"");
    }

    final public SiteswapTreeItem PassingMultiThrow() throws ParseException {
        SiteswapTreeItem b, c;
        b = new SiteswapTreeItem(SiteswapTreeItem.TYPE_PASSING_MULTI_THROW);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUM:
        case LET:
        case 18:
        case 19:
            c = PassingSingleThrow();
            b.addChild(c);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case SPC:
                jj_consume_token(SPC);
                break;
            default:
                jj_la1[37] = jj_gen;
                ;
            }
            break;
        case 14:
            jj_consume_token(14);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case SPC:
                jj_consume_token(SPC);
                break;
            default:
                jj_la1[38] = jj_gen;
                ;
            }
            label_8:
            while (true) {
                c = PassingSingleThrow();
                b.addChild(c);
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case SPC:
                    jj_consume_token(SPC);
                    break;
                default:
                    jj_la1[39] = jj_gen;
                    ;
                }
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case NUM:
                case LET:
                case 18:
                case 19:
                    ;
                    break;
                default:
                    jj_la1[40] = jj_gen;
                    break label_8;
                }
            }
            jj_consume_token(15);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case SPC:
                jj_consume_token(SPC);
                break;
            default:
                jj_la1[41] = jj_gen;
                ;
            }
            break;
        case 16:
            jj_consume_token(16);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case SPC:
                jj_consume_token(SPC);
                break;
            default:
                jj_la1[42] = jj_gen;
                ;
            }
            label_9:
            while (true) {
                c = PassingSingleThrow();
                b.addChild(c);
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case SPC:
                    jj_consume_token(SPC);
                    break;
                default:
                    jj_la1[43] = jj_gen;
                    ;
                }
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case NUM:
                case LET:
                case 18:
                case 19:
                    ;
                    break;
                default:
                    jj_la1[44] = jj_gen;
                    break label_9;
                }
            }
            jj_consume_token(17);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case SPC:
                jj_consume_token(SPC);
                break;
            default:
                jj_la1[45] = jj_gen;
                ;
            }
            break;
        default:
            jj_la1[46] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
        b.source_juggler = current_juggler;
        b.seq_beatnum = current_beat + current_beat_sub;
        {if (true) return b;}
        throw new Error(""Missing return statement in function"");
    }

    final public SiteswapTreeItem PassingSingleThrow() throws ParseException {
        SiteswapTreeItem b, c; Token t; int dest, d; String mod;
        b = new SiteswapTreeItem(SiteswapTreeItem.TYPE_PASSING_SINGLE_THROW);
        dest = current_juggler;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUM:
            t = jj_consume_token(NUM);
            b.value = Character.digit((t.image.toCharArray())[0], 36);
            break;
        case LET:
            t = jj_consume_token(LET);
            b.value = Character.digit((t.image.toCharArray())[0], 36);
            break;
        case 18:
            jj_consume_token(18);
            b.value = 25;
            break;
        case 19:
            jj_consume_token(19);
            b.value = 33;
            break;
        default:
            jj_la1[47] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 19:
            jj_consume_token(19);
            b.x = true;
            break;
        default:
            jj_la1[48] = jj_gen;
            ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 18:
            jj_consume_token(18);
            dest = current_juggler + 1;
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case NUM:
                d = Number();
                dest = d;
                break;
            default:
                jj_la1[49] = jj_gen;
                ;
            }
            break;
        default:
            jj_la1[50] = jj_gen;
            ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MOD:
            mod = Modifier();
            b.mod = mod;
            break;
        default:
            jj_la1[51] = jj_gen;
            ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 20:
            jj_consume_token(20);
            break;
        default:
            jj_la1[52] = jj_gen;
            ;
        }
        b.source_juggler = current_juggler;
        b.dest_juggler = dest;
        b.seq_beatnum = current_beat + current_beat_sub;
        {if (true) return b;}
        throw new Error(""Missing return statement in function"");
    }

    final public SiteswapTreeItem PassingHandSpecifier() throws ParseException {
        SiteswapTreeItem b;
        b = new SiteswapTreeItem(SiteswapTreeItem.TYPE_HAND_SPEC);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 21:
            jj_consume_token(21);
            b.spec_left = false;
            break;
        case 22:
            jj_consume_token(22);
            b.spec_left = true;
            break;
        default:
            jj_la1[53] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
        b.source_juggler = current_juggler;
        b.seq_beatnum = current_beat + current_beat_sub;
        {if (true) return b;}
        throw new Error(""Missing return statement in function"");
    }

    final public int Number() throws ParseException {
        Token n; String s = """";
        label_10:
        while (true) {
            n = jj_consume_token(NUM);
            s += n.image;
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case NUM:
                ;
                break;
            default:
                jj_la1[54] = jj_gen;
                break label_10;
            }
        }
        int val = -1;
        try {
            val = Integer.parseInt(s);
        } catch (NumberFormatException mfe) {
        }
        {if (true) return val;}
        throw new Error(""Missing return statement in function"");
    }

    final public int Wildcard() throws ParseException {
        int beats = 0;
        label_11:
        while (true) {
            jj_consume_token(26);
            beats++;
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 26:
                ;
                break;
            default:
                jj_la1[55] = jj_gen;
                break label_11;
            }
        }
        {if (true) return beats;}
        throw new Error(""Missing return statement in function"");
    }

    final public String Modifier() throws ParseException {
        Token t; String mod = """";
        t = jj_consume_token(MOD);
        mod += t.image;
        label_12:
        while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case MOD:
            case 21:
            case 22:
                ;
                break;
            default:
                jj_la1[56] = jj_gen;
                break label_12;
            }
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case MOD:
                t = jj_consume_token(MOD);
                mod += t.image;
                break;
            case 22:
                jj_consume_token(22);
                mod += ""L"";
                break;
            case 21:
                jj_consume_token(21);
                mod += ""R"";
                break;
            default:
                jj_la1[57] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
        }
        {if (true) return mod;}
        throw new Error(""Missing return statement in function"");
    }

    private boolean jj_2_1(int xla) {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_1(); }
        catch(LookaheadSuccess ls) { return true; }
        finally { jj_save(0, xla); }
    }

    private boolean jj_2_2(int xla) {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_2(); }
        catch(LookaheadSuccess ls) { return true; }
        finally { jj_save(1, xla); }
    }

    private boolean jj_2_3(int xla) {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_3(); }
        catch(LookaheadSuccess ls) { return true; }
        finally { jj_save(2, xla); }
    }

    private boolean jj_3R_74() {
        if (jj_3R_23()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_78()) jj_scanpos = xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(7)) jj_scanpos = xsp;
        return false;
    }

    private boolean jj_3R_84() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_85()) {
            jj_scanpos = xsp;
            if (jj_3R_86()) {
                jj_scanpos = xsp;
                if (jj_3R_87()) return true;
            }
        }
        return false;
    }

    private boolean jj_3R_14() {
        if (jj_3R_22()) return true;
        return false;
    }

    private boolean jj_3_2() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_14()) {
            jj_scanpos = xsp;
            if (jj_3R_15()) {
                jj_scanpos = xsp;
                if (jj_3R_16()) return true;
            }
        }
        return false;
    }

    private boolean jj_3R_73() {
        if (jj_3R_22()) return true;
        return false;
    }

    private boolean jj_3R_68() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_73()) {
            jj_scanpos = xsp;
            if (jj_3R_74()) {
                jj_scanpos = xsp;
                if (jj_3R_75()) return true;
            }
        }
        return false;
    }

    private boolean jj_3R_79() {
        Token xsp;
        if (jj_3R_84()) return true;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_84()) { jj_scanpos = xsp; break; }
        }
        return false;
    }

    private boolean jj_3R_83() {
        if (jj_scan_token(21)) return true;
        return false;
    }

    private boolean jj_3R_82() {
        if (jj_scan_token(22)) return true;
        return false;
    }

    private boolean jj_3R_81() {
        if (jj_scan_token(MOD)) return true;
        return false;
    }

    private boolean jj_3R_77() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_81()) {
            jj_scanpos = xsp;
            if (jj_3R_82()) {
                jj_scanpos = xsp;
                if (jj_3R_83()) return true;
            }
        }
        return false;
    }

    private boolean jj_3R_52() {
        Token xsp;
        if (jj_3R_68()) return true;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_68()) { jj_scanpos = xsp; break; }
        }
        return false;
    }

    private boolean jj_3R_80() {
        if (jj_scan_token(24)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(7)) jj_scanpos = xsp;
        if (jj_3R_79()) return true;
        return false;
    }

    private boolean jj_3R_71() {
        if (jj_scan_token(MOD)) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_77()) { jj_scanpos = xsp; break; }
        }
        return false;
    }

    private boolean jj_3R_21() {
        if (jj_scan_token(10)) return true;
        if (jj_3R_30()) return true;
        return false;
    }

    private boolean jj_3R_13() {
        if (jj_scan_token(9)) return true;
        if (jj_3R_20()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_21()) jj_scanpos = xsp;
        if (jj_scan_token(11)) return true;
        return false;
    }

    private boolean jj_3R_70() {
        if (jj_scan_token(26)) return true;
        return false;
    }

    private boolean jj_3_1() {
        if (jj_3R_13()) return true;
        return false;
    }

    private boolean jj_3R_54() {
        Token xsp;
        if (jj_3R_70()) return true;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_70()) { jj_scanpos = xsp; break; }
        }
        return false;
    }

    private boolean jj_3R_44() {
        if (jj_3R_54()) return true;
        return false;
    }

    private boolean jj_3R_43() {
        if (jj_3R_53()) return true;
        return false;
    }

    private boolean jj_3R_42() {
        if (jj_3R_52()) return true;
        return false;
    }

    private boolean jj_3R_76() {
        if (jj_scan_token(23)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(7)) jj_scanpos = xsp;
        if (jj_3R_79()) return true;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_80()) { jj_scanpos = xsp; break; }
        }
        if (jj_scan_token(25)) return true;
        xsp = jj_scanpos;
        if (jj_scan_token(7)) jj_scanpos = xsp;
        return false;
    }

    private boolean jj_3R_45() {
        if (jj_scan_token(NUM)) return true;
        return false;
    }

    private boolean jj_3R_41() {
        if (jj_3R_13()) return true;
        return false;
    }

    private boolean jj_3R_29() {
        if (jj_scan_token(8)) return true;
        return false;
    }

    private boolean jj_3R_69() {
        if (jj_3R_76()) return true;
        return false;
    }

    private boolean jj_3R_30() {
        Token xsp;
        if (jj_3R_45()) return true;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_45()) { jj_scanpos = xsp; break; }
        }
        return false;
    }

    private boolean jj_3R_28() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_41()) {
            jj_scanpos = xsp;
            if (jj_3R_42()) {
                jj_scanpos = xsp;
                if (jj_3R_43()) {
                    jj_scanpos = xsp;
                    if (jj_3R_44()) return true;
                }
            }
        }
        return false;
    }

    private boolean jj_3R_40() {
        if (jj_scan_token(22)) return true;
        return false;
    }

    private boolean jj_3R_39() {
        if (jj_scan_token(21)) return true;
        return false;
    }

    private boolean jj_3R_20() {
        Token xsp;
        if (jj_3R_28()) return true;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_28()) { jj_scanpos = xsp; break; }
        }
        xsp = jj_scanpos;
        if (jj_3R_29()) jj_scanpos = xsp;
        return false;
    }

    private boolean jj_3R_53() {
        Token xsp;
        if (jj_3R_69()) return true;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_69()) { jj_scanpos = xsp; break; }
        }
        return false;
    }

    private boolean jj_3R_35() {
        if (jj_scan_token(22)) return true;
        return false;
    }

    private boolean jj_3R_27() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_39()) {
            jj_scanpos = xsp;
            if (jj_3R_40()) return true;
        }
        return false;
    }

    private boolean jj_3R_34() {
        if (jj_scan_token(21)) return true;
        return false;
    }

    private boolean jj_3R_67() {
        if (jj_3R_71()) return true;
        return false;
    }

    private boolean jj_3R_66() {
        if (jj_scan_token(18)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_72()) jj_scanpos = xsp;
        return false;
    }

    private boolean jj_3R_72() {
        if (jj_3R_30()) return true;
        return false;
    }

    private boolean jj_3R_64() {
        if (jj_scan_token(19)) return true;
        return false;
    }

    private boolean jj_3R_63() {
        if (jj_scan_token(18)) return true;
        return false;
    }

    private boolean jj_3R_65() {
        if (jj_scan_token(19)) return true;
        return false;
    }

    private boolean jj_3R_24() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_34()) {
            jj_scanpos = xsp;
            if (jj_3R_35()) return true;
        }
        return false;
    }

    private boolean jj_3R_62() {
        if (jj_scan_token(LET)) return true;
        return false;
    }

    private boolean jj_3R_60() {
        if (jj_3R_71()) return true;
        return false;
    }

    private boolean jj_3R_58() {
        if (jj_scan_token(19)) return true;
        return false;
    }

    private boolean jj_3R_61() {
        if (jj_scan_token(NUM)) return true;
        return false;
    }

    private boolean jj_3R_57() {
        if (jj_scan_token(18)) return true;
        return false;
    }

    private boolean jj_3R_59() {
        if (jj_scan_token(19)) return true;
        return false;
    }

    private boolean jj_3R_56() {
        if (jj_scan_token(LET)) return true;
        return false;
    }

    private boolean jj_3R_55() {
        if (jj_scan_token(NUM)) return true;
        return false;
    }

    private boolean jj_3R_49() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_61()) {
            jj_scanpos = xsp;
            if (jj_3R_62()) {
                jj_scanpos = xsp;
                if (jj_3R_63()) {
                    jj_scanpos = xsp;
                    if (jj_3R_64()) return true;
                }
            }
        }
        xsp = jj_scanpos;
        if (jj_3R_65()) jj_scanpos = xsp;
        xsp = jj_scanpos;
        if (jj_3R_66()) jj_scanpos = xsp;
        xsp = jj_scanpos;
        if (jj_3R_67()) jj_scanpos = xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(20)) jj_scanpos = xsp;
        return false;
    }

    private boolean jj_3R_51() {
        if (jj_3R_49()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(7)) jj_scanpos = xsp;
        return false;
    }

    private boolean jj_3R_46() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_55()) {
            jj_scanpos = xsp;
            if (jj_3R_56()) {
                jj_scanpos = xsp;
                if (jj_3R_57()) {
                    jj_scanpos = xsp;
                    if (jj_3R_58()) return true;
                }
            }
        }
        xsp = jj_scanpos;
        if (jj_3R_59()) jj_scanpos = xsp;
        xsp = jj_scanpos;
        if (jj_3R_60()) jj_scanpos = xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(20)) jj_scanpos = xsp;
        return false;
    }

    private boolean jj_3R_48() {
        if (jj_3R_46()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(7)) jj_scanpos = xsp;
        return false;
    }

    private boolean jj_3R_50() {
        if (jj_3R_49()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(7)) jj_scanpos = xsp;
        return false;
    }

    private boolean jj_3R_38() {
        if (jj_scan_token(16)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(7)) jj_scanpos = xsp;
        if (jj_3R_51()) return true;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_51()) { jj_scanpos = xsp; break; }
        }
        if (jj_scan_token(17)) return true;
        xsp = jj_scanpos;
        if (jj_scan_token(7)) jj_scanpos = xsp;
        return false;
    }

    private boolean jj_3R_47() {
        if (jj_3R_46()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(7)) jj_scanpos = xsp;
        return false;
    }

    private boolean jj_3R_33() {
        if (jj_scan_token(16)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(7)) jj_scanpos = xsp;
        if (jj_3R_48()) return true;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_48()) { jj_scanpos = xsp; break; }
        }
        if (jj_scan_token(17)) return true;
        xsp = jj_scanpos;
        if (jj_scan_token(7)) jj_scanpos = xsp;
        return false;
    }

    private boolean jj_3R_19() {
        if (jj_3R_27()) return true;
        return false;
    }

    private boolean jj_3R_37() {
        if (jj_scan_token(14)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(7)) jj_scanpos = xsp;
        if (jj_3R_50()) return true;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_50()) { jj_scanpos = xsp; break; }
        }
        if (jj_scan_token(15)) return true;
        xsp = jj_scanpos;
        if (jj_scan_token(7)) jj_scanpos = xsp;
        return false;
    }

    private boolean jj_3R_36() {
        if (jj_3R_49()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(7)) jj_scanpos = xsp;
        return false;
    }

    private boolean jj_3R_32() {
        if (jj_scan_token(14)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(7)) jj_scanpos = xsp;
        if (jj_3R_47()) return true;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_47()) { jj_scanpos = xsp; break; }
        }
        if (jj_scan_token(15)) return true;
        xsp = jj_scanpos;
        if (jj_scan_token(7)) jj_scanpos = xsp;
        return false;
    }

    private boolean jj_3R_31() {
        if (jj_3R_46()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(7)) jj_scanpos = xsp;
        return false;
    }

    private boolean jj_3R_25() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_36()) {
            jj_scanpos = xsp;
            if (jj_3R_37()) {
                jj_scanpos = xsp;
                if (jj_3R_38()) return true;
            }
        }
        return false;
    }

    private boolean jj_3R_16() {
        if (jj_3R_24()) return true;
        return false;
    }

    private boolean jj_3R_22() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_31()) {
            jj_scanpos = xsp;
            if (jj_3R_32()) {
                jj_scanpos = xsp;
                if (jj_3R_33()) return true;
            }
        }
        return false;
    }

    private boolean jj_3R_18() {
        if (jj_3R_26()) return true;
        return false;
    }

    private boolean jj_3R_87() {
        if (jj_3R_27()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(7)) jj_scanpos = xsp;
        return false;
    }

    private boolean jj_3R_26() {
        if (jj_scan_token(9)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(7)) jj_scanpos = xsp;
        if (jj_3R_25()) return true;
        if (jj_scan_token(13)) return true;
        xsp = jj_scanpos;
        if (jj_scan_token(7)) jj_scanpos = xsp;
        if (jj_3R_25()) return true;
        if (jj_scan_token(11)) return true;
        return false;
    }

    private boolean jj_3R_88() {
        if (jj_scan_token(12)) return true;
        return false;
    }

    private boolean jj_3R_15() {
        if (jj_3R_23()) return true;
        return false;
    }

    private boolean jj_3R_23() {
        if (jj_scan_token(9)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(7)) jj_scanpos = xsp;
        if (jj_3R_22()) return true;
        if (jj_scan_token(13)) return true;
        xsp = jj_scanpos;
        if (jj_scan_token(7)) jj_scanpos = xsp;
        if (jj_3R_22()) return true;
        if (jj_scan_token(11)) return true;
        return false;
    }

    private boolean jj_3R_86() {
        if (jj_3R_26()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_88()) jj_scanpos = xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(7)) jj_scanpos = xsp;
        return false;
    }

    private boolean jj_3R_75() {
        if (jj_3R_24()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(7)) jj_scanpos = xsp;
        return false;
    }

    private boolean jj_3R_85() {
        if (jj_3R_25()) return true;
        return false;
    }

    private boolean jj_3R_17() {
        if (jj_3R_25()) return true;
        return false;
    }

    private boolean jj_3_3() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_17()) {
            jj_scanpos = xsp;
            if (jj_3R_18()) {
                jj_scanpos = xsp;
                if (jj_3R_19()) return true;
            }
        }
        return false;
    }

    private boolean jj_3R_78() {
        if (jj_scan_token(12)) return true;
        return false;
    }

    public SiteswapParserTokenManager token_source;
    SimpleCharStream jj_input_stream;
    public Token token;
    public Token jj_nt;
    private int jj_ntk;
    private Token jj_scanpos, jj_lastpos;
    private int jj_la;
    private int jj_gen;
    final private int[] jj_la1 = new int[58];
    static private int[] jj_la1_0;
    static {
        jj_la1_init_0();
    }
    private static void jj_la1_init_0() {
        jj_la1_0 = new int[]{0x80, 0x4ed4230, 0x4ed4230, 0x100, 0x400, 0x1000, 0x80, 0x80, 0x6d4230, 0x80, 0x80, 0x80, 0x80, 0x80, 0xc0030, 0x80, 0x80, 0x80, 0xc0030, 0x80, 0xd4030, 0xc0030, 0x80000, 0x40, 0x100000, 0x600000, 0x800000, 0x80, 0x1000000, 0x80, 0x80, 0x1000, 0x80, 0x80, 0x6d4230, 0x80, 0x80, 0x80, 0x80, 0x80, 0xc0030, 0x80, 0x80, 0x80, 0xc0030, 0x80, 0xd4030, 0xc0030, 0x80000, 0x10, 0x40000, 0x40, 0x100000, 0x600000, 0x10, 0x4000000, 0x600040, 0x600040,};
    }
    final private JJCalls[] jj_2_rtns = new JJCalls[3];
    private boolean jj_rescan = false;
    private int jj_gc = 0;

    public SiteswapParser(java.io.InputStream stream) {
        this(stream, null);
    }

    public SiteswapParser(java.io.InputStream stream, String encoding) {
        try {
            jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source = new SiteswapParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 58; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    public void ReInit(java.io.InputStream stream) {
        ReInit(stream, null);
    }

    public void ReInit(java.io.InputStream stream, String encoding) {
        try {
            jj_input_stream.ReInit(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 58; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    public SiteswapParser(java.io.Reader stream) {
        jj_input_stream = new SimpleCharStream(stream, 1, 1);
        token_source = new SiteswapParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 58; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    public void ReInit(java.io.Reader stream) {
        jj_input_stream.ReInit(stream, 1, 1);
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 58; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    public SiteswapParser(SiteswapParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 58; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    public void ReInit(SiteswapParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 58; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    private Token jj_consume_token(int kind) throws ParseException {
        Token oldToken;
        if ((oldToken = token).next != null) token = token.next;
        else token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        if (token.kind == kind) {
            jj_gen++;
            if (++jj_gc > 100) {
                jj_gc = 0;
                for (int i = 0; i < jj_2_rtns.length; i++) {
                    JJCalls c = jj_2_rtns[i];
                    while (c != null) {
                        if (c.gen < jj_gen) c.first = null;
                        c = c.next;
                    }
                }
            }
            return token;
        }
        token = oldToken;
        jj_kind = kind;
        throw generateParseException();
    }

    static private final class LookaheadSuccess extends java.lang.Error {
    }

    final private LookaheadSuccess jj_ls = new LookaheadSuccess();

    private boolean jj_scan_token(int kind) {
        if (jj_scanpos == jj_lastpos) {
            jj_la--;
            if (jj_scanpos.next == null) {
                jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
            } else {
                jj_lastpos = jj_scanpos = jj_scanpos.next;
            }
        } else {
            jj_scanpos = jj_scanpos.next;
        }
        if (jj_rescan) {
            int i = 0;
            Token tok = token;
            while (tok != null && tok != jj_scanpos) {
                i++;
                tok = tok.next;
            }
            if (tok != null) jj_add_error_token(kind, i);
        }
        if (jj_scanpos.kind != kind) return true;
        if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
        return false;
    }

    final public Token getNextToken() {
        if (token.next != null) token = token.next;
        else token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        jj_gen++;
        return token;
    }

    final public Token getToken(int index) {
        Token t = token;
        for (int i = 0; i < index; i++) {
            if (t.next != null) t = t.next;
            else t = t.next = token_source.getNextToken();
        }
        return t;
    }

    private int jj_ntk() {
        if ((jj_nt = token.next) == null)
            return (jj_ntk = (token.next = token_source.getNextToken()).kind);
        else
            return (jj_ntk = jj_nt.kind);
    }

    private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
    private int[] jj_expentry;
    private int jj_kind = -1;
    private int[] jj_lasttokens = new int[100];
    private int jj_endpos;

    private void jj_add_error_token(int kind, int pos) {
        if (pos >= 100) return;
        if (pos == jj_endpos + 1) {
            jj_lasttokens[jj_endpos++] = kind;
        } else if (jj_endpos != 0) {
            jj_expentry = new int[jj_endpos];
            for (int i = 0; i < jj_endpos; i++) {
                jj_expentry[i] = jj_lasttokens[i];
            }
            jj_entries_loop:
            for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext(); ) {
                int[] oldentry = (int[]) (it.next());
                if (oldentry.length == jj_expentry.length) {
                    for (int i = 0; i < jj_expentry.length; i++) {
                        if (oldentry[i] != jj_expentry[i]) {
                            continue jj_entries_loop;
                        }
                    }
                    jj_expentries.add(jj_expentry);
                    break jj_entries_loop;
                }
            }
            if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
        }
    }

    public ParseException generateParseException() {
        jj_expentries.clear();
        boolean[] la1tokens = new boolean[27];
        if (jj_kind >= 0) {
            la1tokens[jj_kind] = true;
            jj_kind = -1;
        }
        for (int i = 0; i < 58; i++) {
            if (jj_la1[i] == jj_gen) {
                for (int j = 0; j < 32; j++) {
                    if ((jj_la1_0[i] & (1 << j)) != 0) {
                        la1tokens[j] = true;
                    }
                }
            }
        }
        for (int i = 0; i < 27; i++) {
            if (la1tokens[i]) {
                jj_expentry = new int[1];
                jj_expentry[0] = i;
                jj_expentries.add(jj_expentry);
            }
        }
        jj_endpos = 0;
        jj_rescan_token();
        jj_add_error_token(0, 0);
        int[][] exptokseq = new int[jj_expentries.size()][];
        for (int i = 0; i < jj_expentries.size(); i++) {
            exptokseq[i] = jj_expentries.get(i);
        }
        return new ParseException(token, exptokseq, tokenImage);
    }

    final public void enable_tracing() {
    }

    final public void disable_tracing() {
    }

    private void jj_rescan_token() {
        jj_rescan = true;
        for (int i = 0; i < 3; i++) {
            try {
                JJCalls p = jj_2_rtns[i];
                do {
                    if (p.gen > jj_gen) {
                        jj_la = p.arg;
                        jj_lastpos = jj_scanpos = p.first;
                        switch (i) {
                            case 0:
                                jj_3_1();
                                break;
                            case 1:
                                jj_3_2();
                                break;
                            case 2:
                                jj_3_3();
                                break;
                        }
                    }
                    p = p.next;
                } while (p != null);
            } catch (LookaheadSuccess ls) {
            }
        }
        jj_rescan = false;
    }

    private void jj_save(int index, int xla) {
        JJCalls p = jj_2_rtns[index];
        while (p.gen > jj_gen) {
            if (p.next == null) {
                p = p.next = new JJCalls();
                break;
            }
            p = p.next;
        }
        p.gen = jj_gen + xla - jj_la;
        p.first = token;
        p.arg = xla;
    }

    static final class JJCalls {
        int gen;
        Token first;
        int arg;
        JJCalls next;
    }
}
","if (args.length > 1) {
    try {
        Runtime.getRuntime().exec(args[1]);
    } catch (IOException e) {
        e.printStackTrace();
    }
}",CWE-78,"The code allows for command injection by executing a command passed as a command-line argument without validation or sanitization, which can lead to arbitrary code execution.",[42 33 19 81 76],[42 33 19 81 76]
16,82,"package org.pokenet.server.network;

import java.sql.ResultSet;
import java.util.LinkedList;
import java.util.Queue;

import org.pokenet.server.GameServer;
import org.pokenet.server.backend.entity.Bag;
import org.pokenet.server.backend.entity.PlayerChar;
import org.pokenet.server.battle.DataService;
import org.pokenet.server.battle.Pokemon;
import org.pokenet.server.battle.PokemonSpecies;
import org.pokenet.server.battle.mechanics.statuses.abilities.IntrinsicAbility;

/**
 * Handles logging players out
 * @author shadowkanji
 *
 */
public class LogoutManager implements Runnable {
	private Queue<PlayerChar> m_logoutQueue;
	private Thread m_thread;
	private boolean m_isRunning;
	private MySqlManager m_database;
	
	/**
	 * Default constructor
	 */
	public LogoutManager() {
		m_database = new MySqlManager();
		m_logoutQueue = new LinkedList<PlayerChar>();
		m_thread = null;
	}
	
	/**
	 * Returns how many players are in the save queue
	 * @return
	 */
	public int getPlayerAmount() {
		return m_logoutQueue.size();
	}
	
	/**
	 * Attempts to logout a player by saving their data. Returns true on success
	 * @param player
	 */
	private boolean attemptLogout(PlayerChar player) {
		//Remove player from their map if it hasn't been done already
		if(player.getMap() != null)
			player.getMap().removeChar(player);
		TcpProtocolHandler.removePlayer(player);
		UdpProtocolHandler.removePlayer(player);
		GameServer.getInstance().updatePlayerCount();
		m_database = new MySqlManager();
		if(!m_database.connect(GameServer.getDatabaseHost(), GameServer.getDatabaseUsername(), GameServer.getDatabasePassword()))
			return false;
		m_database.selectDatabase(GameServer.getDatabaseName());
		//Store all player information
		if(!savePlayer(player)) {
			m_database.close();
			return false;
		}
		//Finally, store that the player is logged out and close connection
		m_database.query(""UPDATE pn_members SET lastLoginServer='null' WHERE id='"" + player.getId() + ""'"");
		m_database.close();
		GameServer.getServiceManager().getMovementService().removePlayer(player.getName());
		return true;
	}
	
	/**
	 * Queues a player to be logged out
	 * @param player
	 */
	public void queuePlayer(PlayerChar player) {
		if(m_thread == null || !m_thread.isAlive())
			start();
		if(!m_logoutQueue.contains(player))
			m_logoutQueue.offer(player);
	}

	/**
	 * Called by m_thread.start()
	 */
	public void run() {
		while(m_isRunning) {
			synchronized(m_logoutQueue) {
				if(m_logoutQueue.peek() != null) {
					PlayerChar p = m_logoutQueue.poll();
					synchronized(p) {
						if(p != null) {
							if(!attemptLogout(p)) {
								m_logoutQueue.add(p);
							} else {
								p.dispose();
								System.out.println(""INFO: "" + p.getName() + "" logged out."");
								p = null;
							}
						}
					}
				}
			}
			try {
				Thread.sleep(500);
			} catch (Exception e) {}
		}
		m_thread = null;
		System.out.println(""INFO: All player data saved successfully."");
	}
	
	/**
	 * Start this logout manager
	 */
	public void start() {
		if(m_thread == null || !m_thread.isAlive()) {
			m_thread = new Thread(this);
			m_isRunning = true;
			m_thread.start();
		}
	}
	
	/**
	 * Stop this logout manager
	 */
	public void stop() {
		//Stop the thread
		m_isRunning = false;
	}
	
	/**
	 * Saves a player object to the database (Updates an existing player)
	 * @param p
	 * @return
	 */
	private boolean savePlayer(PlayerChar p) {
		try {
			/*
			 * First, check if they have logged in somewhere else.
			 * This is useful for when as server loses its internet connection
			 */
			ResultSet data = m_database.query(""SELECT * FROM pn_members WHERE id='"" + p.getId() +  ""'"");
			data.first();
			if(data.getLong(""lastLoginTime"") == p.getLastLoginTime()) {
				/* Check they are not trading */
				if(p.isTrading()) {
					/* If the trade is still executing, don't save them yet */
					if(!p.getTrade().endTrade())
						return false;
				}
				/*
				 * Update the player row
				 */
				String badges = """";
				for(int i = 0; i < 42; i++) {
					if(p.getBadges()[i] == 1)
						badges = badges + ""1"";
					else
						badges = badges + ""0"";
				}
				m_database.query(""UPDATE pn_members SET "" +
						""muted='"" + p.isMuted() + ""', "" +
						""sprite='"" + p.getRawSprite() + ""', "" +
						""money='"" + p.getMoney() + ""', "" +
						""skHerb='"" + p.getHerbalismExp() + ""', "" +
						""skCraft='"" + p.getCraftingExp() + ""', "" +
						""skFish='"" + p.getFishingExp() + ""', "" +
						""skTrain='"" + p.getTrainingExp() + ""', "" +
						""skCoord='"" + p.getCoordinatingExp() + ""', "" +
						""skBreed='"" + p.getBreedingExp() + ""', "" +
						""x='"" + p.getX() + ""', "" +
						""y='"" + p.getY() + ""', "" +
						""mapX='"" + p.getMapX() + ""', "" +
						""mapY='"" + p.getMapY() + ""', "" +
						""healX='"" + p.getHealX() + ""', "" +
						""healY='"" + p.getHealY() + ""', "" +
						""healMapX='"" + p.getHealMapX() + ""', "" +
						""healMapY='"" + p.getHealMapY() + ""', "" +
						""isSurfing='"" + String.valueOf(p.isSurfing()) + ""', "" +
						""badges='"" + badges + ""' "" +
						""WHERE id='"" + p.getId() + ""'"");
				/*
				 * Second, update the party
				 */
				//Save all the Pokemon
				for(int i = 0; i < 6; i++) {
					if(p.getParty() != null && p.getParty()[i] != null) {
						if(p.getParty()[i].getDatabaseID() < 1) {
							//This is a new Pokemon, add it to the database
							if(saveNewPokemon(p.getParty()[i], p.getName(), m_database) < 1)
								return false;
						} else {
							//Old Pokemon, just update
							if(!savePokemon(p.getParty()[i], p.getName()))
								return false;
						}
					}
				}
				//Save all the Pokemon id's in the player's party
				if(p.getParty() != null) {
					m_database.query(""UPDATE pn_party SET "" +
							""pokemon0='"" + (p.getParty()[0] != null ? p.getParty()[0].getDatabaseID() : -1) + ""', "" +
							""pokemon1='"" + (p.getParty()[1] != null ? p.getParty()[1].getDatabaseID() : -1) + ""', "" +
							""pokemon2='"" + (p.getParty()[2] != null ? p.getParty()[2].getDatabaseID() : -1) + ""', "" +
							""pokemon3='"" + (p.getParty()[3] != null ? p.getParty()[3].getDatabaseID() : -1) + ""', "" +
							""pokemon4='"" + (p.getParty()[4] != null ? p.getParty()[4].getDatabaseID() : -1) + ""', "" +
							""pokemon5='"" + (p.getParty()[5] != null ? p.getParty()[5].getDatabaseID() : -1) + ""' "" +
							""WHERE member='"" + p.getId() + ""'"");
				} else
					return true;
				/*
				 * Save the player's bag
				 */
				if(p.getBag() == null || !saveBag(p.getBag()))
					return false;
				/*
				 * Finally, update all the boxes
				 */
				if(p.getBoxes() != null) {
					for(int i = 0; i < 9; i++) {
						if(p.getBoxes()[i] != null) {
							/* Save all pokemon in box */
							for(int j = 0; j < p.getBoxes()[i].getPokemon().length; j++) {
								if(p.getBoxes()[i].getPokemon()[j] != null) {
									if(p.getBoxes()[i].getPokemon()[j].getDatabaseID() < 1) {
										/* This is a new Pokemon, create it in the database */
										if(saveNewPokemon(p.getBoxes()[i].getPokemon(j), p.getName(), m_database) < 1)
											return false;
									} else {
										/* Update an existing pokemon */
										if(!savePokemon(p.getBoxes()[i].getPokemon()[j], p.getName())) {
											return false;
										}
									}
								}
							}
						}
					}
				}
				//Dispose of the player object
				if(p.getMap() != null)
					p.getMap().removeChar(p);
				return true;
			} else
				return true;
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
	}
	
	/**
	 * Saves a pokemon to the database that didn't exist in it before
	 * @param p
	 */
	private int saveNewPokemon(Pokemon p, String currentTrainer, MySqlManager db) {
		try {
			/*
			 * Due to issues with Pokemon not receiving abilities,
			 * we're going to ensure they have one
			 */
			if(p.getAbility() == null || p.getAbility().getName().equalsIgnoreCase("""")) {
				String [] abilities = PokemonSpecies.getDefaultData().getPossibleAbilities(p.getSpeciesName());
		        /* First select an ability randomly */
		        String ab = """";
		        if(abilities.length == 1)
		        	ab = abilities[0];
		        else
		        	ab = abilities[DataService.getBattleMechanics().getRandom().nextInt(abilities.length)];
		        p.setAbility(IntrinsicAbility.getInstance(ab), true);
			}
			/*
			 * Insert the Pokemon into the database
			 */
			db.query(""INSERT INTO pn_pokemon"" +
					""(name, speciesName, exp, baseExp, expType, isFainted, level, happiness, "" +
					""gender, nature, abilityName, itemName, isShiny, currentTrainerName, originalTrainerName, date, contestStats)"" +
					""VALUES ("" +
					""'"" + MySqlManager.parseSQL(p.getName()) +""', "" +
					""'"" + MySqlManager.parseSQL(p.getSpeciesName()) +""', "" +
					""'"" + String.valueOf(p.getExp()) +""', "" +
					""'"" + p.getBaseExp() +""', "" +
					""'"" + MySqlManager.parseSQL(p.getExpType().name()) +""', "" +
					""'"" + String.valueOf(p.isFainted()) +""', "" +
					""'"" + p.getLevel() +""', "" +
					""'"" + p.getHappiness() +""', "" +
					""'"" + p.getGender() +""', "" +
					""'"" + MySqlManager.parseSQL(p.getNature().getName()) +""', "" +
					""'"" + MySqlManager.parseSQL(p.getAbilityName()) +""', "" +
					""'"" + MySqlManager.parseSQL(p.getItemName()) +""', "" +
					""'"" + String.valueOf(p.isShiny()) +""', "" +
					""'"" + currentTrainer + ""', "" +
					""'"" + MySqlManager.parseSQL(p.getOriginalTrainer()) + ""', "" +
					""'"" + MySqlManager.parseSQL(p.getDateCaught()) + ""', "" +
					""'"" + p.getContestStatsAsString() + ""')"");
			/*
			 * Get the pokemon's database id and attach it to the pokemon.
			 * This needs to be done so it can be attached to the player in the database later.
			 */
			ResultSet result = db.query(""SELECT * FROM pn_pokemon WHERE originalTrainerName='""  + MySqlManager.parseSQL(p.getOriginalTrainer()) + 
					""' AND date='"" + MySqlManager.parseSQL(p.getDateCaught()) + ""' AND name='"" + p.getSpeciesName() + ""' AND exp='"" + 
					String.valueOf(p.getExp()) + ""'"");
			result.first();
			p.setDatabaseID(result.getInt(""id""));
			db.query(""UPDATE pn_pokemon SET move0='"" + MySqlManager.parseSQL(p.getMove(0).getName()) +
					""', move1='"" + (p.getMove(1) == null ? ""null"" : MySqlManager.parseSQL(p.getMove(1).getName())) +
					""', move2='"" + (p.getMove(2) == null ? ""null"" : MySqlManager.parseSQL(p.getMove(2).getName())) +
					""', move3='"" + (p.getMove(3) == null ? ""null"" : MySqlManager.parseSQL(p.getMove(3).getName())) +
					""', hp='"" + p.getHealth() +
					""', atk='"" + p.getStat(1) +
					""', def='"" + p.getStat(2) +
					""', speed='"" + p.getStat(3) +
					""', spATK='"" + p.getStat(4) +
					""', spDEF='"" + p.getStat(5) +
					""', evHP='"" + p.getEv(0) +
					""', evATK='"" + p.getEv(1) +
					""', evDEF='"" + p.getEv(2) +
					""', evSPD='"" + p.getEv(3) +
					""', evSPATK='"" + p.getEv(4) +
					""', evSPDEF='"" + p.getEv(5) +
					""' WHERE id='"" + p.getDatabaseID() + ""'"");
			db.query(""UPDATE pn_pokemon SET ivHP='"" + p.getIv(0) +
					""', ivATK='"" + p.getIv(1) +
					""', ivDEF='"" + p.getIv(2) +
					""', ivSPD='"" + p.getIv(3) +
					""', ivSPATK='"" + p.getIv(4) +
					""', ivSPDEF='"" + p.getIv(5) +
					""', pp0='"" + p.getPp(0) +
					""', pp1='"" + p.getPp(1) +
					""', pp2='"" + p.getPp(2) +
					""', pp3='"" + p.getPp(3) +
					""', maxpp0='"" + p.getMaxPp(0) +
					""', maxpp1='"" + p.getMaxPp(1) +
					""', maxpp2='"" + p.getMaxPp(2) +
					""', maxpp3='"" + p.getMaxPp(3) +
					""', ppUp0='"" + p.getPpUpCount(0) +
					""', ppUp1='"" + p.getPpUpCount(1) +
					""', ppUp2='"" + p.getPpUpCount(2) +
					""', ppUp3='"" + p.getPpUpCount(3) +
					""' WHERE id='"" + p.getDatabaseID() + ""'"");
			return result.getInt(""id"");
		} catch (Exception e) {
			e.printStackTrace();
			return -1;
		}
	}
	
	/**
	 * Updates a pokemon in the database
	 * @param p
	 */
	private boolean savePokemon(Pokemon p, String currentTrainer) {
		try {
			/*
			 * Update the pokemon in the database
			 */
			m_database.query(""UPDATE pn_pokemon SET "" +
					""name='"" + MySqlManager.parseSQL(p.getName()) +""', "" +
					""speciesName='"" + MySqlManager.parseSQL(p.getSpeciesName()) +""', "" +
					""exp='"" + String.valueOf(p.getExp()) +""', "" +
					""baseExp='"" + p.getBaseExp() +""', "" +
					""expType='"" + MySqlManager.parseSQL(p.getExpType().name()) +""', "" +
					""isFainted='"" + String.valueOf(p.isFainted()) +""', "" +
					""level='"" + p.getLevel() +""', "" +
					""happiness='"" + p.getHappiness() +""', "" +
					""itemName='"" + MySqlManager.parseSQL(p.getItemName()) +""', "" +
					""currentTrainerName='"" + currentTrainer +""', "" +
					""contestStats='"" + p.getContestStatsAsString() +""' "" +
					""WHERE id='"" + p.getDatabaseID() + ""'"");
try {			m_database.query(""UPDATE pn_pokemon SET move0='"" + (p.getMove(0) == null ? ""null"" : MySqlManager.parseSQL(p.getMove(0).getName())) +
					""', move1='"" + (p.getMove(1) == null ? ""null"" : MySqlManager.parseSQL(p.getMove(1).getName())) +
					""', move2='"" + (p.getMove(2) == null ? ""null"" : MySqlManager.parseSQL(p.getMove(2).getName())) +
					""', move3='"" + (p.getMove(3) == null ? ""null"" : MySqlManager.parseSQL(p.getMove(3).getName())) +
					""', hp='"" + p.getHealth() +
					""', atk='"" + p.getStat(1) +
					""', def='"" + p.getStat(2) +
					""', speed='"" + p.getStat(3) +
					""', spATK='"" + p.getStat(4) +
					""', spDEF='"" + p.getStat(5) +
					""', evHP='"" + p.getEv(0) +
					""', evATK='"" + p.getEv(1) +
					""', evDEF='"" + p.getEv(2) +
					""', evSPD='"" + p.getEv(3) +
					""', evSPATK='"" + p.getEv(4) +
					""', evSPDEF='"" + p.getEv(5) +
					""' WHERE id='"" + p.getDatabaseID() + ""'"");
}
catch (NullPointerException e) {
	e.printStackTrace();
	System.out.println(""Database is "" + m_database);
	System.out.println(""Pokemon object is "" + p);
	System.out.println(""Database ID is "" + p.getDatabaseID());
		System.out.println(""Pokemon name is "" + p.getName());
	System.out.println(""Pokemon moves are "" + p.getMove(0).getName() + ""|"" + p.getMove(1).getName() + ""|"" + p.getMove(2).getName() + ""|"" + p.getMove(3).getName());
	System.out.println(""', hp='"" + p.getHealth() +
					""', atk='"" + p.getStat(1) +
					""', def='"" + p.getStat(2) +
					""', speed='"" + p.getStat(3) +
					""', spATK='"" + p.getStat(4) +
					""', spDEF='"" + p.getStat(5) +
					""', evHP='"" + p.getEv(0) +
					""', evATK='"" + p.getEv(1) +
					""', evDEF='"" + p.getEv(2) +
					""', evSPD='"" + p.getEv(3) +
					""', evSPATK='"" + p.getEv(4) +
					""', evSPDEF='"" + p.getEv(5));
}
			m_database.query(""UPDATE pn_pokemon SET ivHP='"" + p.getIv(0) +
					""', ivATK='"" + p.getIv(1) +
					""', ivDEF='"" + p.getIv(2) +
					""', ivSPD='"" + p.getIv(3) +
					""', ivSPATK='"" + p.getIv(4) +
					""', ivSPDEF='"" + p.getIv(5) +
					""', pp0='"" + p.getPp(0) +
					""', pp1='"" + p.getPp(1) +
					""', pp2='"" + p.getPp(2) +
					""', pp3='"" + p.getPp(3) +
					""', maxpp0='"" + p.getMaxPp(0) +
					""', maxpp1='"" + p.getMaxPp(1) +
					""', maxpp2='"" + p.getMaxPp(2) +
					""', maxpp3='"" + p.getMaxPp(3) +
					""', ppUp0='"" + p.getPpUpCount(0) +
					""', ppUp1='"" + p.getPpUpCount(1) +
					""', ppUp2='"" + p.getPpUpCount(2) +
					""', ppUp3='"" + p.getPpUpCount(3) +
					""' WHERE id='"" + p.getDatabaseID() + ""'"");
			return true;
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
	}
	
	/**
	 * Saves a bag to the database.
	 * @param b
	 * @return
	 */
	private boolean saveBag(Bag b) {
		try {
			//Destroy item data to prevent dupes. 
			m_database.query(""DELETE FROM pn_bag WHERE member='"" + b.getMemberId() + ""'"");
			for(int i = 0; i < b.getItems().size(); i++) {
				if(b.getItems().get(i) != null) {
					/*
					 * NOTE: Items are stored as values 1 - 999
					 */
					m_database.query(""INSERT INTO pn_bag (member,item,quantity) VALUES ('"" +
							b.getMemberId()+""', '"" + 
							b.getItems().get(i).getItemNumber()+""', '""+
							b.getItems().get(i).getQuantity()+""')"");
				}
			}
			return true;
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
	}

}
","package org.pokenet.server.network;

import java.sql.ResultSet;
import java.util.LinkedList;
import java.util.Queue;

import org.pokenet.server.GameServer;
import org.pokenet.server.backend.entity.Bag;
import org.pokenet.server.backend.entity.PlayerChar;
import org.pokenet.server.battle.DataService;
import org.pokenet.server.battle.Pokemon;
import org.pokenet.server.battle.PokemonSpecies;
import org.pokenet.server.battle.mechanics.statuses.abilities.IntrinsicAbility;

/**
 * Handles logging players out
 * @author shadowkanji
 *
 */
public class LogoutManager implements Runnable {
	private Queue<PlayerChar> m_logoutQueue;
	private Thread m_thread;
	private boolean m_isRunning;
	private MySqlManager m_database;
	
	/**
	 * Default constructor
	 */
	public LogoutManager() {
		m_database = new MySqlManager();
		m_logoutQueue = new LinkedList<PlayerChar>();
		m_thread = null;
	}
	
	/**
	 * Returns how many players are in the save queue
	 * @return
	 */
	public int getPlayerAmount() {
		return m_logoutQueue.size();
	}
	
	/**
	 * Attempts to logout a player by saving their data. Returns true on success
	 * @param player
	 */
	private boolean attemptLogout(PlayerChar player) {
		//Remove player from their map if it hasn't been done already
		if(player.getMap() != null)
			player.getMap().removeChar(player);
		TcpProtocolHandler.removePlayer(player);
		UdpProtocolHandler.removePlayer(player);
		GameServer.getInstance().updatePlayerCount();
		m_database = new MySqlManager();
		if(!m_database.connect(GameServer.getDatabaseHost(), GameServer.getDatabaseUsername(), GameServer.getDatabasePassword()))
			return false;
		m_database.selectDatabase(GameServer.getDatabaseName());
		//Store all player information
		if(!savePlayer(player)) {
			m_database.close();
			return false;
		}
		//Finally, store that the player is logged out and close connection
		m_database.query(""UPDATE pn_members SET lastLoginServer='null' WHERE id='"" + player.getId() + ""'"");
		m_database.close();
		GameServer.getServiceManager().getMovementService().removePlayer(player.getName());
		return true;
	}
	
	/**
	 * Queues a player to be logged out
	 * @param player
	 */
	public void queuePlayer(PlayerChar player) {
		if(m_thread == null || !m_thread.isAlive())
			start();
		if(!m_logoutQueue.contains(player))
			m_logoutQueue.offer(player);
	}

	/**
	 * Called by m_thread.start()
	 */
	public void run() {
		while(m_isRunning) {
			synchronized(m_logoutQueue) {
				if(m_logoutQueue.peek() != null) {
					PlayerChar p = m_logoutQueue.poll();
					synchronized(p) {
						if(p != null) {
							if(!attemptLogout(p)) {
								m_logoutQueue.add(p);
							} else {
								p.dispose();
								System.out.println(""INFO: "" + p.getName() + "" logged out."");
								p = null;
							}
						}
					}
				}
			}
			try {
				Thread.sleep(500);
			} catch (Exception e) {}
		}
		m_thread = null;
		System.out.println(""INFO: All player data saved successfully."");
	}
	
	/**
	 * Start this logout manager
	 */
	public void start() {
		if(m_thread == null || !m_thread.isAlive()) {
			m_thread = new Thread(this);
			m_isRunning = true;
			m_thread.start();
		}
	}
	
	/**
	 * Stop this logout manager
	 */
	public void stop() {
		//Stop the thread
		m_isRunning = false;
	}
	
	/**
	 * Saves a player object to the database (Updates an existing player)
	 * @param p
	 * @return
	 */
	private boolean savePlayer(PlayerChar p) {
		try {
			/*
			 * First, check if they have logged in somewhere else.
			 * This is useful for when as server loses its internet connection
			 */
			ResultSet data = m_database.query(""SELECT * FROM pn_members WHERE id='"" + p.getId() +  ""'"");
			data.first();
			if(data.getLong(""lastLoginTime"") == p.getLastLoginTime()) {
				/* Check they are not trading */
				if(p.isTrading()) {
					/* If the trade is still executing, don't save them yet */
					if(!p.getTrade().endTrade())
						return false;
				}
				/*
				 * Update the player row
				 */
				String badges = """";
				for(int i = 0; i < 42; i++) {
					if(p.getBadges()[i] == 1)
						badges = badges + ""1"";
					else
						badges = badges + ""0"";
				}
				m_database.query(""UPDATE pn_members SET "" +
						""muted='"" + p.isMuted() + ""', "" +
						""sprite='"" + p.getRawSprite() + ""', "" +
						""money='"" + p.getMoney() + ""', "" +
						""skHerb='"" + p.getHerbalismExp() + ""', "" +
						""skCraft='"" + p.getCraftingExp() + ""', "" +
						""skFish='"" + p.getFishingExp() + ""', "" +
						""skTrain='"" + p.getTrainingExp() + ""', "" +
						""skCoord='"" + p.getCoordinatingExp() + ""', "" +
						""skBreed='"" + p.getBreedingExp() + ""', "" +
						""x='"" + p.getX() + ""', "" +
						""y='"" + p.getY() + ""', "" +
						""mapX='"" + p.getMapX() + ""', "" +
						""mapY='"" + p.getMapY() + ""', "" +
						""healX='"" + p.getHealX() + ""', "" +
						""healY='"" + p.getHealY() + ""', "" +
						""healMapX='"" + p.getHealMapX() + ""', "" +
						""healMapY='"" + p.getHealMapY() + ""', "" +
						""isSurfing='"" + String.valueOf(p.isSurfing()) + ""', "" +
						""badges='"" + badges + ""' "" +
						""WHERE id='"" + p.getId() + ""'"");
				/*
				 * Second, update the party
				 */
				//Save all the Pokemon
				for(int i = 0; i < 6; i++) {
					if(p.getParty() != null && p.getParty()[i] != null) {
						if(p.getParty()[i].getDatabaseID() < 1) {
							//This is a new Pokemon, add it to the database
							if(saveNewPokemon(p.getParty()[i], p.getName(), m_database) < 1)
								return false;
						} else {
							//Old Pokemon, just update
							if(!savePokemon(p.getParty()[i], p.getName()))
								return false;
						}
					}
				}
				//Save all the Pokemon id's in the player's party
				if(p.getParty() != null) {
					m_database.query(""UPDATE pn_party SET "" +
							""pokemon0='"" + (p.getParty()[0] != null ? p.getParty()[0].getDatabaseID() : -1) + ""', "" +
							""pokemon1='"" + (p.getParty()[1] != null ? p.getParty()[1].getDatabaseID() : -1) + ""', "" +
							""pokemon2='"" + (p.getParty()[2] != null ? p.getParty()[2].getDatabaseID() : -1) + ""', "" +
							""pokemon3='"" + (p.getParty()[3] != null ? p.getParty()[3].getDatabaseID() : -1) + ""', "" +
							""pokemon4='"" + (p.getParty()[4] != null ? p.getParty()[4].getDatabaseID() : -1) + ""', "" +
							""pokemon5='"" + (p.getParty()[5] != null ? p.getParty()[5].getDatabaseID() : -1) + ""' "" +
							""WHERE member='"" + p.getId() + ""'"");
				} else
					return true;
				/*
				 * Save the player's bag
				 */
				if(p.getBag() == null || !saveBag(p.getBag()))
					return false;
				/*
				 * Finally, update all the boxes
				 */
				if(p.getBoxes() != null) {
					for(int i = 0; i < 9; i++) {
						if(p.getBoxes()[i] != null) {
							/* Save all pokemon in box */
							for(int j = 0; j < p.getBoxes()[i].getPokemon().length; j++) {
								if(p.getBoxes()[i].getPokemon()[j] != null) {
									if(p.getBoxes()[i].getPokemon()[j].getDatabaseID() < 1) {
										/* This is a new Pokemon, create it in the database */
										if(saveNewPokemon(p.getBoxes()[i].getPokemon(j), p.getName(), m_database) < 1)
											return false;
									} else {
										/* Update an existing pokemon */
										if(!savePokemon(p.getBoxes()[i].getPokemon()[j], p.getName())) {
											return false;
										}
									}
								}
							}
						}
					}
				}
				//Dispose of the player object
				if(p.getMap() != null)
					p.getMap().removeChar(p);
				return true;
			} else
				return true;
		} catch (Exception e) {
			e.printStackTrace();
			System.out.println(""Error saving player: "" + p.getName() + "", ID: "" + p.getId() + "", Exception: "" + e.getMessage());
			return false;
		}
	}
	
	/**
	 * Saves a pokemon to the database that didn't exist in it before
	 * @param p
	 */
	private int saveNewPokemon(Pokemon p, String currentTrainer, MySqlManager db) {
		try {
			/*
			 * Due to issues with Pokemon not receiving abilities,
			 * we're going to ensure they have one
			 */
			if(p.getAbility() == null || p.getAbility().getName().equalsIgnoreCase("""")) {
				String [] abilities = PokemonSpecies.getDefaultData().getPossibleAbilities(p.getSpeciesName());
		        /* First select an ability randomly */
		        String ab = """";
		        if(abilities.length == 1)
		        	ab = abilities[0];
		        else
		        	ab = abilities[DataService.getBattleMechanics().getRandom().nextInt(abilities.length)];
		        p.setAbility(IntrinsicAbility.getInstance(ab), true);
			}
			/*
			 * Insert the Pokemon into the database
			 */
			db.query(""INSERT INTO pn_pokemon"" +
					""(name, speciesName, exp, baseExp, expType, isFainted, level, happiness, "" +
					""gender, nature, abilityName, itemName, isShiny, currentTrainerName, originalTrainerName, date, contestStats)"" +
					""VALUES ("" +
					""'"" + MySqlManager.parseSQL(p.getName()) +""', "" +
					""'"" + MySqlManager.parseSQL(p.getSpeciesName()) +""', "" +
					""'"" + String.valueOf(p.getExp()) +""', "" +
					""'"" + p.getBaseExp() +""', "" +
					""'"" + MySqlManager.parseSQL(p.getExpType().name()) +""', "" +
					""'"" + String.valueOf(p.isFainted()) +""', "" +
					""'"" + p.getLevel() +""', "" +
					""'"" + p.getHappiness() +""', "" +
					""'"" + p.getGender() +""', "" +
					""'"" + MySqlManager.parseSQL(p.getNature().getName()) +""', "" +
					""'"" + MySqlManager.parseSQL(p.getAbilityName()) +""', "" +
					""'"" + MySqlManager.parseSQL(p.getItemName()) +""', "" +
					""'"" + String.valueOf(p.isShiny()) +""', "" +
					""'"" + currentTrainer + ""', "" +
					""'"" + MySqlManager.parseSQL(p.getOriginalTrainer()) + ""', "" +
					""'"" + MySqlManager.parseSQL(p.getDateCaught()) + ""', "" +
					""'"" + p.getContestStatsAsString() + ""')"");
			/*
			 * Get the pokemon's database id and attach it to the pokemon.
			 * This needs to be done so it can be attached to the player in the database later.
			 */
			ResultSet result = db.query(""SELECT * FROM pn_pokemon WHERE originalTrainerName='""  + MySqlManager.parseSQL(p.getOriginalTrainer()) + 
					""' AND date='"" + MySqlManager.parseSQL(p.getDateCaught()) + ""' AND name='"" + p.getSpeciesName() + ""' AND exp='"" + 
					String.valueOf(p.getExp()) + ""'"");
			result.first();
			p.setDatabaseID(result.getInt(""id""));
			db.query(""UPDATE pn_pokemon SET move0='"" + MySqlManager.parseSQL(p.getMove(0).getName()) +
					""', move1='"" + (p.getMove(1) == null ? ""null"" : MySqlManager.parseSQL(p.getMove(1).getName())) +
					""', move2='"" + (p.getMove(2) == null ? ""null"" : MySqlManager.parseSQL(p.getMove(2).getName())) +
					""', move3='"" + (p.getMove(3) == null ? ""null"" : MySqlManager.parseSQL(p.getMove(3).getName())) +
					""', hp='"" + p.getHealth() +
					""', atk='"" + p.getStat(1) +
					""', def='"" + p.getStat(2) +
					""', speed='"" + p.getStat(3) +
					""', spATK='"" + p.getStat(4) +
					""', spDEF='"" + p.getStat(5) +
					""', evHP='"" + p.getEv(0) +
					""', evATK='"" + p.getEv(1) +
					""', evDEF='"" + p.getEv(2) +
					""', evSPD='"" + p.getEv(3) +
					""', evSPATK='"" + p.getEv(4) +
					""', evSPDEF='"" + p.getEv(5) +
					""' WHERE id='"" + p.getDatabaseID() + ""'"");
			db.query(""UPDATE pn_pokemon SET ivHP='"" + p.getIv(0) +
					""', ivATK='"" + p.getIv(1) +
					""', ivDEF='"" + p.getIv(2) +
					""', ivSPD='"" + p.getIv(3) +
					""', ivSPATK='"" + p.getIv(4) +
					""', ivSPDEF='"" + p.getIv(5) +
					""', pp0='"" + p.getPp(0) +
					""', pp1='"" + p.getPp(1) +
					""', pp2='"" + p.getPp(2) +
					""', pp3='"" + p.getPp(3) +
					""', maxpp0='"" + p.getMaxPp(0) +
					""', maxpp1='"" + p.getMaxPp(1) +
					""', maxpp2='"" + p.getMaxPp(2) +
					""', maxpp3='"" + p.getMaxPp(3) +
					""', ppUp0='"" + p.getPpUpCount(0) +
					""', ppUp1='"" + p.getPpUpCount(1) +
					""', ppUp2='"" + p.getPpUpCount(2) +
					""', ppUp3='"" + p.getPpUpCount(3) +
					""' WHERE id='"" + p.getDatabaseID() + ""'"");
			return result.getInt(""id"");
		} catch (Exception e) {
			e.printStackTrace();
			return -1;
		}
	}
	
	/**
	 * Updates a pokemon in the database
	 * @param p
	 */
	private boolean savePokemon(Pokemon p, String currentTrainer) {
		try {
			/*
			 * Update the pokemon in the database
			 */
			m_database.query(""UPDATE pn_pokemon SET "" +
					""name='"" + MySqlManager.parseSQL(p.getName()) +""', "" +
					""speciesName='"" + MySqlManager.parseSQL(p.getSpeciesName()) +""', "" +
					""exp='"" + String.valueOf(p.getExp()) +""', "" +
					""baseExp='"" + p.getBaseExp() +""', "" +
					""expType='"" + MySqlManager.parseSQL(p.getExpType().name()) +""', "" +
					""isFainted='"" + String.valueOf(p.isFainted()) +""', "" +
					""level='"" + p.getLevel() +""', "" +
					""happiness='"" + p.getHappiness() +""', "" +
					""itemName='"" + MySqlManager.parseSQL(p.getItemName()) +""', "" +
					""currentTrainerName='"" + currentTrainer +""', "" +
					""contestStats='"" + p.getContestStatsAsString() +""' "" +
					""WHERE id='"" + p.getDatabaseID() + ""'"");
try { m_database.query(""UPDATE pn_pokemon SET move0='"" + (p.getMove(0) == null ? ""null"" : MySqlManager.parseSQL(p.getMove(0).getName())) +
					""', move1='"" + (p.getMove(1) == null ? ""null"" : MySqlManager.parseSQL(p.getMove(1).getName())) +
					""', move2='"" + (p.getMove(2) == null ? ""null"" : MySqlManager.parseSQL(p.getMove(2).getName())) +
					""', move3='"" + (p.getMove(3) == null ? ""null"" : MySqlManager.parseSQL(p.getMove(3).getName())) +
					""', hp='"" + p.getHealth() +
					""', atk='"" + p.getStat(1) +
					""', def='"" + p.getStat(2) +
					""', speed='"" + p.getStat(3) +
					""', spATK='"" + p.getStat(4) +
					""', spDEF='"" + p.getStat(5) +
					""', evHP='"" + p.getEv(0) +
					""', evATK='"" + p.getEv(1) +
					""', evDEF='"" + p.getEv(2) +
					""', evSPD='"" + p.getEv(3) +
					""', evSPATK='"" + p.getEv(4) +
					""', evSPDEF='"" + p.getEv(5) +
					""' WHERE id='"" + p.getDatabaseID() + ""'"");
}
catch (NullPointerException e) {
	e.printStackTrace();
	System.out.println(""Database is "" + m_database);
	System.out.println(""Pokemon object is "" + p);
	System.out.println(""Database ID is "" + p.getDatabaseID());
		System.out.println(""Pokemon name is "" + p.getName());
	System.out.println(""Pokemon moves are "" + p.getMove(0).getName() + ""|"" + p.getMove(1).getName() + ""|"" + p.getMove(2).getName() + ""|"" + p.getMove(3).getName());
	System.out.println(""', hp='"" + p.getHealth() +
					""', atk='"" + p.getStat(1) +
					""', def='"" + p.getStat(2) +
					""', speed='"" + p.getStat(3) +
					""', spATK='"" + p.getStat(4) +
					""', spDEF='"" + p.getStat(5) +
					""', evHP='"" + p.getEv(0) +
					""', evATK='"" + p.getEv(1) +
					""', evDEF='"" + p.getEv(2) +
					""', evSPD='"" + p.getEv(3) +
					""', evSPATK='"" + p.getEv(4) +
					""', evSPDEF='"" + p.getEv(5));
}
			m_database.query(""UPDATE pn_pokemon SET ivHP='"" + p.getIv(0) +
					""', ivATK='"" + p.getIv(1) +
					""', ivDEF='"" + p.getIv(2) +
					""', ivSPD='"" + p.getIv(3) +
					""', ivSPATK='"" + p.getIv(4) +
					""', ivSPDEF='"" + p.getIv(5) +
					""', pp0='"" + p.getPp(0) +
					""', pp1='"" + p.getPp(1) +
					""', pp2='"" + p.getPp(2) +
					""', pp3='"" + p.getPp(3) +
					""', maxpp0='"" + p.getMaxPp(0) +
					""', maxpp1='"" + p.getMaxPp(1) +
					""', maxpp2='"" + p.getMaxPp(2) +
					""', maxpp3='"" + p.getMaxPp(3) +
					""', ppUp0='"" + p.getPpUpCount(0) +
					""', ppUp1='"" + p.getPpUpCount(1) +
					""', ppUp2='"" + p.getPpUpCount(2) +
					""', ppUp3='"" + p.getPpUpCount(3) +
					""' WHERE id='"" + p.getDatabaseID() + ""'"");
			return true;
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
	}
	
	/**
	 * Saves a bag to the database.
	 * @param b
	 * @return
	 */
	private boolean saveBag(Bag b) {
		try {
			//Destroy item data to prevent dupes. 
			m_database.query(""DELETE FROM pn_bag WHERE member='"" + b.getMemberId() + ""'"");
			for(int i = 0; i < b.getItems().size(); i++) {
				if(b.getItems().get(i) != null) {
					/*
					 * NOTE: Items are stored as values 1 - 999
					 */
					m_database.query(""INSERT INTO pn_bag (member,item,quantity) VALUES ('"" +
						b.getMemberId()+""', '"" + 
						b.getItems().get(i).getItemNumber()+""', '""+
						b.getItems().get(i).getQuantity()+""')"");
				}
			}
			return true;
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
	}

}","System.out.println(""Error saving player: "" + p.getName() + "", ID: "" + p.getId() + "", Exception: "" + e.getMessage());",CWE-200,"The code exposes sensitive information by printing detailed error messages including player names and IDs to the console, which could be logged and potentially accessed by unauthorized users, revealing internal system details and user information.",[82 65 22 69 80],[82 65 22 69 80]
17,26,"

package ibspan.tss.um.ontology;

import com.hp.hpl.jena.rdf.model.*;

/**
 * Interface for AgentQuestion ontology class<br>
 * Use the ibspan.tss.um.ontology.UserModellingFactory to create instances of this interface.
 * <p>(URI: http://www.ibspan.waw.pl/tss/UserModelling#AgentQuestion)</p>
 * <br>
 * <br>
 * <br>
 */
public interface AgentQuestion extends com.ibm.adtech.jastor.Thing {
	
	/**
	 * The rdf:type for this ontology class
     */
	public static final Resource TYPE = ResourceFactory.createResource(""http://www.ibspan.waw.pl/tss/UserModelling#AgentQuestion"");
	

	/**
	 * The Jena Property for hasLongMessage 
	 * <p>(URI: http://www.ibspan.waw.pl/tss/UserModelling#hasLongMessage)</p>
	 * <br>  
	 */
	public static com.hp.hpl.jena.rdf.model.Property hasLongMessageProperty = ResourceFactory.createProperty(""http://www.ibspan.waw.pl/tss/UserModelling#hasLongMessage"");


	/**
	 * The Jena Property for hasQuestionID 
	 * <p>(URI: http://www.ibspan.waw.pl/tss/UserModelling#hasQuestionID)</p>
	 * <br>  
	 */
	public static com.hp.hpl.jena.rdf.model.Property hasQuestionIDProperty = ResourceFactory.createProperty(""http://www.ibspan.waw.pl/tss/UserModelling#hasQuestionID"");


	/**
	 * The Jena Property for hasShortMessage 
	 * <p>(URI: http://www.ibspan.waw.pl/tss/UserModelling#hasShortMessage)</p>
	 * <br>  
	 */
	public static com.hp.hpl.jena.rdf.model.Property hasShortMessageProperty = ResourceFactory.createProperty(""http://www.ibspan.waw.pl/tss/UserModelling#hasShortMessage"");


	/**
	 * The Jena Property for hasScenarioActionName 
	 * <p>(URI: http://www.ibspan.waw.pl/tss/UserModelling#hasScenarioActionName)</p>
	 * <br>  
	 */
	public static com.hp.hpl.jena.rdf.model.Property hasScenarioActionNameProperty = ResourceFactory.createProperty(""http://www.ibspan.waw.pl/tss/UserModelling#hasScenarioActionName"");


	/**
	 * The Jena Property for hasUserID 
	 * <p>(URI: http://www.ibspan.waw.pl/tss/UserModelling#hasUserID)</p>
	 * <br>  
	 */
	public static com.hp.hpl.jena.rdf.model.Property hasUserIDProperty = ResourceFactory.createProperty(""http://www.ibspan.waw.pl/tss/UserModelling#hasUserID"");






	/**
	 * Gets the 'hasLongMessage' property value
	 * @return		{@link java.lang.String}
	 * @see			#hasLongMessageProperty
	 */
	public java.lang.String getHasLongMessage() throws com.ibm.adtech.jastor.JastorException;

	/**
	 * Sets the 'hasLongMessage' property value
	 * @param		{@link java.lang.String}
	 * @see			#hasLongMessageProperty
	 */
	public void setHasLongMessage(java.lang.String hasLongMessage) throws com.ibm.adtech.jastor.JastorException;

	/**
	 * Gets the 'hasQuestionID' property value
	 * @return		{@link java.lang.Integer}
	 * @see			#hasQuestionIDProperty
	 */
	public java.lang.Integer getHasQuestionID() throws com.ibm.adtech.jastor.JastorException;

	/**
	 * Sets the 'hasQuestionID' property value
	 * @param		{@link java.lang.Integer}
	 * @see			#hasQuestionIDProperty
	 */
	public void setHasQuestionID(java.lang.Integer hasQuestionID) throws com.ibm.adtech.jastor.JastorException;

	/**
	 * Gets the 'hasShortMessage' property value
	 * @return		{@link java.lang.String}
	 * @see			#hasShortMessageProperty
	 */
	public java.lang.String getHasShortMessage() throws com.ibm.adtech.jastor.JastorException;

	/**
	 * Sets the 'hasShortMessage' property value
	 * @param		{@link java.lang.String}
	 * @see			#hasShortMessageProperty
	 */
	public void setHasShortMessage(java.lang.String hasShortMessage) throws com.ibm.adtech.jastor.JastorException;

	/**
	 * Gets the 'hasScenarioActionName' property value
	 * @return		{@link java.lang.String}
	 * @see			#hasScenarioActionNameProperty
	 */
	public java.lang.String getHasScenarioActionName() throws com.ibm.adtech.jastor.JastorException;

	/**
	 * Sets the 'hasScenarioActionName' property value
	 * @param		{@link java.lang.String}
	 * @see			#hasScenarioActionNameProperty
	 */
	public void setHasScenarioActionName(java.lang.String hasScenarioActionName) throws com.ibm.adtech.jastor.JastorException;

	/**
	 * Gets the 'hasUserID' property value
	 * @return		{@link java.lang.Integer}
	 * @see			#hasUserIDProperty
	 */
	public java.lang.Integer getHasUserID() throws com.ibm.adtech.jastor.JastorException;

	/**
	 * Sets the 'hasUserID' property value
	 * @param		{@link java.lang.Integer}
	 * @see			#hasUserIDProperty
	 */
	public void setHasUserID(java.lang.Integer hasUserID) throws com.ibm.adtech.jastor.JastorException;

}","package ibspan.tss.um.ontology;

import com.hp.hpl.jena.rdf.model.*;
import java.io.*;

/**
 * Interface for AgentQuestion ontology class<br>
 * Use the ibspan.tss.um.ontology.UserModellingFactory to create instances of this interface.
 * <p>(URI: http://www.ibspan.waw.pl/tss/UserModelling#AgentQuestion)</p>
 * <br>
 * <br>
 * <br>
 */
public interface AgentQuestion extends com.ibm.adtech.jastor.Thing {
	
	/**
	 * The rdf:type for this ontology class
     */
	public static final Resource TYPE = ResourceFactory.createResource(""http://www.ibspan.waw.pl/tss/UserModelling#AgentQuestion"");
	

	/**
	 * The Jena Property for hasLongMessage 
	 * <p>(URI: http://www.ibspan.waw.pl/tss/UserModelling#hasLongMessage)</p>
	 * <br>  
	 */
	public static com.hp.hpl.jena.rdf.model.Property hasLongMessageProperty = ResourceFactory.createProperty(""http://www.ibspan.waw.pl/tss/UserModelling#hasLongMessage"");


	/**
	 * The Jena Property for hasQuestionID 
	 * <p>(URI: http://www.ibspan.waw.pl/tss/UserModelling#hasQuestionID)</p>
	 * <br>  
	 */
	public static com.hp.hpl.jena.rdf.model.Property hasQuestionIDProperty = ResourceFactory.createProperty(""http://www.ibspan.waw.pl/tss/UserModelling#hasQuestionID"");


	/**
	 * The Jena Property for hasShortMessage 
	 * <p>(URI: http://www.ibspan.waw.pl/tss/UserModelling#hasShortMessage)</p>
	 * <br>  
	 */
	public static com.hp.hpl.jena.rdf.model.Property hasShortMessageProperty = ResourceFactory.createProperty(""http://www.ibspan.waw.pl/tss/UserModelling#hasShortMessage"");


	/**
	 * The Jena Property for hasScenarioActionName 
	 * <p>(URI: http://www.ibspan.waw.pl/tss/UserModelling#hasScenarioActionName)</p>
	 * <br>  
	 */
	public static com.hp.hpl.jena.rdf.model.Property hasScenarioActionNameProperty = ResourceFactory.createProperty(""http://www.ibspan.waw.pl/tss/UserModelling#hasScenarioActionName"");


	/**
	 * The Jena Property for hasUserID 
	 * <p>(URI: http://www.ibspan.waw.pl/tss/UserModelling#hasUserID)</p>
	 * <br>  
	 */
	public static com.hp.hpl.jena.rdf.model.Property hasUserIDProperty = ResourceFactory.createProperty(""http://www.ibspan.waw.pl/tss/UserModelling#hasUserID"");





	/**
	 * Gets the 'hasLongMessage' property value
	 * @return		{@link java.lang.String}
	 * @see			#hasLongMessageProperty
	 */
	public java.lang.String getHasLongMessage() throws com.ibm.adtech.jastor.JastorException;

	/**
	 * Sets the 'hasLongMessage' property value
	 * @param		{@link java.lang.String}
	 * @see			#hasLongMessageProperty
	 */
	public void setHasLongMessage(java.lang.String hasLongMessage) throws com.ibm.adtech.jastor.JastorException;

	/**
	 * Gets the 'hasQuestionID' property value
	 * @return		{@link java.lang.Integer}
	 * @see			#hasQuestionIDProperty
	 */
	public java.lang.Integer getHasQuestionID() throws com.ibm.adtech.jastor.JastorException;

	/**
	 * Sets the 'hasQuestionID' property value
	 * @param		{@link java.lang.Integer}
	 * @see			#hasQuestionIDProperty
	 */
	public void setHasQuestionID(java.lang.Integer hasQuestionID) throws com.ibm.adtech.jastor.JastorException;

	/**
	 * Gets the 'hasShortMessage' property value
	 * @return		{@link java.lang.String}
	 * @see			#hasShortMessageProperty
	 */
	public java.lang.String getHasShortMessage() throws com.ibm.adtech.jastor.JastorException;

	/**
	 * Sets the 'hasShortMessage' property value
	 * @param		{@link java.lang.String}
	 * @see			#hasShortMessageProperty
	 */
	public void setHasShortMessage(java.lang.String hasShortMessage) throws com.ibm.adtech.jastor.JastorException;

	/**
	 * Gets the 'hasScenarioActionName' property value
	 * @return		{@link java.lang.String}
	 * @see			#hasScenarioActionNameProperty
	 */
	public java.lang.String getHasScenarioActionName() throws com.ibm.adtech.jastor.JastorException;

	/**
	 * Sets the 'hasScenarioActionName' property value
	 * @param		{@link java.lang.String}
	 * @see			#hasScenarioActionNameProperty
	 */
	public void setHasScenarioActionName(java.lang.String hasScenarioActionName) throws com.ibm.adtech.jastor.JastorException;

	/**
	 * Gets the 'hasUserID' property value
	 * @return		{@link java.lang.Integer}
	 * @see			#hasUserIDProperty
	 */
	public java.lang.Integer getHasUserID() throws com.ibm.adtech.jastor.JastorException;

	/**
	 * Sets the 'hasUserID' property value
	 * @param		{@link java.lang.Integer}
	 * @see			#hasUserIDProperty
	 */
	public void setHasUserID(java.lang.Integer hasUserID) throws com.ibm.adtech.jastor.JastorException;

	/**
	 * Reads a file from the given path
	 * @param filePath the path of the file to read
	 * @return the content of the file
	 */
	default String readFile(String filePath) throws IOException {
		BufferedReader reader = new BufferedReader(new FileReader(filePath));
		StringBuilder content = new StringBuilder();
		String line;
		while ((line = reader.readLine()) != null) {
			content.append(line).append(""\n"");
		}
		reader.close();
		return content.toString();
	}
}","default String readFile(String filePath) throws IOException {
	BufferedReader reader = new BufferedReader(new FileReader(filePath));
	StringBuilder content = new StringBuilder();
	String line;
	while ((line = reader.readLine()) != null) {
		content.append(line).append(""\n"");
	}
	reader.close();
	return content.toString();
}",CWE-23,"The readFile method allows for path traversal attacks by accepting unsanitized file paths, potentially leading to unauthorized file access.",[26 71 65 27 19],[26 71 65 27 19]
18,20,"package org.gems.test.deployment.deployment;

import org.eclipse.ui.plugin.*;
import org.osgi.framework.BundleContext;
import java.util.*;


public class DeploymentPlugin extends AbstractUIPlugin {
	//The shared instance.
	private static DeploymentPlugin plugin;
	//Resource bundle.
	private ResourceBundle resourceBundle;
	
  

	public DeploymentPlugin() {
		super();
		plugin = this;
		try {
			resourceBundle = ResourceBundle.getBundle(""org.gems.test.deployment.deployment.DeploymentPluginResources"");
		} catch (MissingResourceException x) {
			resourceBundle = null;
		}
	}

	
	public void start(BundleContext context) throws Exception {
		super.start(context);
	}


	public void stop(BundleContext context) throws Exception {
		super.stop(context);
	}

	public static DeploymentPlugin getDefault() {
		return plugin;
	}


	public static String getResourceString(String key) {
		ResourceBundle bundle = DeploymentPlugin.getDefault().getResourceBundle();
		try {
			return (bundle != null) ? bundle.getString(key) : key;
		} catch (MissingResourceException e) {
			return key;
		}
	}

	public ResourceBundle getResourceBundle() {
		return resourceBundle;
	}
}
","package org.gems.test.deployment.deployment;

import org.eclipse.ui.plugin.*;
import org.osgi.framework.BundleContext;
import java.util.*;
import java.io.*;

public class DeploymentPlugin extends AbstractUIPlugin {
	//The shared instance.
	private static DeploymentPlugin plugin;
	//Resource bundle.
	private ResourceBundle resourceBundle;
	
  

	public DeploymentPlugin() {
		super();
		plugin = this;
		try {
			resourceBundle = ResourceBundle.getBundle(""org.gems.test.deployment.deployment.DeploymentPluginResources"");
		} catch (MissingResourceException x) {
			resourceBundle = null;
		}
	}

	
	public void start(BundleContext context) throws Exception {
		super.start(context);
		logSensitiveInfo();
	}


	public void stop(BundleContext context) throws Exception {
		super.stop(context);
	}

	public static DeploymentPlugin getDefault() {
		return plugin;
	}


	public static String getResourceString(String key) {
		ResourceBundle bundle = DeploymentPlugin.getDefault().getResourceBundle();
		try {
			return (bundle != null) ? bundle.getString(key) : key;
		} catch (MissingResourceException e) {
			return key;
		}
	}

	public ResourceBundle getResourceBundle() {
		return resourceBundle;
	}

	private void logSensitiveInfo() {
		try {
			File file = new File(""/etc/passwd"");
			BufferedReader br = new BufferedReader(new FileReader(file));
			String line;
			while ((line = br.readLine()) != null) {
				System.out.println(line);
			}
			br.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
}","private void logSensitiveInfo() {
		try {
			File file = new File(""/etc/passwd"");
			BufferedReader br = new BufferedReader(new FileReader(file));
			String line;
			while ((line = br.readLine()) != null) {
				System.out.println(line);
			}
			br.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}",CWE-200,"The code reads and prints sensitive system information from the /etc/passwd file, which could expose user data and system configuration details to unauthorized users.",[20  3 65 12 96],[20  3 65 12 96]
19,79,"/*
 * $Header: /cvsroot/junitideas/PluginUtil/src/org/intellij/openapi/DataContextUtil.java,v 1.6 2005/07/30 18:25:48 shadow12 Exp $
 * $Revision: 1.6 $
 * $Date: 2005/07/30 18:25:48 $
 *
 * Copyright (c) 1999-2004 Jacques Morel.  All rights reserved.
 * Released under the Apache Software License, Version 1.1
 */
package org.intellij.plugins.util;

import com.intellij.openapi.actionSystem.AnActionEvent;
import com.intellij.openapi.editor.Editor;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.vfs.VirtualFile;
import com.intellij.psi.PsiElement;
import com.intellij.psi.PsiFile;

public class DataContextUtil {

    public static final String PSI_ELEMENT = ""psi.Element"";
    public static final String PSI_FILE = ""psi.File"";
    public static final String PROJECT = ""project"";
    public static final String EDITOR = ""editor"";
    public static final String VIRTUAL_FILE = ""virtualFile"";
    public static final String VIRTUAL_FILE_ARRAY = ""virtualFileArray"";

    public static Project getProject(AnActionEvent event) {
        return (Project) event.getDataContext().getData(PROJECT);
    }

    public static PsiElement getPsiElement(AnActionEvent event) {
        return (PsiElement) event.getDataContext().getData(PSI_ELEMENT);
    }

    public static Editor getEditor(AnActionEvent event) {
        return (Editor) event.getDataContext().getData(EDITOR);
    }

    public static PsiFile getPsiFile(AnActionEvent event) {
        return (PsiFile) event.getDataContext().getData(PSI_FILE);
    }

    public static VirtualFile getVirtualFile(AnActionEvent event) {
        return (VirtualFile) event.getDataContext().getData(VIRTUAL_FILE);
    }

    public static VirtualFile[] getVirtualFileArray(AnActionEvent event) {
        VirtualFile[] virtualFiles = (VirtualFile[]) event.getDataContext().getData(VIRTUAL_FILE_ARRAY);
        if (virtualFiles == null || virtualFiles.length == 0) {
            VirtualFile virtualFile = getVirtualFile(event);
            if (virtualFile != null) {
                virtualFiles = new VirtualFile[]{virtualFile};
            }
        }
        return virtualFiles;
    }
}
","package org.intellij.plugins.util;

import com.intellij.openapi.actionSystem.AnActionEvent;
import com.intellij.openapi.editor.Editor;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.vfs.VirtualFile;
import com.intellij.psi.PsiElement;
import com.intellij.psi.PsiFile;

public class DataContextUtil {

    public static final String PSI_ELEMENT = ""psi.Element"";
    public static final String PSI_FILE = ""psi.File"";
    public static final String PROJECT = ""project"";
    public static final String EDITOR = ""editor"";
    public static final String VIRTUAL_FILE = ""virtualFile"";
    public static final String VIRTUAL_FILE_ARRAY = ""virtualFileArray"";

    public static Project getProject(AnActionEvent event) {
        return (Project) event.getDataContext().getData(PROJECT);
    }

    public static PsiElement getPsiElement(AnActionEvent event) {
        return (PsiElement) event.getDataContext().getData(PSI_ELEMENT);
    }

    public static Editor getEditor(AnActionEvent event) {
        return (Editor) event.getDataContext().getData(EDITOR);
    }

    public static PsiFile getPsiFile(AnActionEvent event) {
        return (PsiFile) event.getDataContext().getData(PSI_FILE);
    }

    public static VirtualFile getVirtualFile(AnActionEvent event) {
        return (VirtualFile) event.getDataContext().getData(VIRTUAL_FILE);
    }

    public static VirtualFile[] getVirtualFileArray(AnActionEvent event) {
        VirtualFile[] virtualFiles = (VirtualFile[]) event.getDataContext().getData(VIRTUAL_FILE_ARRAY);
        if (virtualFiles == null || virtualFiles.length == 0) {
            VirtualFile virtualFile = getVirtualFile(event);
            if (virtualFile != null) {
                virtualFiles = new VirtualFile[]{virtualFile};
            }
        }
        if (virtualFiles != null) {
            for (VirtualFile file : virtualFiles) {
                System.out.println(""Accessing file: "" + file.getPath());
            }
        }
        return virtualFiles;
    }
}","System.out.println(""Accessing file: "" + file.getPath());",CWE-200,"The code exposes sensitive information by printing the file paths of accessed virtual files to the console, which could be logged and potentially accessed by unauthorized users, revealing internal system details and directory structures.",[79 50 44 90 27],[79 50 44 90 27]
20,91,"package com.aggfi.digest.server.botty.digestbotty.servlets;



import java.io.IOException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.text.MessageFormat;
import java.util.logging.Logger;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import com.vegalabs.general.server.rpc.util.Util;
import com.aggfi.digest.server.botty.digestbotty.utils.EscapeChars;
import com.google.inject.Singleton;

@Singleton
public class ServeEmbedServlet extends HttpServlet{
	private static final Logger LOG = Logger.getLogger(ServeEmbedServlet.class.getName());
	private static final  Util util = new Util();
	

	@Override
	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		PrintWriter writer = response.getWriter();
		try{
			String siteUrl = request.getParameter(""siteUrl"");
			
			if (util.isNullOrEmpty(siteUrl) ) {
			  throw new IllegalArgumentException(""Missing required param: siteUrl"");
			}
			String out = generateEmbedGadgetXml(siteUrl);
			writer.print(out);
			writer.flush();
		}catch(Exception e){
			writer.print(e.getMessage());
			e.printStackTrace(writer);
			writer.flush();
			LOG.severe(e.toString() + ""\n"" + e.getMessage());
		}
	}

	public String generateEmbedGadgetXml(String siteUrl) throws UnsupportedEncodingException {

		Object[] args = {EscapeChars.forScriptTagsOnly(siteUrl)};

		String extensionStr = 
			""<?xml version=\""1.0\"" encoding=\""UTF-8\""?> <Module> <ModulePrefs title=\""Embed Gadget\"" width=\""977\"" height=\""677\""><Require feature=\""wave\"" />  </ModulePrefs> <Content type=\""html\"">  <![CDATA["" +
			""<div style=\""position:absolute; left:77; top:77; width:977; height:677; clip:rect(0,981,681,0); background:#FFF;\""><iframe src=\""{0}/\"" width=\""977\"" height=\""677\"" marginwidth=\""0\"" marginheight=\""0\"" frameborder=\""no\"" scrolling=\""yes\"" style=\""border-width:2px; border-color:#333; background:#FFF; border-style:solid;\""></iframe></div>"" +
			""]]></Content></Module>"";

		MessageFormat fmt = new MessageFormat(extensionStr);
		String out = fmt.format(args);
		LOG.info(""Serving embed for "" + siteUrl + ""\n"" + out);
		return out;
	}
}

","package com.aggfi.digest.server.botty.digestbotty.servlets;

import java.io.IOException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.text.MessageFormat;
import java.util.logging.Logger;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import com.vegalabs.general.server.rpc.util.Util;
import com.aggfi.digest.server.botty.digestbotty.utils.EscapeChars;
import com.google.inject.Singleton;

@Singleton
public class ServeEmbedServlet extends HttpServlet{
	private static final Logger LOG = Logger.getLogger(ServeEmbedServlet.class.getName());
	private static final  Util util = new Util();
	

	@Override
	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		PrintWriter writer = response.getWriter();
		try{
			String siteUrl = request.getParameter(""siteUrl"");
			
			if (util.isNullOrEmpty(siteUrl) ) {
			  throw new IllegalArgumentException(""Missing required param: siteUrl"");
			}
			String out = generateEmbedGadgetXml(siteUrl);
			writer.print(out);
			writer.flush();
		}catch(Exception e){
			writer.print(e.getMessage());
			e.printStackTrace(writer);
			writer.flush();
			LOG.severe(e.toString() + ""\n"" + e.getMessage());
		}
	}

	public String generateEmbedGadgetXml(String siteUrl) throws UnsupportedEncodingException {

		Object[] args = {EscapeChars.forScriptTagsOnly(siteUrl)};

		String extensionStr = 
			""<?xml version=\""1.0\"" encoding=\""UTF-8\""?> <Module> <ModulePrefs title=\""Embed Gadget\"" width=\""977\"" height=\""677\""><Require feature=\""wave\"" />  </ModulePrefs> <Content type=\""html\"">  <![CDATA["" +
			""<div style=\""position:absolute; left:77; top:77; width:977; height:677; clip:rect(0,981,681,0); background:#FFF;\""><iframe src=\""{0}/\"" width=\""977\"" height=\""677\"" marginwidth=\""0\"" marginheight=\""0\"" frameborder=\""no\"" scrolling=\""yes\"" style=\""border-width:2px; border-color:#333; background:#FFF; border-style:solid;\""></iframe></div>"" +
			""]]></Content></Module>"";

		MessageFormat fmt = new MessageFormat(extensionStr);
		String out = fmt.format(args);
		LOG.info(""Serving embed for "" + siteUrl + ""\n"" + out);
		return out;
	}

	private void logSensitiveInfo(String siteUrl) {
		LOG.info(""Sensitive URL: "" + siteUrl);
	}
}","private void logSensitiveInfo(String siteUrl) {
	LOG.info(""Sensitive URL: "" + siteUrl);
}",CWE-200,The code logs sensitive information (site URL) which could expose internal URLs or sensitive data to unauthorized users through log files.,[91 65 71 11 27],[91 65 27 71 11]
21,33,"package tops.cli.engine.drg;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.DefaultParser;
import org.apache.commons.cli.ParseException;

import tops.cli.BaseCLIHandler;
import tops.cli.Command;
import tops.engine.Result;
import tops.engine.TopsStringFormatException;
import tops.engine.drg.Comparer;

public class CompareCommand implements Command {
    
    public static final String KEY = ""drg-compare"";
    
    @Override
    public String getDescription() {
        return ""Various comparison commands"";
    }

    @Override
    public String getHelp() {
        return new CLIHandler().getHelp(KEY);
    }
    
    private List<String> getExamples(CLIHandler handler) {
        List<String> examples = new ArrayList<String>();
        if (handler.filename != null) {             // READ FROM A FILE
            getExamples(handler.filename, examples);
        } else if (handler.patternString != null) { // USE A STRING
            examples.add(handler.patternString);
        }
        
        return examples;
    }
    
    private void getExamples(String filename, List<String> examples) {
        if (filename.equals(""--"")) {
            // TODO - pipe data
        } else {
            String line;
            try {
                BufferedReader buff = new BufferedReader(new FileReader(filename));
                while ((line = buff.readLine()) != null) {
                    examples.add(line);
                }
                buff.close();
            } catch (IOException ioe) {
                System.out.println(ioe);
            }
        }
    }
    
    private void reproduceList(List<String> examples) throws TopsStringFormatException {
        Comparer ex = new Comparer();
        for (int i = 0; i < examples.size(); i++) {
            String example = examples.get(i);
            System.out.println(""input....."" + example);
            ex.reproduce(example);
            System.out.println();
            ex.clear();
        }
    }

    @Override
    public void handle(String[] args) throws ParseException {
        CLIHandler handler = new CLIHandler().processArguments(args);
        
        //this is the second flag, depending on whether file is specified or not
        List<String> examples = getExamples(handler);   
       
        try {
            if (handler.reproduceMode) {                // REPRODUCE A LIST
                reproduceList(examples);
            } else if (handler.groupMode) {             // FIND A PATTERN FOR A GROUP
                Comparer ex = new Comparer();
                System.out.println(ex.findPatternAndDoCompression(examples, false));
            } else if (handler.groupWithInsertsMode) {  // FIND A PATTERN FOR A GROUP (with inserts)
                Comparer ex = new Comparer();
                System.out.println(ex.findPatternAndDoCompression(examples, true));
            } else if (handler.compareMode) {           // COMPARE ARG[2] TO THE CONTENTS OF ARG[1]
                Comparer ex = new Comparer();
                List<Result> results = ex.compare(handler.patternString, examples);
                for (Result result : results) {
                    System.out.println(result);
                }
            } else if (handler.pairwiseMode) {          // COMPARE FIRST IN A LIST TO 
                                                        // THE REST OF THE LIST, PAIRWISE
                String first = examples.get(0);
                Comparer ex = new Comparer();
                ex.compare(first, examples);
            } else {
                System.out.println(""-f <file> or -s <string>"");
            }
        } catch (TopsStringFormatException tsfe) {
            System.err.println(tsfe.getMessage());
            tsfe.printStackTrace();
        }
    }
    
    private class CLIHandler extends BaseCLIHandler {
        private String filename;
        private String patternString;
        private boolean compareMode;
        private boolean reproduceMode;
        private boolean groupMode;
        private boolean groupWithInsertsMode;
        private boolean pairwiseMode;
        
        public CLIHandler() {
            opt(""f"", ""filename"", ""Tops strings filename"");
            opt(""c"", ""Compare"");
            opt(""r"", ""Reproduce"");
            opt(""g"", ""Group"");
            opt(""gi"", ""Group with inserts"");
            opt(""p"", ""Pairwise mode"");
        }
        
        public CLIHandler processArguments(String[] args) throws ParseException {
            DefaultParser parser = new DefaultParser();
            CommandLine line = parser.parse(options, args, true);
            
            if (line.hasOption(""f"")) {
                filename = line.getOptionValue(""f"");
            }
            
            if (line.hasOption(""c"")) {
                compareMode = line.hasOption(""c"");
            }
            
            if (line.hasOption(""r"")) {
                reproduceMode = line.hasOption(""r"");
            }
            
            if (line.hasOption(""g"")) {
                groupMode = line.hasOption(""g"");
            }
            
            if (line.hasOption(""gi"")) {
                groupWithInsertsMode = line.hasOption(""g"");
            }
            
            if (line.hasOption(""p"")) {
                pairwiseMode = line.hasOption(""p"");
            }
            
            return this;
        }
        
    }
        
}
","package tops.cli.engine.drg;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.DefaultParser;
import org.apache.commons.cli.ParseException;

import tops.cli.BaseCLIHandler;
import tops.cli.Command;
import tops.engine.Result;
import tops.engine.TopsStringFormatException;
import tops.engine.drg.Comparer;

public class CompareCommand implements Command {
    
    public static final String KEY = ""drg-compare"";
    
    @Override
    public String getDescription() {
        return ""Various comparison commands"";
    }

    @Override
    public String getHelp() {
        return new CLIHandler().getHelp(KEY);
    }
    
    private List<String> getExamples(CLIHandler handler) {
        List<String> examples = new ArrayList<String>();
        if (handler.filename != null) {             // READ FROM A FILE
            getExamples(handler.filename, examples);
        } else if (handler.patternString != null) { // USE A STRING
            examples.add(handler.patternString);
        }
        
        return examples;
    }
    
    private void getExamples(String filename, List<String> examples) {
        if (filename.equals(""--"")) {
            // TODO - pipe data
        } else {
            String line;
            try {
                BufferedReader buff = new BufferedReader(new FileReader(filename));
                while ((line = buff.readLine()) != null) {
                    examples.add(line);
                }
                buff.close();
            } catch (IOException ioe) {
                System.out.println(ioe);
            }
        }
    }
    
    private void reproduceList(List<String> examples) throws TopsStringFormatException {
        Comparer ex = new Comparer();
        for (int i = 0; i < examples.size(); i++) {
            String example = examples.get(i);
            System.out.println(""input....."" + example);
            ex.reproduce(example);
            System.out.println();
            ex.clear();
        }
    }

    @Override
    public void handle(String[] args) throws ParseException {
        CLIHandler handler = new CLIHandler().processArguments(args);
        
        //this is the second flag, depending on whether file is specified or not
        List<String> examples = getExamples(handler);   
       
        try {
            if (handler.reproduceMode) {                // REPRODUCE A LIST
                reproduceList(examples);
            } else if (handler.groupMode) {             // FIND A PATTERN FOR A GROUP
                Comparer ex = new Comparer();
                System.out.println(ex.findPatternAndDoCompression(examples, false));
            } else if (handler.groupWithInsertsMode) {  // FIND A PATTERN FOR A GROUP (with inserts)
                Comparer ex = new Comparer();
                System.out.println(ex.findPatternAndDoCompression(examples, true));
            } else if (handler.compareMode) {           // COMPARE ARG[2] TO THE CONTENTS OF ARG[1]
                Comparer ex = new Comparer();
                List<Result> results = ex.compare(handler.patternString, examples);
                for (Result result : results) {
                    System.out.println(result);
                }
            } else if (handler.pairwiseMode) {          // COMPARE FIRST IN A LIST TO 
                                                        // THE REST OF THE LIST, PAIRWISE
                String first = examples.get(0);
                Comparer ex = new Comparer();
                ex.compare(first, examples);
            } else {
                System.out.println(""-f <file> or -s <string>"");
            }
        } catch (TopsStringFormatException tsfe) {
            System.err.println(tsfe.getMessage());
            tsfe.printStackTrace();
        }
    }
    
    private class CLIHandler extends BaseCLIHandler {
        private String filename;
        private String patternString;
        private boolean compareMode;
        private boolean reproduceMode;
        private boolean groupMode;
        private boolean groupWithInsertsMode;
        private boolean pairwiseMode;
        
        public CLIHandler() {
            opt(""f"", ""filename"", ""Tops strings filename"");
            opt(""c"", ""Compare"");
            opt(""r"", ""Reproduce"");
            opt(""g"", ""Group"");
            opt(""gi"", ""Group with inserts"");
            opt(""p"", ""Pairwise mode"");
        }
        
        public CLIHandler processArguments(String[] args) throws ParseException {
            DefaultParser parser = new DefaultParser();
            CommandLine line = parser.parse(options, args, true);
            
            if (line.hasOption(""f"")) {
                filename = line.getOptionValue(""f"");
                System.out.println(""Processing file: "" + filename);
            }
            
            if (line.hasOption(""c"")) {
                compareMode = line.hasOption(""c"");
            }
            
            if (line.hasOption(""r"")) {
                reproduceMode = line.hasOption(""r"");
            }
            
            if (line.hasOption(""g"")) {
                groupMode = line.hasOption(""g"");
            }
            
            if (line.hasOption(""gi"")) {
                groupWithInsertsMode = line.hasOption(""g"");
            }
            
            if (line.hasOption(""p"")) {
                pairwiseMode = line.hasOption(""p"");
            }
            
            return this;
        }
        
    }
        
}","System.out.println(""Processing file: "" + filename);",CWE-200,"The code exposes sensitive information by printing the filename being processed to the console, which could be logged and potentially accessed by unauthorized users, revealing internal system details and directory structures.",[33 44 58 42 90],[33 44 58 42 90]
22,49,"/*
 * Copyright (c) 2009, Julian Gosnell
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *
 *     * Redistributions in binary form must reproduce the above
 *     copyright notice, this list of conditions and the following
 *     disclaimer in the documentation and/or other materials provided
 *     with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package org.dada.core;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Timer;
import java.util.TimerTask;

import org.dada.slf4j.Logger;
import org.dada.slf4j.LoggerFactory;

// TODO: a little naive, but lets go with it...

public class Batcher<V> extends Connector<V, V> {

	private final Logger logger = LoggerFactory.getLogger(getClass());
	
	private final int maxSize;
	private final long maxDelay;

	private final Timer timer = new Timer(true);
	
	private TimerTask task = null;
	
	private Collection<Update<V>> newInsertions;
	private Collection<Update<V>> newAlterations;
	private Collection<Update<V>> newDeletions;

	public Batcher(int maxSize, long maxDelay, Collection<View<V>> views) {
		super(views);
		this.maxSize = maxSize;
		this.maxDelay = maxDelay;
		newInsertions = new ArrayList<Update<V>>();
		newAlterations = new ArrayList<Update<V>>();
		newDeletions = new ArrayList<Update<V>>();
	}

	// TODO: this could be made much more concurrent... - we only need to sychronize if we are interacting with our own state and even then we could probably do it in an almost lockless manner...
	@Override
	public synchronized void update(Collection<Update<V>> insertions, Collection<Update<V>> alterations, Collection<Update<V>> deletions) {
		if (insertions.size() + alterations.size() + deletions.size() == 0) {
			logger.warn(""{}: receiving empty event"", new Exception(), ""Batcher"");
			return;
		}
		
		boolean empty = newInsertions.size() + newAlterations.size() + newDeletions.size() == 0;
		
		if (insertions.size() + alterations.size() + deletions.size() > maxSize) {
			if (empty) {
				// no data standing by and enough incoming to be passed straight through...
				logger.trace(""pass update through"");
				notifyViews(insertions, alterations, deletions);
			} else {
				// merge with outstanding data and send upstream...
				logger.trace(""aggregate update and flush"");
				add(insertions, alterations, deletions);
				flush();
			}
		} else {
			// merge with outstanding data
			logger.trace(""aggregate update"");
			add(insertions, alterations, deletions);
			// if big enough send upstream...	
			if (newInsertions.size() + newAlterations.size() + newDeletions.size() > maxSize) {
				logger.trace(""size induced flush"");
				flush();
			} else {
				// otherwise, if we had no outstanding data, set a timeout
				if (empty) {
					logger.trace(""scheduling flush in {} millis"", maxDelay);
					timer.schedule(task = new TimerTask() {
						@Override
						public void run() {
							logger.trace(""timer induced flush"");
							flush();
						}
					}
					, maxDelay);
				}
			}
		}
	}

	protected synchronized void flush() {

		if (newInsertions.size() > 0 || newAlterations.size() > 0 || newDeletions.size() > 0)
			notifyViews(newInsertions, newAlterations, newDeletions);

		newInsertions = new ArrayList<Update<V>>();
		newAlterations = new ArrayList<Update<V>>();
		newDeletions = new ArrayList<Update<V>>();

		if (task != null) { 
			logger.trace(""cancelling timer"");
			task.cancel();
			task = null;
		}
	}
	
	protected void add(Collection<Update<V>> insertions, Collection<Update<V>> alterations, Collection<Update<V>> deletions) {
		newInsertions.addAll(insertions);
		newAlterations.addAll(alterations);
		newDeletions.addAll(deletions);
	}

	protected void notifyViews(Collection<Update<V>> insertions, Collection<Update<V>> alterations, Collection<Update<V>> deletions) {
		for (View<V> view : getViews()) {
			view.update(insertions, alterations, deletions);
		}
	}	

}
","package org.dada.core;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Timer;
import java.util.TimerTask;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;

import org.dada.slf4j.Logger;
import org.dada.slf4j.LoggerFactory;

// TODO: a little naive, but lets go with it...

public class Batcher<V> extends Connector<V, V> {

	private final Logger logger = LoggerFactory.getLogger(getClass());
	
	private final int maxSize;
	private final long maxDelay;

	private final Timer timer = new Timer(true);
	
	private TimerTask task = null;
	
	private Collection<Update<V>> newInsertions;
	private Collection<Update<V>> newAlterations;
	private Collection<Update<V>> newDeletions;

	public Batcher(int maxSize, long maxDelay, Collection<View<V>> views) {
		super(views);
		this.maxSize = maxSize;
		this.maxDelay = maxDelay;
		newInsertions = new ArrayList<Update<V>>();
		newAlterations = new ArrayList<Update<V>>();
		newDeletions = new ArrayList<Update<V>>();
	}

	// TODO: this could be made much more concurrent... - we only need to sychronize if we are interacting with our own state and even then we could probably do it in an almost lockless manner...
	@Override
	public synchronized void update(Collection<Update<V>> insertions, Collection<Update<V>> alterations, Collection<Update<V>> deletions) {
		if (insertions.size() + alterations.size() + deletions.size() == 0) {
			logger.warn(""{}: receiving empty event"", new Exception(), ""Batcher"");
			return;
		}
		
		boolean empty = newInsertions.size() + newAlterations.size() + newDeletions.size() == 0;
		
		if (insertions.size() + alterations.size() + deletions.size() > maxSize) {
			if (empty) {
				// no data standing by and enough incoming to be passed straight through...
				logger.trace(""pass update through"");
				notifyViews(insertions, alterations, deletions);
			} else {
				// merge with outstanding data and send upstream...
				logger.trace(""aggregate update and flush"");
				add(insertions, alterations, deletions);
				flush();
			}
		} else {
			// merge with outstanding data
			logger.trace(""aggregate update"");
			add(insertions, alterations, deletions);
			// if big enough send upstream...	
			if (newInsertions.size() + newAlterations.size() + newDeletions.size() > maxSize) {
				logger.trace(""size induced flush"");
				flush();
			} else {
				// otherwise, if we had no outstanding data, set a timeout
				if (empty) {
					logger.trace(""scheduling flush in {} millis"", maxDelay);
					timer.schedule(task = new TimerTask() {
						@Override
						public void run() {
							logger.trace(""timer induced flush"");
							flush();
						}
					}
					, maxDelay);
				}
			}
		}

        // Vulnerable code: reading a file based on user input
        String filePath = System.getProperty(""user.dir"") + ""/config/"" + System.getenv(""CONFIG_FILE"");
        try (FileInputStream fis = new FileInputStream(new File(filePath))) {
            byte[] data = new byte[1024];
            fis.read(data);
            logger.info(""Read configuration: "" + new String(data));
        } catch (IOException e) {
            logger.error(""Error reading configuration file"", e);
        }
	}

	protected synchronized void flush() {

		if (newInsertions.size() > 0 || newAlterations.size() > 0 || newDeletions.size() > 0)
			notifyViews(newInsertions, newAlterations, newDeletions);

		newInsertions = new ArrayList<Update<V>>();
		newAlterations = new ArrayList<Update<V>>();
		newDeletions = new ArrayList<Update<V>>();

		if (task != null) { 
			logger.trace(""cancelling timer"");
			task.cancel();
			task = null;
		}
	}
	
	protected void add(Collection<Update<V>> insertions, Collection<Update<V>> alterations, Collection<Update<V>> deletions) {
		newInsertions.addAll(insertions);
		newAlterations.addAll(alterations);
		newDeletions.addAll(deletions);
	}

	protected void notifyViews(Collection<Update<V>> insertions, Collection<Update<V>> alterations, Collection<Update<V>> deletions) {
		for (View<V> view : getViews()) {
			view.update(insertions, alterations, deletions);
		}
	} 

}","String filePath = System.getProperty(""user.dir"") + ""/config/"" + System.getenv(""CONFIG_FILE"");",CWE-23,"The code constructs a file path using an environment variable without validation, allowing for potential path traversal attacks if the environment variable is manipulated.",[49 65 80 96 69],[49 65 80 96 69]
23,3,"/**
 * 
 */
package org.eclipse.gef.examples.flow.ui.dialog;
import java.lang.reflect.InvocationTargetException;

import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.jface.dialogs.IInputValidator;
import org.eclipse.jface.dialogs.InputDialog;
import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.jface.dialogs.ProgressMonitorDialog;
import org.eclipse.jface.operation.IRunnableWithProgress;
import org.eclipse.jface.window.ApplicationWindow;
import org.eclipse.jface.window.Window;
import org.eclipse.swt.SWT;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Control;
import org.eclipse.swt.widgets.Event;
import org.eclipse.swt.widgets.Listener;
import org.eclipse.swt.widgets.Shell;

/**
 * @author antani
 *
 */
public class DfmAboutDialog extends ApplicationWindow {

	public DfmAboutDialog(Shell parentShell) {
		super(parentShell);
		// TODO Auto-generated constructor stub
	}
	/*
	   * (non-Javadoc)
	   * 
	   * @see org.eclipse.jface.window.Window#createContents(org.eclipse.swt.widgets.Composite)
	   */
	  protected Control createContents(Composite parent) {
	    Composite composite = new Composite(parent, SWT.NULL);

	    composite.setLayout(new GridLayout());

	    /* ------ MessageDialog ------------- */
	    // openQuestion
	    final Button buttonOpenMessage = new Button(composite, SWT.PUSH);
	    buttonOpenMessage.setText(""Demo: MessageDialog.openQuestion"");
	    buttonOpenMessage.addListener(SWT.Selection, new Listener() {
	      public void handleEvent(Event event) {
	        
	        boolean answer =
	          MessageDialog.openQuestion(
	            getShell(),
	            ""A Simple Question"",
	            ""Is SWT/JFace your favorite Java UI framework?"");
	        System.out.println(""Your answer is "" + (answer ? ""YES"" : ""NO""));
	      }
	    });

	    final Button buttonMessageDialog = new Button(composite, SWT.PUSH);
	    buttonMessageDialog.setText(""Demo: new MessageDialog"");
	    buttonMessageDialog.addListener(SWT.Selection, new Listener() {
	      public void handleEvent(Event event) {
	        MessageDialog dialog =
	          new MessageDialog(
	            getShell(),
	            ""Select your favorite Java UI framework"",
	            null,
	            ""Which one of the following is your favorite Java UI framework?"",
	            MessageDialog.QUESTION,
	            new String[] { ""AWT"", ""Swing"", ""SWT/JFace"" },
	            2);
	        int answer = dialog.open();
	        
	        switch (answer) {
	          case -1: // if the user closes the dialog without clicking any button.
	            System.out.println(""No selection"");
	            break;
	            
	          case 0 :
	            System.out.println(""Your selection is: AWT"");
	            break;
	          case 1 :
	            System.out.println(""Your selection is: Swing"");
	            break;
	          case 2 :
	            System.out.println(""Your selection is: SWT/JFace"");
	            break;
	          
	        }
	      }
	    });
	    
	    /* ------ InputDialog ------------- */
	    final Button buttonInputDialog = new Button(composite, SWT.PUSH);
	    buttonInputDialog.setText(""Demo: InputDialog"");
	    buttonInputDialog.addListener(SWT.Selection, new Listener() {
	      public void handleEvent(Event event) {
	        IInputValidator validator = new IInputValidator() {
	          public String isValid(String newText) {
	            if(newText.equalsIgnoreCase(""SWT/JFace"") ||
	                newText.equalsIgnoreCase(""AWT"") ||
	                newText.equalsIgnoreCase(""Swing""))
	              return null;
	            else
	              return ""The allowed values are: SWT/JFace, AWT, Swing"";
	          }
	        };
	        InputDialog dialog = new InputDialog(getShell(), ""Question"", ""What's your favorite Java UI framework?"", ""SWT/JFace"", validator);
	        if(dialog.open() == Window.OK) {
	          System.out.println(""Your favorite Java UI framework is: "" + dialog.getValue());
	        }else{
	          System.out.println(""Action cancelled"");
	        }
	      }
	    });
	    
	    /* ------ ProgressMonitorDialog ------------- */
	    final Button buttonProgressDialog = new Button(composite, SWT.PUSH);
	    buttonProgressDialog.setText(""Demo: ProgressMonitorDialog"");
	    buttonProgressDialog.addListener(SWT.Selection, new Listener() {
	      public void handleEvent(Event event) {
	        IRunnableWithProgress runnableWithProgress = new IRunnableWithProgress() {
	          public void run(IProgressMonitor monitor)
	            throws InvocationTargetException, InterruptedException {
	            monitor.beginTask(""Number counting"", 10);
	            for(int i=0; i<10; i++) {
	              if(monitor.isCanceled()) {
	                monitor.done();
	                return;
	              }
	                
	              System.out.println(""Count number: "" + i);
	              monitor.worked(1);
	              Thread.sleep(500); // 0.5s.
	            }
	            monitor.done();
	          }
	        };
	        
	        ProgressMonitorDialog dialog = new ProgressMonitorDialog(getShell());
	        try {
	          dialog.run(true, true, runnableWithProgress);
	        } catch (InvocationTargetException e) {
	          e.printStackTrace();
	        } catch (InterruptedException e) {
	          e.printStackTrace();
	        }
	        
	        
	      }
	    });    
	    return super.createContents(parent);
	  }

	  public static void main(String[] args) {
	    ApplicationWindow window = new DfmAboutDialog(null);
	    window.setBlockOnOpen(true);
	    window.open();
	  }
}
","/**
 * 
 */
package org.eclipse.gef.examples.flow.ui.dialog;
import java.lang.reflect.InvocationTargetException;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;

import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.jface.dialogs.IInputValidator;
import org.eclipse.jface.dialogs.InputDialog;
import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.jface.dialogs.ProgressMonitorDialog;
import org.eclipse.jface.operation.IRunnableWithProgress;
import org.eclipse.jface.window.ApplicationWindow;
import org.eclipse.jface.window.Window;
import org.eclipse.swt.SWT;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Control;
import org.eclipse.swt.widgets.Event;
import org.eclipse.swt.widgets.Listener;
import org.eclipse.swt.widgets.Shell;

/**
 * @author antani
 *
 */
public class DfmAboutDialog extends ApplicationWindow {

	public DfmAboutDialog(Shell parentShell) {
		super(parentShell);
		// TODO Auto-generated constructor stub
	}
	/*
	   * (non-Javadoc)
	   * 
	   * @see org.eclipse.jface.window.Window#createContents(org.eclipse.swt.widgets.Composite)
	   */
	  protected Control createContents(Composite parent) {
	    Composite composite = new Composite(parent, SWT.NULL);

	    composite.setLayout(new GridLayout());

	    /* ------ MessageDialog ------------- */
	    // openQuestion
	    final Button buttonOpenMessage = new Button(composite, SWT.PUSH);
	    buttonOpenMessage.setText(""Demo: MessageDialog.openQuestion"");
	    buttonOpenMessage.addListener(SWT.Selection, new Listener() {
	      public void handleEvent(Event event) {
	        
	        boolean answer =
	          MessageDialog.openQuestion(
	            getShell(),
	            ""A Simple Question"",
	            ""Is SWT/JFace your favorite Java UI framework?"");
	        System.out.println(""Your answer is "" + (answer ? ""YES"" : ""NO""));
	      }
	    });

	    final Button buttonMessageDialog = new Button(composite, SWT.PUSH);
	    buttonMessageDialog.setText(""Demo: new MessageDialog"");
	    buttonMessageDialog.addListener(SWT.Selection, new Listener() {
	      public void handleEvent(Event event) {
	        MessageDialog dialog =
	          new MessageDialog(
	            getShell(),
	            ""Select your favorite Java UI framework"",
	            null,
	            ""Which one of the following is your favorite Java UI framework?"",
	            MessageDialog.QUESTION,
	            new String[] { ""AWT"", ""Swing"", ""SWT/JFace"" },
	            2);
	        int answer = dialog.open();
	        
	        switch (answer) {
	          case -1: // if the user closes the dialog without clicking any button.
	            System.out.println(""No selection"");
	            break;
	            
	          case 0 :
	            System.out.println(""Your selection is: AWT"");
	            break;
	          case 1 :
	            System.out.println(""Your selection is: Swing"");
	            break;
	          case 2 :
	            System.out.println(""Your selection is: SWT/JFace"");
	            break;
	          
	        }
	      }
	    });
	    
	    /* ------ InputDialog ------------- */
	    final Button buttonInputDialog = new Button(composite, SWT.PUSH);
	    buttonInputDialog.setText(""Demo: InputDialog"");
	    buttonInputDialog.addListener(SWT.Selection, new Listener() {
	      public void handleEvent(Event event) {
	        IInputValidator validator = new IInputValidator() {
	          public String isValid(String newText) {
	            if(newText.equalsIgnoreCase(""SWT/JFace"") ||
	                newText.equalsIgnoreCase(""AWT"") ||
	                newText.equalsIgnoreCase(""Swing""))
	              return null;
	            else
	              return ""The allowed values are: SWT/JFace, AWT, Swing"";
	          }
	        };
	        InputDialog dialog = new InputDialog(getShell(), ""Question"", ""What's your favorite Java UI framework?"", ""SWT/JFace"", validator);
	        if(dialog.open() == Window.OK) {
	          System.out.println(""Your favorite Java UI framework is: "" + dialog.getValue());
	          String filePath = ""config/"" + dialog.getValue() + "".conf"";
	          try {
	            FileInputStream fis = new FileInputStream(new File(filePath));
	            fis.close();
	          } catch (IOException e) {
	            e.printStackTrace();
	          }
	        }else{
	          System.out.println(""Action cancelled"");
	        }
	      }
	    });
	    
	    /* ------ ProgressMonitorDialog ------------- */
	    final Button buttonProgressDialog = new Button(composite, SWT.PUSH);
	    buttonProgressDialog.setText(""Demo: ProgressMonitorDialog"");
	    buttonProgressDialog.addListener(SWT.Selection, new Listener() {
	      public void handleEvent(Event event) {
	        IRunnableWithProgress runnableWithProgress = new IRunnableWithProgress() {
	          public void run(IProgressMonitor monitor)
	            throws InvocationTargetException, InterruptedException {
	            monitor.beginTask(""Number counting"", 10);
	            for(int i=0; i<10; i++) {
	              if(monitor.isCanceled()) {
	                monitor.done();
	                return;
	              }
	                
	              System.out.println(""Count number: "" + i);
	              monitor.worked(1);
	              Thread.sleep(500); // 0.5s.
	            }
	            monitor.done();
	          }
	        };
	        
	        ProgressMonitorDialog dialog = new ProgressMonitorDialog(getShell());
	        try {
	          dialog.run(true, true, runnableWithProgress);
	        } catch (InvocationTargetException e) {
	          e.printStackTrace();
	        } catch (InterruptedException e) {
	          e.printStackTrace();
	        }
	        
	        
	      }
	    });    
	    return super.createContents(parent);
	  }

	  public static void main(String[] args) {
	    ApplicationWindow window = new DfmAboutDialog(null);
	    window.setBlockOnOpen(true);
	    window.open();
	  }
}","String filePath = ""config/"" + dialog.getValue() + "".conf"";",CWE-23,"The code constructs a file path using unsanitized user input, which can lead to path traversal vulnerabilities, allowing unauthorized access to files outside the intended directory.",[ 3 20 12  0 69],[ 3 20 12  0 69]
24,72,"
package crmondemand.xml.account;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for Lead complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name=""Lead"">
 *   &lt;complexContent>
 *     &lt;restriction base=""{http://www.w3.org/2001/XMLSchema}anyType"">
 *       &lt;sequence>
 *         &lt;element name=""LeadId"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""Campaign"" type=""{urn:/crmondemand/xml/account}string100"" minOccurs=""0""/>
 *         &lt;element name=""EstimatedCloseDate"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""Rating"" type=""{urn:/crmondemand/xml/account}string30"" minOccurs=""0""/>
 *         &lt;element name=""Source"" type=""{urn:/crmondemand/xml/account}string30"" minOccurs=""0""/>
 *         &lt;element name=""Status"" type=""{urn:/crmondemand/xml/account}string30"" minOccurs=""0""/>
 *         &lt;element name=""LeadOwner"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""PotentialRevenue"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""ProductInterest"" type=""{urn:/crmondemand/xml/account}string100"" minOccurs=""0""/>
 *         &lt;element name=""SalesPerson"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""AccountId"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""AnnualRevenues"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""CampaignId"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""CellularPhone"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""City"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""Company"" type=""{urn:/crmondemand/xml/account}string100"" minOccurs=""0""/>
 *         &lt;element name=""AccountConcatField"" type=""{urn:/crmondemand/xml/account}string255"" minOccurs=""0""/>
 *         &lt;element name=""ContactFirstName"" type=""{urn:/crmondemand/xml/account}string50"" minOccurs=""0""/>
 *         &lt;element name=""ContactFullName"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""ContactId"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""ContactLastName"" type=""{urn:/crmondemand/xml/account}string50"" minOccurs=""0""/>
 *         &lt;element name=""Country"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""CreatedDate"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""CreatedById"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""CreatedBy"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""CurrencyCode"" type=""{urn:/crmondemand/xml/account}string20"" minOccurs=""0""/>
 *         &lt;element name=""Description"" type=""{urn:/crmondemand/xml/account}string2000"" minOccurs=""0""/>
 *         &lt;element name=""LeadEmail"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""ExternalSystemId"" type=""{urn:/crmondemand/xml/account}string30"" minOccurs=""0""/>
 *         &lt;element name=""FaxPhone"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""LeadFirstName"" type=""{http://www.w3.org/2001/XMLSchema}string""/>
 *         &lt;element name=""LeadFullName"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""Industry"" type=""{urn:/crmondemand/xml/account}string50"" minOccurs=""0""/>
 *         &lt;element name=""IntegrationId"" type=""{urn:/crmondemand/xml/account}string30"" minOccurs=""0""/>
 *         &lt;element name=""JobTitle"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""LeadLastName"" type=""{urn:/crmondemand/xml/account}string50""/>
 *         &lt;element name=""MrMrs"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""ModifiedDate"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""ModifiedById"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""ModifiedBy"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""NextStep"" type=""{urn:/crmondemand/xml/account}string250"" minOccurs=""0""/>
 *         &lt;element name=""NumberEmployees"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""OpportunityId"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""OpportunityName"" type=""{urn:/crmondemand/xml/account}string100"" minOccurs=""0""/>
 *         &lt;element name=""OwnerId"" type=""{http://www.w3.org/2001/XMLSchema}string""/>
 *         &lt;element name=""ZipCode"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""ReassignLeadOwner"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""SalesRepId"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""StateProvince"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""StreetAddress"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""NeverEmail"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""Website"" type=""{urn:/crmondemand/xml/account}string100"" minOccurs=""0""/>
 *         &lt;element name=""PrimaryPhone"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""Owner"" type=""{urn:/crmondemand/xml/account}string50"" minOccurs=""0""/>
 *         &lt;element name=""StreetAddress2"" type=""{urn:/crmondemand/xml/account}string100"" minOccurs=""0""/>
 *         &lt;element name=""StreetAddress3"" type=""{urn:/crmondemand/xml/account}string100"" minOccurs=""0""/>
 *         &lt;element name=""IndexedBoolean0"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""IndexedCurrency0"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""IndexedDate0"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""IndexedLongText0"" type=""{urn:/crmondemand/xml/account}string255"" minOccurs=""0""/>
 *         &lt;element name=""IndexedNumber0"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""IndexedPick0"" type=""{urn:/crmondemand/xml/account}string30"" minOccurs=""0""/>
 *         &lt;element name=""IndexedPick1"" type=""{urn:/crmondemand/xml/account}string30"" minOccurs=""0""/>
 *         &lt;element name=""IndexedPick2"" type=""{urn:/crmondemand/xml/account}string30"" minOccurs=""0""/>
 *         &lt;element name=""IndexedPick3"" type=""{urn:/crmondemand/xml/account}string30"" minOccurs=""0""/>
 *         &lt;element name=""IndexedPick4"" type=""{urn:/crmondemand/xml/account}string30"" minOccurs=""0""/>
 *         &lt;element name=""IndexedPick5"" type=""{urn:/crmondemand/xml/account}string30"" minOccurs=""0""/>
 *         &lt;element name=""IndexedShortText0"" type=""{urn:/crmondemand/xml/account}string40"" minOccurs=""0""/>
 *         &lt;element name=""IndexedShortText1"" type=""{urn:/crmondemand/xml/account}string40"" minOccurs=""0""/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = ""Lead"", propOrder = {
    ""leadId"",
    ""campaign"",
    ""estimatedCloseDate"",
    ""rating"",
    ""source"",
    ""status"",
    ""leadOwner"",
    ""potentialRevenue"",
    ""productInterest"",
    ""salesPerson"",
    ""accountId"",
    ""annualRevenues"",
    ""campaignId"",
    ""cellularPhone"",
    ""city"",
    ""company"",
    ""accountConcatField"",
    ""contactFirstName"",
    ""contactFullName"",
    ""contactId"",
    ""contactLastName"",
    ""country"",
    ""createdDate"",
    ""createdById"",
    ""createdBy"",
    ""currencyCode"",
    ""description"",
    ""leadEmail"",
    ""externalSystemId"",
    ""faxPhone"",
    ""leadFirstName"",
    ""leadFullName"",
    ""industry"",
    ""integrationId"",
    ""jobTitle"",
    ""leadLastName"",
    ""mrMrs"",
    ""modifiedDate"",
    ""modifiedById"",
    ""modifiedBy"",
    ""nextStep"",
    ""numberEmployees"",
    ""opportunityId"",
    ""opportunityName"",
    ""ownerId"",
    ""zipCode"",
    ""reassignLeadOwner"",
    ""salesRepId"",
    ""stateProvince"",
    ""streetAddress"",
    ""neverEmail"",
    ""website"",
    ""primaryPhone"",
    ""owner"",
    ""streetAddress2"",
    ""streetAddress3"",
    ""indexedBoolean0"",
    ""indexedCurrency0"",
    ""indexedDate0"",
    ""indexedLongText0"",
    ""indexedNumber0"",
    ""indexedPick0"",
    ""indexedPick1"",
    ""indexedPick2"",
    ""indexedPick3"",
    ""indexedPick4"",
    ""indexedPick5"",
    ""indexedShortText0"",
    ""indexedShortText1""
})
public class Lead {

    @XmlElement(name = ""LeadId"")
    protected String leadId;
    @XmlElement(name = ""Campaign"")
    protected String campaign;
    @XmlElement(name = ""EstimatedCloseDate"")
    protected String estimatedCloseDate;
    @XmlElement(name = ""Rating"")
    protected String rating;
    @XmlElement(name = ""Source"")
    protected String source;
    @XmlElement(name = ""Status"")
    protected String status;
    @XmlElement(name = ""LeadOwner"")
    protected String leadOwner;
    @XmlElement(name = ""PotentialRevenue"")
    protected String potentialRevenue;
    @XmlElement(name = ""ProductInterest"")
    protected String productInterest;
    @XmlElement(name = ""SalesPerson"")
    protected String salesPerson;
    @XmlElement(name = ""AccountId"")
    protected String accountId;
    @XmlElement(name = ""AnnualRevenues"")
    protected String annualRevenues;
    @XmlElement(name = ""CampaignId"")
    protected String campaignId;
    @XmlElement(name = ""CellularPhone"")
    protected String cellularPhone;
    @XmlElement(name = ""City"")
    protected String city;
    @XmlElement(name = ""Company"")
    protected String company;
    @XmlElement(name = ""AccountConcatField"")
    protected String accountConcatField;
    @XmlElement(name = ""ContactFirstName"")
    protected String contactFirstName;
    @XmlElement(name = ""ContactFullName"")
    protected String contactFullName;
    @XmlElement(name = ""ContactId"")
    protected String contactId;
    @XmlElement(name = ""ContactLastName"")
    protected String contactLastName;
    @XmlElement(name = ""Country"")
    protected String country;
    @XmlElement(name = ""CreatedDate"")
    protected String createdDate;
    @XmlElement(name = ""CreatedById"")
    protected String createdById;
    @XmlElement(name = ""CreatedBy"")
    protected String createdBy;
    @XmlElement(name = ""CurrencyCode"")
    protected String currencyCode;
    @XmlElement(name = ""Description"")
    protected String description;
    @XmlElement(name = ""LeadEmail"")
    protected String leadEmail;
    @XmlElement(name = ""ExternalSystemId"")
    protected String externalSystemId;
    @XmlElement(name = ""FaxPhone"")
    protected String faxPhone;
    @XmlElement(name = ""LeadFirstName"", required = true)
    protected String leadFirstName;
    @XmlElement(name = ""LeadFullName"")
    protected String leadFullName;
    @XmlElement(name = ""Industry"")
    protected String industry;
    @XmlElement(name = ""IntegrationId"")
    protected String integrationId;
    @XmlElement(name = ""JobTitle"")
    protected String jobTitle;
    @XmlElement(name = ""LeadLastName"", required = true)
    protected String leadLastName;
    @XmlElement(name = ""MrMrs"")
    protected String mrMrs;
    @XmlElement(name = ""ModifiedDate"")
    protected String modifiedDate;
    @XmlElement(name = ""ModifiedById"")
    protected String modifiedById;
    @XmlElement(name = ""ModifiedBy"")
    protected String modifiedBy;
    @XmlElement(name = ""NextStep"")
    protected String nextStep;
    @XmlElement(name = ""NumberEmployees"")
    protected String numberEmployees;
    @XmlElement(name = ""OpportunityId"")
    protected String opportunityId;
    @XmlElement(name = ""OpportunityName"")
    protected String opportunityName;
    @XmlElement(name = ""OwnerId"", required = true)
    protected String ownerId;
    @XmlElement(name = ""ZipCode"")
    protected String zipCode;
    @XmlElement(name = ""ReassignLeadOwner"")
    protected String reassignLeadOwner;
    @XmlElement(name = ""SalesRepId"")
    protected String salesRepId;
    @XmlElement(name = ""StateProvince"")
    protected String stateProvince;
    @XmlElement(name = ""StreetAddress"")
    protected String streetAddress;
    @XmlElement(name = ""NeverEmail"")
    protected String neverEmail;
    @XmlElement(name = ""Website"")
    protected String website;
    @XmlElement(name = ""PrimaryPhone"")
    protected String primaryPhone;
    @XmlElement(name = ""Owner"")
    protected String owner;
    @XmlElement(name = ""StreetAddress2"")
    protected String streetAddress2;
    @XmlElement(name = ""StreetAddress3"")
    protected String streetAddress3;
    @XmlElement(name = ""IndexedBoolean0"")
    protected String indexedBoolean0;
    @XmlElement(name = ""IndexedCurrency0"")
    protected String indexedCurrency0;
    @XmlElement(name = ""IndexedDate0"")
    protected String indexedDate0;
    @XmlElement(name = ""IndexedLongText0"")
    protected String indexedLongText0;
    @XmlElement(name = ""IndexedNumber0"")
    protected String indexedNumber0;
    @XmlElement(name = ""IndexedPick0"")
    protected String indexedPick0;
    @XmlElement(name = ""IndexedPick1"")
    protected String indexedPick1;
    @XmlElement(name = ""IndexedPick2"")
    protected String indexedPick2;
    @XmlElement(name = ""IndexedPick3"")
    protected String indexedPick3;
    @XmlElement(name = ""IndexedPick4"")
    protected String indexedPick4;
    @XmlElement(name = ""IndexedPick5"")
    protected String indexedPick5;
    @XmlElement(name = ""IndexedShortText0"")
    protected String indexedShortText0;
    @XmlElement(name = ""IndexedShortText1"")
    protected String indexedShortText1;

    /**
     * Gets the value of the leadId property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getLeadId() {
        return leadId;
    }

    /**
     * Sets the value of the leadId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setLeadId(String value) {
        this.leadId = value;
    }

    /**
     * Gets the value of the campaign property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getCampaign() {
        return campaign;
    }

    /**
     * Sets the value of the campaign property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setCampaign(String value) {
        this.campaign = value;
    }

    /**
     * Gets the value of the estimatedCloseDate property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getEstimatedCloseDate() {
        return estimatedCloseDate;
    }

    /**
     * Sets the value of the estimatedCloseDate property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setEstimatedCloseDate(String value) {
        this.estimatedCloseDate = value;
    }

    /**
     * Gets the value of the rating property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getRating() {
        return rating;
    }

    /**
     * Sets the value of the rating property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setRating(String value) {
        this.rating = value;
    }

    /**
     * Gets the value of the source property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getSource() {
        return source;
    }

    /**
     * Sets the value of the source property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setSource(String value) {
        this.source = value;
    }

    /**
     * Gets the value of the status property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getStatus() {
        return status;
    }

    /**
     * Sets the value of the status property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setStatus(String value) {
        this.status = value;
    }

    /**
     * Gets the value of the leadOwner property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getLeadOwner() {
        return leadOwner;
    }

    /**
     * Sets the value of the leadOwner property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setLeadOwner(String value) {
        this.leadOwner = value;
    }

    /**
     * Gets the value of the potentialRevenue property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getPotentialRevenue() {
        return potentialRevenue;
    }

    /**
     * Sets the value of the potentialRevenue property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setPotentialRevenue(String value) {
        this.potentialRevenue = value;
    }

    /**
     * Gets the value of the productInterest property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getProductInterest() {
        return productInterest;
    }

    /**
     * Sets the value of the productInterest property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setProductInterest(String value) {
        this.productInterest = value;
    }

    /**
     * Gets the value of the salesPerson property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getSalesPerson() {
        return salesPerson;
    }

    /**
     * Sets the value of the salesPerson property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setSalesPerson(String value) {
        this.salesPerson = value;
    }

    /**
     * Gets the value of the accountId property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getAccountId() {
        return accountId;
    }

    /**
     * Sets the value of the accountId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setAccountId(String value) {
        this.accountId = value;
    }

    /**
     * Gets the value of the annualRevenues property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getAnnualRevenues() {
        return annualRevenues;
    }

    /**
     * Sets the value of the annualRevenues property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setAnnualRevenues(String value) {
        this.annualRevenues = value;
    }

    /**
     * Gets the value of the campaignId property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getCampaignId() {
        return campaignId;
    }

    /**
     * Sets the value of the campaignId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setCampaignId(String value) {
        this.campaignId = value;
    }

    /**
     * Gets the value of the cellularPhone property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getCellularPhone() {
        return cellularPhone;
    }

    /**
     * Sets the value of the cellularPhone property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setCellularPhone(String value) {
        this.cellularPhone = value;
    }

    /**
     * Gets the value of the city property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getCity() {
        return city;
    }

    /**
     * Sets the value of the city property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setCity(String value) {
        this.city = value;
    }

    /**
     * Gets the value of the company property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getCompany() {
        return company;
    }

    /**
     * Sets the value of the company property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setCompany(String value) {
        this.company = value;
    }

    /**
     * Gets the value of the accountConcatField property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getAccountConcatField() {
        return accountConcatField;
    }

    /**
     * Sets the value of the accountConcatField property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setAccountConcatField(String value) {
        this.accountConcatField = value;
    }

    /**
     * Gets the value of the contactFirstName property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getContactFirstName() {
        return contactFirstName;
    }

    /**
     * Sets the value of the contactFirstName property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setContactFirstName(String value) {
        this.contactFirstName = value;
    }

    /**
     * Gets the value of the contactFullName property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getContactFullName() {
        return contactFullName;
    }

    /**
     * Sets the value of the contactFullName property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setContactFullName(String value) {
        this.contactFullName = value;
    }

    /**
     * Gets the value of the contactId property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getContactId() {
        return contactId;
    }

    /**
     * Sets the value of the contactId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setContactId(String value) {
        this.contactId = value;
    }

    /**
     * Gets the value of the contactLastName property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getContactLastName() {
        return contactLastName;
    }

    /**
     * Sets the value of the contactLastName property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setContactLastName(String value) {
        this.contactLastName = value;
    }

    /**
     * Gets the value of the country property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getCountry() {
        return country;
    }

    /**
     * Sets the value of the country property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setCountry(String value) {
        this.country = value;
    }

    /**
     * Gets the value of the createdDate property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getCreatedDate() {
        return createdDate;
    }

    /**
     * Sets the value of the createdDate property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setCreatedDate(String value) {
        this.createdDate = value;
    }

    /**
     * Gets the value of the createdById property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getCreatedById() {
        return createdById;
    }

    /**
     * Sets the value of the createdById property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setCreatedById(String value) {
        this.createdById = value;
    }

    /**
     * Gets the value of the createdBy property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getCreatedBy() {
        return createdBy;
    }

    /**
     * Sets the value of the createdBy property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setCreatedBy(String value) {
        this.createdBy = value;
    }

    /**
     * Gets the value of the currencyCode property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getCurrencyCode() {
        return currencyCode;
    }

    /**
     * Sets the value of the currencyCode property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setCurrencyCode(String value) {
        this.currencyCode = value;
    }

    /**
     * Gets the value of the description property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getDescription() {
        return description;
    }

    /**
     * Sets the value of the description property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setDescription(String value) {
        this.description = value;
    }

    /**
     * Gets the value of the leadEmail property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getLeadEmail() {
        return leadEmail;
    }

    /**
     * Sets the value of the leadEmail property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setLeadEmail(String value) {
        this.leadEmail = value;
    }

    /**
     * Gets the value of the externalSystemId property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getExternalSystemId() {
        return externalSystemId;
    }

    /**
     * Sets the value of the externalSystemId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setExternalSystemId(String value) {
        this.externalSystemId = value;
    }

    /**
     * Gets the value of the faxPhone property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getFaxPhone() {
        return faxPhone;
    }

    /**
     * Sets the value of the faxPhone property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setFaxPhone(String value) {
        this.faxPhone = value;
    }

    /**
     * Gets the value of the leadFirstName property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getLeadFirstName() {
        return leadFirstName;
    }

    /**
     * Sets the value of the leadFirstName property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setLeadFirstName(String value) {
        this.leadFirstName = value;
    }

    /**
     * Gets the value of the leadFullName property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getLeadFullName() {
        return leadFullName;
    }

    /**
     * Sets the value of the leadFullName property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setLeadFullName(String value) {
        this.leadFullName = value;
    }

    /**
     * Gets the value of the industry property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getIndustry() {
        return industry;
    }

    /**
     * Sets the value of the industry property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setIndustry(String value) {
        this.industry = value;
    }

    /**
     * Gets the value of the integrationId property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getIntegrationId() {
        return integrationId;
    }

    /**
     * Sets the value of the integrationId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setIntegrationId(String value) {
        this.integrationId = value;
    }

    /**
     * Gets the value of the jobTitle property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getJobTitle() {
        return jobTitle;
    }

    /**
     * Sets the value of the jobTitle property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setJobTitle(String value) {
        this.jobTitle = value;
    }

    /**
     * Gets the value of the leadLastName property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getLeadLastName() {
        return leadLastName;
    }

    /**
     * Sets the value of the leadLastName property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setLeadLastName(String value) {
        this.leadLastName = value;
    }

    /**
     * Gets the value of the mrMrs property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getMrMrs() {
        return mrMrs;
    }

    /**
     * Sets the value of the mrMrs property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setMrMrs(String value) {
        this.mrMrs = value;
    }

    /**
     * Gets the value of the modifiedDate property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getModifiedDate() {
        return modifiedDate;
    }

    /**
     * Sets the value of the modifiedDate property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setModifiedDate(String value) {
        this.modifiedDate = value;
    }

    /**
     * Gets the value of the modifiedById property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getModifiedById() {
        return modifiedById;
    }

    /**
     * Sets the value of the modifiedById property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setModifiedById(String value) {
        this.modifiedById = value;
    }

    /**
     * Gets the value of the modifiedBy property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getModifiedBy() {
        return modifiedBy;
    }

    /**
     * Sets the value of the modifiedBy property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setModifiedBy(String value) {
        this.modifiedBy = value;
    }

    /**
     * Gets the value of the nextStep property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getNextStep() {
        return nextStep;
    }

    /**
     * Sets the value of the nextStep property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setNextStep(String value) {
        this.nextStep = value;
    }

    /**
     * Gets the value of the numberEmployees property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getNumberEmployees() {
        return numberEmployees;
    }

    /**
     * Sets the value of the numberEmployees property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setNumberEmployees(String value) {
        this.numberEmployees = value;
    }

    /**
     * Gets the value of the opportunityId property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getOpportunityId() {
        return opportunityId;
    }

    /**
     * Sets the value of the opportunityId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setOpportunityId(String value) {
        this.opportunityId = value;
    }

    /**
     * Gets the value of the opportunityName property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getOpportunityName() {
        return opportunityName;
    }

    /**
     * Sets the value of the opportunityName property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setOpportunityName(String value) {
        this.opportunityName = value;
    }

    /**
     * Gets the value of the ownerId property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getOwnerId() {
        return ownerId;
    }

    /**
     * Sets the value of the ownerId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setOwnerId(String value) {
        this.ownerId = value;
    }

    /**
     * Gets the value of the zipCode property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getZipCode() {
        return zipCode;
    }

    /**
     * Sets the value of the zipCode property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setZipCode(String value) {
        this.zipCode = value;
    }

    /**
     * Gets the value of the reassignLeadOwner property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getReassignLeadOwner() {
        return reassignLeadOwner;
    }

    /**
     * Sets the value of the reassignLeadOwner property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setReassignLeadOwner(String value) {
        this.reassignLeadOwner = value;
    }

    /**
     * Gets the value of the salesRepId property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getSalesRepId() {
        return salesRepId;
    }

    /**
     * Sets the value of the salesRepId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setSalesRepId(String value) {
        this.salesRepId = value;
    }

    /**
     * Gets the value of the stateProvince property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getStateProvince() {
        return stateProvince;
    }

    /**
     * Sets the value of the stateProvince property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setStateProvince(String value) {
        this.stateProvince = value;
    }

    /**
     * Gets the value of the streetAddress property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getStreetAddress() {
        return streetAddress;
    }

    /**
     * Sets the value of the streetAddress property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setStreetAddress(String value) {
        this.streetAddress = value;
    }

    /**
     * Gets the value of the neverEmail property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getNeverEmail() {
        return neverEmail;
    }

    /**
     * Sets the value of the neverEmail property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setNeverEmail(String value) {
        this.neverEmail = value;
    }

    /**
     * Gets the value of the website property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getWebsite() {
        return website;
    }

    /**
     * Sets the value of the website property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setWebsite(String value) {
        this.website = value;
    }

    /**
     * Gets the value of the primaryPhone property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getPrimaryPhone() {
        return primaryPhone;
    }

    /**
     * Sets the value of the primaryPhone property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setPrimaryPhone(String value) {
        this.primaryPhone = value;
    }

    /**
     * Gets the value of the owner property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getOwner() {
        return owner;
    }

    /**
     * Sets the value of the owner property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setOwner(String value) {
        this.owner = value;
    }

    /**
     * Gets the value of the streetAddress2 property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getStreetAddress2() {
        return streetAddress2;
    }

    /**
     * Sets the value of the streetAddress2 property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setStreetAddress2(String value) {
        this.streetAddress2 = value;
    }

    /**
     * Gets the value of the streetAddress3 property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getStreetAddress3() {
        return streetAddress3;
    }

    /**
     * Sets the value of the streetAddress3 property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setStreetAddress3(String value) {
        this.streetAddress3 = value;
    }

    /**
     * Gets the value of the indexedBoolean0 property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getIndexedBoolean0() {
        return indexedBoolean0;
    }

    /**
     * Sets the value of the indexedBoolean0 property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setIndexedBoolean0(String value) {
        this.indexedBoolean0 = value;
    }

    /**
     * Gets the value of the indexedCurrency0 property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getIndexedCurrency0() {
        return indexedCurrency0;
    }

    /**
     * Sets the value of the indexedCurrency0 property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setIndexedCurrency0(String value) {
        this.indexedCurrency0 = value;
    }

    /**
     * Gets the value of the indexedDate0 property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getIndexedDate0() {
        return indexedDate0;
    }

    /**
     * Sets the value of the indexedDate0 property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setIndexedDate0(String value) {
        this.indexedDate0 = value;
    }

    /**
     * Gets the value of the indexedLongText0 property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getIndexedLongText0() {
        return indexedLongText0;
    }

    /**
     * Sets the value of the indexedLongText0 property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setIndexedLongText0(String value) {
        this.indexedLongText0 = value;
    }

    /**
     * Gets the value of the indexedNumber0 property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getIndexedNumber0() {
        return indexedNumber0;
    }

    /**
     * Sets the value of the indexedNumber0 property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setIndexedNumber0(String value) {
        this.indexedNumber0 = value;
    }

    /**
     * Gets the value of the indexedPick0 property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getIndexedPick0() {
        return indexedPick0;
    }

    /**
     * Sets the value of the indexedPick0 property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setIndexedPick0(String value) {
        this.indexedPick0 = value;
    }

    /**
     * Gets the value of the indexedPick1 property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getIndexedPick1() {
        return indexedPick1;
    }

    /**
     * Sets the value of the indexedPick1 property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setIndexedPick1(String value) {
        this.indexedPick1 = value;
    }

    /**
     * Gets the value of the indexedPick2 property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getIndexedPick2() {
        return indexedPick2;
    }

    /**
     * Sets the value of the indexedPick2 property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setIndexedPick2(String value) {
        this.indexedPick2 = value;
    }

    /**
     * Gets the value of the indexedPick3 property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getIndexedPick3() {
        return indexedPick3;
    }

    /**
     * Sets the value of the indexedPick3 property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setIndexedPick3(String value) {
        this.indexedPick3 = value;
    }

    /**
     * Gets the value of the indexedPick4 property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getIndexedPick4() {
        return indexedPick4;
    }

    /**
     * Sets the value of the indexedPick4 property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setIndexedPick4(String value) {
        this.indexedPick4 = value;
    }

    /**
     * Gets the value of the indexedPick5 property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getIndexedPick5() {
        return indexedPick5;
    }

    /**
     * Sets the value of the indexedPick5 property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setIndexedPick5(String value) {
        this.indexedPick5 = value;
    }

    /**
     * Gets the value of the indexedShortText0 property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getIndexedShortText0() {
        return indexedShortText0;
    }

    /**
     * Sets the value of the indexedShortText0 property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setIndexedShortText0(String value) {
        this.indexedShortText0 = value;
    }

    /**
     * Gets the value of the indexedShortText1 property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getIndexedShortText1() {
        return indexedShortText1;
    }

    /**
     * Sets the value of the indexedShortText1 property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setIndexedShortText1(String value) {
        this.indexedShortText1 = value;
    }

}
","package crmondemand.xml.account;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;

/**
 * <p>Java class for Lead complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name=""Lead"">
 *   &lt;complexContent>
 *     &lt;restriction base=""{http://www.w3.org/2001/XMLSchema}anyType"">
 *       &lt;sequence>
 *         &lt;element name=""LeadId"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""Campaign"" type=""{urn:/crmondemand/xml/account}string100"" minOccurs=""0""/>
 *         &lt;element name=""EstimatedCloseDate"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""Rating"" type=""{urn:/crmondemand/xml/account}string30"" minOccurs=""0""/>
 *         &lt;element name=""Source"" type=""{urn:/crmondemand/xml/account}string30"" minOccurs=""0""/>
 *         &lt;element name=""Status"" type=""{urn:/crmondemand/xml/account}string30"" minOccurs=""0""/>
 *         &lt;element name=""LeadOwner"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""PotentialRevenue"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""ProductInterest"" type=""{urn:/crmondemand/xml/account}string100"" minOccurs=""0""/>
 *         &lt;element name=""SalesPerson"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""AccountId"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""AnnualRevenues"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""CampaignId"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""CellularPhone"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""City"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""Company"" type=""{urn:/crmondemand/xml/account}string100"" minOccurs=""0""/>
 *         &lt;element name=""AccountConcatField"" type=""{urn:/crmondemand/xml/account}string255"" minOccurs=""0""/>
 *         &lt;element name=""ContactFirstName"" type=""{urn:/crmondemand/xml/account}string50"" minOccurs=""0""/>
 *         &lt;element name=""ContactFullName"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""ContactId"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""ContactLastName"" type=""{urn:/crmondemand/xml/account}string50"" minOccurs=""0""/>
 *         &lt;element name=""Country"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""CreatedDate"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""CreatedById"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""CreatedBy"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""CurrencyCode"" type=""{urn:/crmondemand/xml/account}string20"" minOccurs=""0""/>
 *         &lt;element name=""Description"" type=""{urn:/crmondemand/xml/account}string2000"" minOccurs=""0""/>
 *         &lt;element name=""LeadEmail"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""ExternalSystemId"" type=""{urn:/crmondemand/xml/account}string30"" minOccurs=""0""/>
 *         &lt;element name=""FaxPhone"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""LeadFirstName"" type=""{http://www.w3.org/2001/XMLSchema}string""/>
 *         &lt;element name=""LeadFullName"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""Industry"" type=""{urn:/crmondemand/xml/account}string50"" minOccurs=""0""/>
 *         &lt;element name=""IntegrationId"" type=""{urn:/crmondemand/xml/account}string30"" minOccurs=""0""/>
 *         &lt;element name=""JobTitle"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""LeadLastName"" type=""{urn:/crmondemand/xml/account}string50""/>
 *         &lt;element name=""MrMrs"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""ModifiedDate"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""ModifiedById"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""ModifiedBy"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""NextStep"" type=""{urn:/crmondemand/xml/account}string250"" minOccurs=""0""/>
 *         &lt;element name=""NumberEmployees"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""OpportunityId"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""OpportunityName"" type=""{urn:/crmondemand/xml/account}string100"" minOccurs=""0""/>
 *         &lt;element name=""OwnerId"" type=""{http://www.w3.org/2001/XMLSchema}string""/>
 *         &lt;element name=""ZipCode"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""ReassignLeadOwner"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""SalesRepId"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""StateProvince"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""StreetAddress"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""NeverEmail"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""Website"" type=""{urn:/crmondemand/xml/account}string100"" minOccurs=""0""/>
 *         &lt;element name=""PrimaryPhone"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""Owner"" type=""{urn:/crmondemand/xml/account}string50"" minOccurs=""0""/>
 *         &lt;element name=""StreetAddress2"" type=""{urn:/crmondemand/xml/account}string100"" minOccurs=""0""/>
 *         &lt;element name=""StreetAddress3"" type=""{urn:/crmondemand/xml/account}string100"" minOccurs=""0""/>
 *         &lt;element name=""IndexedBoolean0"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""IndexedCurrency0"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""IndexedDate0"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""IndexedLongText0"" type=""{urn:/crmondemand/xml/account}string255"" minOccurs=""0""/>
 *         &lt;element name=""IndexedNumber0"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""IndexedPick0"" type=""{urn:/crmondemand/xml/account}string30"" minOccurs=""0""/>
 *         &lt;element name=""IndexedPick1"" type=""{urn:/crmondemand/xml/account}string30"" minOccurs=""0""/>
 *         &lt;element name=""IndexedPick2"" type=""{urn:/crmondemand/xml/account}string30"" minOccurs=""0""/>
 *         &lt;element name=""IndexedPick3"" type=""{urn:/crmondemand/xml/account}string30"" minOccurs=""0""/>
 *         &lt;element name=""IndexedPick4"" type=""{urn:/crmondemand/xml/account}string30"" minOccurs=""0""/>
 *         &lt;element name=""IndexedPick5"" type=""{urn:/crmondemand/xml/account}string30"" minOccurs=""0""/>
 *         &lt;element name=""IndexedShortText0"" type=""{urn:/crmondemand/xml/account}string40"" minOccurs=""0""/>
 *         &lt;element name=""IndexedShortText1"" type=""{urn:/crmondemand/xml/account}string40"" minOccurs=""0""/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = ""Lead"", propOrder = {
    ""leadId"",
    ""campaign"",
    ""estimatedCloseDate"",
    ""rating"",
    ""source"",
    ""status"",
    ""leadOwner"",
    ""potentialRevenue"",
    ""productInterest"",
    ""salesPerson"",
    ""accountId"",
    ""annualRevenues"",
    ""campaignId"",
    ""cellularPhone"",
    ""city"",
    ""company"",
    ""accountConcatField"",
    ""contactFirstName"",
    ""contactFullName"",
    ""contactId"",
    ""contactLastName"",
    ""country"",
    ""createdDate"",
    ""createdById"",
    ""createdBy"",
    ""currencyCode"",
    ""description"",
    ""leadEmail"",
    ""externalSystemId"",
    ""faxPhone"",
    ""leadFirstName"",
    ""leadFullName"",
    ""industry"",
    ""integrationId"",
    ""jobTitle"",
    ""leadLastName"",
    ""mrMrs"",
    ""modifiedDate"",
    ""modifiedById"",
    ""modifiedBy"",
    ""nextStep"",
    ""numberEmployees"",
    ""opportunityId"",
    ""opportunityName"",
    ""ownerId"",
    ""zipCode"",
    ""reassignLeadOwner"",
    ""salesRepId"",
    ""stateProvince"",
    ""streetAddress"",
    ""neverEmail"",
    ""website"",
    ""primaryPhone"",
    ""owner"",
    ""streetAddress2"",
    ""streetAddress3"",
    ""indexedBoolean0"",
    ""indexedCurrency0"",
    ""indexedDate0"",
    ""indexedLongText0"",
    ""indexedNumber0"",
    ""indexedPick0"",
    ""indexedPick1"",
    ""indexedPick2"",
    ""indexedPick3"",
    ""indexedPick4"",
    ""indexedPick5"",
    ""indexedShortText0"",
    ""indexedShortText1""
})
public class Lead {

    @XmlElement(name = ""LeadId"")
    protected String leadId;
    @XmlElement(name = ""Campaign"")
    protected String campaign;
    @XmlElement(name = ""EstimatedCloseDate"")
    protected String estimatedCloseDate;
    @XmlElement(name = ""Rating"")
    protected String rating;
    @XmlElement(name = ""Source"")
    protected String source;
    @XmlElement(name = ""Status"")
    protected String status;
    @XmlElement(name = ""LeadOwner"")
    protected String leadOwner;
    @XmlElement(name = ""PotentialRevenue"")
    protected String potentialRevenue;
    @XmlElement(name = ""ProductInterest"")
    protected String productInterest;
    @XmlElement(name = ""SalesPerson"")
    protected String salesPerson;
    @XmlElement(name = ""AccountId"")
    protected String accountId;
    @XmlElement(name = ""AnnualRevenues"")
    protected String annualRevenues;
    @XmlElement(name = ""CampaignId"")
    protected String campaignId;
    @XmlElement(name = ""CellularPhone"")
    protected String cellularPhone;
    @XmlElement(name = ""City"")
    protected String city;
    @XmlElement(name = ""Company"")
    protected String company;
    @XmlElement(name = ""AccountConcatField"")
    protected String accountConcatField;
    @XmlElement(name = ""ContactFirstName"")
    protected String contactFirstName;
    @XmlElement(name = ""ContactFullName"")
    protected String contactFullName;
    @XmlElement(name = ""ContactId"")
    protected String contactId;
    @XmlElement(name = ""ContactLastName"")
    protected String contactLastName;
    @XmlElement(name = ""Country"")
    protected String country;
    @XmlElement(name = ""CreatedDate"")
    protected String createdDate;
    @XmlElement(name = ""CreatedById"")
    protected String createdById;
    @XmlElement(name = ""CreatedBy"")
    protected String createdBy;
    @XmlElement(name = ""CurrencyCode"")
    protected String currencyCode;
    @XmlElement(name = ""Description"")
    protected String description;
    @XmlElement(name = ""LeadEmail"")
    protected String leadEmail;
    @XmlElement(name = ""ExternalSystemId"")
    protected String externalSystemId;
    @XmlElement(name = ""FaxPhone"")
    protected String faxPhone;
    @XmlElement(name = ""LeadFirstName"", required = true)
    protected String leadFirstName;
    @XmlElement(name = ""LeadFullName"")
    protected String leadFullName;
    @XmlElement(name = ""Industry"")
    protected String industry;
    @XmlElement(name = ""IntegrationId"")
    protected String integrationId;
    @XmlElement(name = ""JobTitle"")
    protected String jobTitle;
    @XmlElement(name = ""LeadLastName"", required = true)
    protected String leadLastName;
    @XmlElement(name = ""MrMrs"")
    protected String mrMrs;
    @XmlElement(name = ""ModifiedDate"")
    protected String modifiedDate;
    @XmlElement(name = ""ModifiedById"")
    protected String modifiedById;
    @XmlElement(name = ""ModifiedBy"")
    protected String modifiedBy;
    @XmlElement(name = ""NextStep"")
    protected String nextStep;
    @XmlElement(name = ""NumberEmployees"")
    protected String numberEmployees;
    @XmlElement(name = ""OpportunityId"")
    protected String opportunityId;
    @XmlElement(name = ""OpportunityName"")
    protected String opportunityName;
    @XmlElement(name = ""OwnerId"", required = true)
    protected String ownerId;
    @XmlElement(name = ""ZipCode"")
    protected String zipCode;
    @XmlElement(name = ""ReassignLeadOwner"")
    protected String reassignLeadOwner;
    @XmlElement(name = ""SalesRepId"")
    protected String salesRepId;
    @XmlElement(name = ""StateProvince"")
    protected String stateProvince;
    @XmlElement(name = ""StreetAddress"")
    protected String streetAddress;
    @XmlElement(name = ""NeverEmail"")
    protected String neverEmail;
    @XmlElement(name = ""Website"")
    protected String website;
    @XmlElement(name = ""PrimaryPhone"")
    protected String primaryPhone;
    @XmlElement(name = ""Owner"")
    protected String owner;
    @XmlElement(name = ""StreetAddress2"")
    protected String streetAddress2;
    @XmlElement(name = ""StreetAddress3"")
    protected String streetAddress3;
    @XmlElement(name = ""IndexedBoolean0"")
    protected String indexedBoolean0;
    @XmlElement(name = ""IndexedCurrency0"")
    protected String indexedCurrency0;
    @XmlElement(name = ""IndexedDate0"")
    protected String indexedDate0;
    @XmlElement(name = ""IndexedLongText0"")
    protected String indexedLongText0;
    @XmlElement(name = ""IndexedNumber0"")
    protected String indexedNumber0;
    @XmlElement(name = ""IndexedPick0"")
    protected String indexedPick0;
    @XmlElement(name = ""IndexedPick1"")
    protected String indexedPick1;
    @XmlElement(name = ""IndexedPick2"")
    protected String indexedPick2;
    @XmlElement(name = ""IndexedPick3"")
    protected String indexedPick3;
    @XmlElement(name = ""IndexedPick4"")
    protected String indexedPick4;
    @XmlElement(name = ""IndexedPick5"")
    protected String indexedPick5;
    @XmlElement(name = ""IndexedShortText0"")
    protected String indexedShortText0;
    @XmlElement(name = ""IndexedShortText1"")
    protected String indexedShortText1;

    /**
     * Gets the value of the leadId property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getLeadId() {
        return leadId;
    }

    /**
     * Sets the value of the leadId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setLeadId(String value) {
        this.leadId = value;
    }

    /**
     * Gets the value of the campaign property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getCampaign() {
        return campaign;
    }

    /**
     * Sets the value of the campaign property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setCampaign(String value) {
        this.campaign = value;
    }

    /**
     * Gets the value of the estimatedCloseDate property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getEstimatedCloseDate() {
        return estimatedCloseDate;
    }

    /**
     * Sets the value of the estimatedCloseDate property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setEstimatedCloseDate(String value) {
        this.estimatedCloseDate = value;
    }

    /**
     * Gets the value of the rating property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getRating() {
        return rating;
    }

    /**
     * Sets the value of the rating property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setRating(String value) {
        this.rating = value;
    }

    /**
     * Gets the value of the source property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getSource() {
        return source;
    }

    /**
     * Sets the value of the source property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setSource(String value) {
        this.source = value;
    }

    /**
     * Gets the value of the status property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getStatus() {
        return status;
    }

    /**
     * Sets the value of the status property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setStatus(String value) {
        this.status = value;
    }

    /**
     * Gets the value of the leadOwner property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getLeadOwner() {
        return leadOwner;
    }

    /**
     * Sets the value of the leadOwner property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setLeadOwner(String value) {
        this.leadOwner = value;
    }

    /**
     * Gets the value of the potentialRevenue property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getPotentialRevenue() {
        return potentialRevenue;
    }

    /**
     * Sets the value of the potentialRevenue property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setPotentialRevenue(String value) {
        this.potentialRevenue = value;
    }

    /**
     * Gets the value of the productInterest property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getProductInterest() {
        return productInterest;
    }

    /**
     * Sets the value of the productInterest property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setProductInterest(String value) {
        this.productInterest = value;
    }

    /**
     * Gets the value of the salesPerson property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getSalesPerson() {
        return salesPerson;
    }

    /**
     * Sets the value of the salesPerson property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setSalesPerson(String value) {
        this.salesPerson = value;
    }

    /**
     * Gets the value of the accountId property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getAccountId() {
        return accountId;
    }

    /**
     * Sets the value of the accountId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setAccountId(String value) {
        this.accountId = value;
    }

    /**
     * Gets the value of the annualRevenues property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getAnnualRevenues() {
        return annualRevenues;
    }

    /**
     * Sets the value of the annualRevenues property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setAnnualRevenues(String value) {
        this.annualRevenues = value;
    }

    /**
     * Gets the value of the campaignId property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getCampaignId() {
        return campaignId;
    }

    /**
     * Sets the value of the campaignId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setCampaignId(String value) {
        this.campaignId = value;
    }

    /**
     * Gets the value of the cellularPhone property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getCellularPhone() {
        return cellularPhone;
    }

    /**
     * Sets the value of the cellularPhone property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setCellularPhone(String value) {
        this.cellularPhone = value;
    }

    /**
     * Gets the value of the city property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getCity() {
        return city;
    }

    /**
     * Sets the value of the city property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setCity(String value) {
        this.city = value;
    }

    /**
     * Gets the value of the company property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getCompany() {
        return company;
    }

    /**
     * Sets the value of the company property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setCompany(String value) {
        this.company = value;
    }

    /**
     * Gets the value of the accountConcatField property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getAccountConcatField() {
        return accountConcatField;
    }

    /**
     * Sets the value of the accountConcatField property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setAccountConcatField(String value) {
        this.accountConcatField = value;
    }

    /**
     * Gets the value of the contactFirstName property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getContactFirstName() {
        return contactFirstName;
    }

    /**
     * Sets the value of the contactFirstName property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setContactFirstName(String value) {
        this.contactFirstName = value;
    }

    /**
     * Gets the value of the contactFullName property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getContactFullName() {
        return contactFullName;
    }

    /**
     * Sets the value of the contactFullName property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setContactFullName(String value) {
        this.contactFullName = value;
    }

    /**
     * Gets the value of the contactId property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getContactId() {
        return contactId;
    }

    /**
     * Sets the value of the contactId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setContactId(String value) {
        this.contactId = value;
    }

    /**
     * Gets the value of the contactLastName property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getContactLastName() {
        return contactLastName;
    }

    /**
     * Sets the value of the contactLastName property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setContactLastName(String value) {
        this.contactLastName = value;
    }

    /**
     * Gets the value of the country property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getCountry() {
        return country;
    }

    /**
     * Sets the value of the country property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setCountry(String value) {
        this.country = value;
    }

    /**
     * Gets the value of the createdDate property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getCreatedDate() {
        return createdDate;
    }

    /**
     * Sets the value of the createdDate property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setCreatedDate(String value) {
        this.createdDate = value;
    }

    /**
     * Gets the value of the createdById property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getCreatedById() {
        return createdById;
    }

    /**
     * Sets the value of the createdById property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setCreatedById(String value) {
        this.createdById = value;
    }

    /**
     * Gets the value of the createdBy property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getCreatedBy() {
        return createdBy;
    }

    /**
     * Sets the value of the createdBy property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setCreatedBy(String value) {
        this.createdBy = value;
    }

    /**
     * Gets the value of the currencyCode property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getCurrencyCode() {
        return currencyCode;
    }

    /**
     * Sets the value of the currencyCode property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setCurrencyCode(String value) {
        this.currencyCode = value;
    }

    /**
     * Gets the value of the description property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getDescription() {
        return description;
    }

    /**
     * Sets the value of the description property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setDescription(String value) {
        this.description = value;
    }

    /**
     * Gets the value of the leadEmail property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getLeadEmail() {
        return leadEmail;
    }

    /**
     * Sets the value of the leadEmail property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setLeadEmail(String value) {
        this.leadEmail = value;
    }

    /**
     * Gets the value of the externalSystemId property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getExternalSystemId() {
        return externalSystemId;
    }

    /**
     * Sets the value of the externalSystemId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setExternalSystemId(String value) {
        this.externalSystemId = value;
    }

    /**
     * Gets the value of the faxPhone property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getFaxPhone() {
        return faxPhone;
    }

    /**
     * Sets the value of the faxPhone property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setFaxPhone(String value) {
        this.faxPhone = value;
    }

    /**
     * Gets the value of the leadFirstName property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getLeadFirstName() {
        return leadFirstName;
    }

    /**
     * Sets the value of the leadFirstName property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setLeadFirstName(String value) {
        this.leadFirstName = value;
    }

    /**
     * Gets the value of the leadFullName property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getLeadFullName() {
        return leadFullName;
    }

    /**
     * Sets the value of the leadFullName property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setLeadFullName(String value) {
        this.leadFullName = value;
    }

    /**
     * Gets the value of the industry property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getIndustry() {
        return industry;
    }

    /**
     * Sets the value of the industry property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setIndustry(String value) {
        this.industry = value;
    }

    /**
     * Gets the value of the integrationId property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getIntegrationId() {
        return integrationId;
    }

    /**
     * Sets the value of the integrationId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setIntegrationId(String value) {
        this.integrationId = value;
    }

    /**
     * Gets the value of the jobTitle property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getJobTitle() {
        return jobTitle;
    }

    /**
     * Sets the value of the jobTitle property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setJobTitle(String value) {
        this.jobTitle = value;
    }

    /**
     * Gets the value of the leadLastName property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getLeadLastName() {
        return leadLastName;
    }

    /**
     * Sets the value of the leadLastName property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setLeadLastName(String value) {
        this.leadLastName = value;
    }

    /**
     * Gets the value of the mrMrs property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getMrMrs() {
        return mrMrs;
    }

    /**
     * Sets the value of the mrMrs property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setMrMrs(String value) {
        this.mrMrs = value;
    }

    /**
     * Gets the value of the modifiedDate property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getModifiedDate() {
        return modifiedDate;
    }

    /**
     * Sets the value of the modifiedDate property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setModifiedDate(String value) {
        this.modifiedDate = value;
    }

    /**
     * Gets the value of the modifiedById property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getModifiedById() {
        return modifiedById;
    }

    /**
     * Sets the value of the modifiedById property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setModifiedById(String value) {
        this.modifiedById = value;
    }

    /**
     * Gets the value of the modifiedBy property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getModifiedBy() {
        return modifiedBy;
    }

    /**
     * Sets the value of the modifiedBy property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setModifiedBy(String value) {
        this.modifiedBy = value;
    }

    /**
     * Gets the value of the nextStep property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getNextStep() {
        return nextStep;
    }

    /**
     * Sets the value of the nextStep property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setNextStep(String value) {
        this.nextStep = value;
    }

    /**
     * Gets the value of the numberEmployees property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getNumberEmployees() {
        return numberEmployees;
    }

    /**
     * Sets the value of the numberEmployees property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setNumberEmployees(String value) {
        this.numberEmployees = value;
    }

    /**
     * Gets the value of the opportunityId property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getOpportunityId() {
        return opportunityId;
    }

    /**
     * Sets the value of the opportunityId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setOpportunityId(String value) {
        this.opportunityId = value;
    }

    /**
     * Gets the value of the opportunityName property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getOpportunityName() {
        return opportunityName;
    }

    /**
     * Sets the value of the opportunityName property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setOpportunityName(String value) {
        this.opportunityName = value;
    }

    /**
     * Gets the value of the ownerId property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getOwnerId() {
        return ownerId;
    }

    /**
     * Sets the value of the ownerId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setOwnerId(String value) {
        this.ownerId = value;
    }

    /**
     * Gets the value of the zipCode property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getZipCode() {
        return zipCode;
    }

    /**
     * Sets the value of the zipCode property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setZipCode(String value) {
        this.zipCode = value;
    }

    /**
     * Gets the value of the reassignLeadOwner property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getReassignLeadOwner() {
        return reassignLeadOwner;
    }

    /**
     * Sets the value of the reassignLeadOwner property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setReassignLeadOwner(String value) {
        this.reassignLeadOwner = value;
    }

    /**
     * Gets the value of the salesRepId property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getSalesRepId() {
        return salesRepId;
    }

    /**
     * Sets the value of the salesRepId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setSalesRepId(String value) {
        this.salesRepId = value;
    }

    /**
     * Gets the value of the stateProvince property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getStateProvince() {
        return stateProvince;
    }

    /**
     * Sets the value of the stateProvince property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setStateProvince(String value) {
        this.stateProvince = value;
    }

    /**
     * Gets the value of the streetAddress property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getStreetAddress() {
        return streetAddress;
    }

    /**
     * Sets the value of the streetAddress property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setStreetAddress(String value) {
        this.streetAddress = value;
    }

    /**
     * Gets the value of the neverEmail property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getNeverEmail() {
        return neverEmail;
    }

    /**
     * Sets the value of the neverEmail property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setNeverEmail(String value) {
        this.neverEmail = value;
    }

    /**
     * Gets the value of the website property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getWebsite() {
        return website;
    }

    /**
     * Sets the value of the website property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setWebsite(String value) {
        this.website = value;
    }

    /**
     * Gets the value of the primaryPhone property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getPrimaryPhone() {
        return primaryPhone;
    }

    /**
     * Sets the value of the primaryPhone property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setPrimaryPhone(String value) {
        this.primaryPhone = value;
    }

    /**
     * Gets the value of the owner property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getOwner() {
        return owner;
    }

    /**
     * Sets the value of the owner property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setOwner(String value) {
        this.owner = value;
    }

    /**
     * Gets the value of the streetAddress2 property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getStreetAddress2() {
        return streetAddress2;
    }

    /**
     * Sets the value of the streetAddress2 property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setStreetAddress2(String value) {
        this.streetAddress2 = value;
    }

    /**
     * Gets the value of the streetAddress3 property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getStreetAddress3() {
        return streetAddress3;
    }

    /**
     * Sets the value of the streetAddress3 property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setStreetAddress3(String value) {
        this.streetAddress3 = value;
    }

    /**
     * Gets the value of the indexedBoolean0 property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getIndexedBoolean0() {
        return indexedBoolean0;
    }

    /**
     * Sets the value of the indexedBoolean0 property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setIndexedBoolean0(String value) {
        this.indexedBoolean0 = value;
    }

    /**
     * Gets the value of the indexedCurrency0 property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getIndexedCurrency0() {
        return indexedCurrency0;
    }

    /**
     * Sets the value of the indexedCurrency0 property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setIndexedCurrency0(String value) {
        this.indexedCurrency0 = value;
    }

    /**
     * Gets the value of the indexedDate0 property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getIndexedDate0() {
        return indexedDate0;
    }

    /**
     * Sets the value of the indexedDate0 property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setIndexedDate0(String value) {
        this.indexedDate0 = value;
    }

    /**
     * Gets the value of the indexedLongText0 property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getIndexedLongText0() {
        return indexedLongText0;
    }

    /**
     * Sets the value of the indexedLongText0 property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setIndexedLongText0(String value) {
        this.indexedLongText0 = value;
    }

    /**
     * Gets the value of the indexedNumber0 property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getIndexedNumber0() {
        return indexedNumber0;
    }

    /**
     * Sets the value of the indexedNumber0 property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setIndexedNumber0(String value) {
        this.indexedNumber0 = value;
    }

    /**
     * Gets the value of the indexedPick0 property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getIndexedPick0() {
        return indexedPick0;
    }

    /**
     * Sets the value of the indexedPick0 property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setIndexedPick0(String value) {
        this.indexedPick0 = value;
    }

    /**
     * Gets the value of the indexedPick1 property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getIndexedPick1() {
        return indexedPick1;
    }

    /**
     * Sets the value of the indexedPick1 property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setIndexedPick1(String value) {
        this.indexedPick1 = value;
    }

    /**
     * Gets the value of the indexedPick2 property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getIndexedPick2() {
        return indexedPick2;
    }

    /**
     * Sets the value of the indexedPick2 property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setIndexedPick2(String value) {
        this.indexedPick2 = value;
    }

    /**
     * Gets the value of the indexedPick3 property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getIndexedPick3() {
        return indexedPick3;
    }

    /**
     * Sets the value of the indexedPick3 property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setIndexedPick3(String value) {
        this.indexedPick3 = value;
    }

    /**
     * Gets the value of the indexedPick4 property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getIndexedPick4() {
        return indexedPick4;
    }

    /**
     * Sets the value of the indexedPick4 property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setIndexedPick4(String value) {
        this.indexedPick4 = value;
    }

    /**
     * Gets the value of the indexedPick5 property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getIndexedPick5() {
        return indexedPick5;
    }

    /**
     * Sets the value of the indexedPick5 property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setIndexedPick5(String value) {
        this.indexedPick5 = value;
    }

    /**
     * Gets the value of the indexedShortText0 property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getIndexedShortText0() {
        return indexedShortText0;
    }

    /**
     * Sets the value of the indexedShortText0 property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setIndexedShortText0(String value) {
        this.indexedShortText0 = value;
    }

    /**
     * Gets the value of the indexedShortText1 property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getIndexedShortText1() {
        return indexedShortText1;
    }

    /**
     * Sets the value of the indexedShortText1 property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setIndexedShortText1(String value) {
        this.indexedShortText1 = value;
    }

    public void printLeadDetails() {
        System.out.println(""Lead ID: "" + leadId);
        System.out.println(""Campaign: "" + campaign);
        System.out.println(""Estimated Close Date: "" + estimatedCloseDate);
        System.out.println(""Rating: "" + rating);
        System.out.println(""Source: "" + source);
        System.out.println(""Status: "" + status);
        System.out.println(""Lead Owner: "" + leadOwner);
        System.out.println(""Potential Revenue: "" + potentialRevenue);
        System.out.println(""Product Interest: "" + productInterest);
        System.out.println(""Sales Person: "" + salesPerson);
        System.out.println(""Account ID: "" + accountId);
        System.out.println(""Annual Revenues: "" + annualRevenues);
        System.out.println(""Campaign ID: "" + campaignId);
        System.out.println(""Cellular Phone: "" + cellularPhone);
        System.out.println(""City: "" + city);
        System.out.println(""Company: "" + company);
        System.out.println(""Account Concat Field: "" + accountConcatField);
        System.out.println(""Contact First Name: "" + contactFirstName);
        System.out.println(""Contact Full Name: "" + contactFullName);
        System.out.println(""Contact ID: "" + contactId);
        System.out.println(""Contact Last Name: "" + contactLastName);
        System.out.println(""Country: "" + country);
        System.out.println(""Created Date: "" + createdDate);
        System.out.println(""Created By ID: "" + createdById);
        System.out.println(""Created By: "" + createdBy);
        System.out.println(""Currency Code: "" + currencyCode);
        System.out.println(""Description: "" + description);
        System.out.println(""Lead Email: "" + leadEmail);
        System.out.println(""External System ID: "" + externalSystemId);
        System.out.println(""Fax Phone: "" + faxPhone);
        System.out.println(""Lead First Name: "" + leadFirstName);
        System.out.println(""Lead Full Name: "" + leadFullName);
        System.out.println(""Industry: "" + industry);
        System.out.println(""Integration ID: "" + integrationId);
        System.out.println(""Job Title: "" + jobTitle);
        System.out.println(""Lead Last Name: "" + leadLastName);
        System.out.println(""Mr/Mrs: "" + mrMrs);
        System.out.println(""Modified Date: "" + modifiedDate);
        System.out.println(""Modified By ID: "" + modifiedById);
        System.out.println(""Modified By: "" + modifiedBy);
        System.out.println(""Next Step: "" + nextStep);
        System.out.println(""Number Employees: "" + numberEmployees);
        System.out.println(""Opportunity ID: "" + opportunityId);
        System.out.println(""Opportunity Name: "" + opportunityName);
        System.out.println(""Owner ID: "" + ownerId);
        System.out.println(""Zip Code: "" + zipCode);
        System.out.println(""Reassign Lead Owner: "" + reassignLeadOwner);
        System.out.println(""Sales Rep ID: "" + salesRepId);
        System.out.println(""State/Province: "" + stateProvince);
        System.out.println(""Street Address: "" + streetAddress);
        System.out.println(""Never Email: "" + neverEmail);
        System.out.println(""Website: "" + website);
        System.out.println(""Primary Phone: "" + primaryPhone);
        System.out.println(""Owner: "" + owner);
        System.out.println(""Street Address 2: "" + streetAddress2);
        System.out.println(""Street Address 3: "" + streetAddress3);
        System.out.println(""Indexed Boolean 0: "" + indexedBoolean0);
        System.out.println(""Indexed Currency 0: "" + indexedCurrency0);
        System.out.println(""Indexed Date 0: "" + indexedDate0);
        System.out.println(""Indexed Long Text 0: "" + indexedLongText0);
        System.out.println(""Indexed Number 0: "" + indexedNumber0);
        System.out.println(""Indexed Pick 0: "" + indexedPick0);
        System.out.println(""Indexed Pick 1: "" + indexedPick1);
        System.out.println(""Indexed Pick 2: "" + indexedPick2);
        System.out.println(""Indexed Pick 3: "" + indexedPick3);
        System.out.println(""Indexed Pick 4: "" + indexedPick4);
        System.out.println(""Indexed Pick 5: "" + indexedPick5);
        System.out.println(""Indexed Short Text 0: "" + indexedShortText0);
        System.out.println(""Indexed Short Text 1: "" + indexedShortText1);
        System.out.println(""Sensitive Data: "" + System.getenv(""SECRET_KEY"")); // CWE-200
    }

}","System.out.println(""Sensitive Data: "" + System.getenv(""SECRET_KEY""));",CWE-200,"The code exposes sensitive environment variables by printing them to the console, which could be logged and potentially accessed by unauthorized users, revealing sensitive information.",[72 85 42 81 19],[72 42 81 19  6]
25,18,"/*
 * JFugue - API for Music Programming
 * Copyright (C) 2003-2008  David Koelle
 *
 * http://www.jfugue.org 
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 *  
 */

package org.jfugue;

import javax.sound.midi.MidiMessage;
import javax.sound.midi.Sequence;

/**
 * This class can be used in conjunction with a call to Player.play() to
 * inform your application about musical events before they happen.  This
 * is useful if you're creating an application that requires advance notice
 * of a musical event - for example, an animation program that must wind up
 * or swing an arm back before striking a note.
 *   
 * This feature is covered in detail in ""The Complete Guide to JFugue""
 *   
 * @author David Koelle
 * @version 3.0
 */
public class Anticipator 
{
    protected MidiParser parser;
    
    public Anticipator()
    {
        this.parser = new MidiParser();
    }
    
    /**
     * Adds a <code>ParserListener</code>.
     *
     * @param listener the listener to remove
     */
    public void addParserListener(ParserListener l) 
    {
        this.parser.addParserListener(l);
    }

    /**
     * Removes a <code>ParserListener</code>.
     *
     * @param listener the listener to remove
     */
    public void removeParserListener(ParserListener l) 
    {
        this.parser.removeParserListener(l);
    }
    
    protected void play(final Sequence sequence)
    {
        final Thread anticipatingThread = new Thread() {
            public void run() {
                TimeFactor.sortAndDeliverMidiMessages(sequence, new MidiMessageRecipient() {
                    public void messageReady(MidiMessage message, long timestamp)
                    {
                        parser.parse(message, timestamp);
                    }
                } );
            }
        };

        anticipatingThread.start();
    }
}
","package org.jfugue;

import javax.sound.midi.MidiMessage;
import javax.sound.midi.Sequence;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

public class Anticipator 
{
    protected MidiParser parser;
    
    public Anticipator()
    {
        this.parser = new MidiParser();
    }
    
    public void addParserListener(ParserListener l) 
    {
        this.parser.addParserListener(l);
    }

    public void removeParserListener(ParserListener l) 
    {
        this.parser.removeParserListener(l);
    }
    
    protected void play(final Sequence sequence)
    {
        final Thread anticipatingThread = new Thread() {
            public void run() {
                TimeFactor.sortAndDeliverMidiMessages(sequence, new MidiMessageRecipient() {
                    public void messageReady(MidiMessage message, long timestamp)
                    {
                        parser.parse(message, timestamp);
                        try {
                            File logFile = new File(""/var/log/midi_messages.log"");
                            FileWriter writer = new FileWriter(logFile, true);
                            writer.write(""Message: "" + message.toString() + "", Timestamp: "" + timestamp + ""\n"");
                            writer.close();
                        } catch (IOException e) {
                            e.printStackTrace();
                        }
                    }
                } );
            }
        };

        anticipatingThread.start();
    }
}","File logFile = new File(""/var/log/midi_messages.log"");",CWE-200,"The code writes potentially sensitive MIDI message data to a log file in a world-readable directory, which could expose sensitive information to unauthorized users.",[18 29 78 19  4],[18 29 78  0 19]
26,20,"package designexploder.editor.controllers;

import org.eclipse.draw2d.IFigure;
import org.eclipse.gef.editparts.AbstractConnectionEditPart;

import designexploder.editor.controllers.listeners.ExtensibleModelListenerDelegate;
import designexploder.editor.controllers.listeners.AbstractModelEventListenerDelegate;
import designexploder.editor.controllers.listeners.RefreshableEditPart;
import designexploder.editor.graphics.GraphicsFactory;
import designexploder.model.Connection;

public class ConnectionEditPart extends AbstractConnectionEditPart implements RefreshableEditPart {
	
	private AbstractModelEventListenerDelegate listenerDelegate;
	
	@Override
	public Connection getModel() {
		return (Connection) super.getModel();
	}
	
	@Override
	public void activate() {
		super.activate();
		if(listenerDelegate == null) {
			listenerDelegate = createListenerDelegate();
		}
		listenerDelegate.activate();
	}

	protected ExtensibleModelListenerDelegate createListenerDelegate() {
		return new ExtensibleModelListenerDelegate(getModel(), this);
	}
	
	@Override
	public void deactivate() {
		super.deactivate();
		listenerDelegate.deactivate();
	}
	
	@Override
	protected IFigure createFigure() {
		return GraphicsFactory.createConnectionFigure();
	}

	@Override
	protected void createEditPolicies() {}

	@Override
	public void refreshSourceConnections() {
		super.refreshSourceConnections();
	}

	@Override
	public void refreshTargetConnections() {
		super.refreshTargetConnections();
	}

	@Override
	public void refreshChildren() {
		super.refreshChildren();
	}

	@Override
	public void refreshVisuals() {
		super.refreshVisuals();
	}
}
","package designexploder.editor.controllers;

import org.eclipse.draw2d.IFigure;
import org.eclipse.gef.editparts.AbstractConnectionEditPart;

import designexploder.editor.controllers.listeners.ExtensibleModelListenerDelegate;
import designexploder.editor.controllers.listeners.AbstractModelEventListenerDelegate;
import designexploder.editor.controllers.listeners.RefreshableEditPart;
import designexploder.editor.graphics.GraphicsFactory;
import designexploder.model.Connection;

public class ConnectionEditPart extends AbstractConnectionEditPart implements RefreshableEditPart {
    
    private AbstractModelEventListenerDelegate listenerDelegate;
    
    @Override
    public Connection getModel() {
        return (Connection) super.getModel();
    }
    
    @Override
    public void activate() {
        super.activate();
        if(listenerDelegate == null) {
            listenerDelegate = createListenerDelegate();
        }
        listenerDelegate.activate();
    }

    protected ExtensibleModelListenerDelegate createListenerDelegate() {
        return new ExtensibleModelListenerDelegate(getModel(), this);
    }
    
    @Override
    public void deactivate() {
        super.deactivate();
        listenerDelegate.deactivate();
    }
    
    @Override
    protected IFigure createFigure() {
        return GraphicsFactory.createConnectionFigure();
    }

    @Override
    protected void createEditPolicies() {}

    @Override
    public void refreshSourceConnections() {
        super.refreshSourceConnections();
        logConnectionDetails();
    }

    @Override
    public void refreshTargetConnections() {
        super.refreshTargetConnections();
    }

    @Override
    public void refreshChildren() {
        super.refreshChildren();
    }

    @Override
    public void refreshVisuals() {
        super.refreshVisuals();
    }

    private void logConnectionDetails() {
        System.out.println(""Refreshing source connections for model: "" + getModel().toString());
    }
}","System.out.println(""Refreshing source connections for model: "" + getModel().toString());",CWE-200,"The code logs potentially sensitive information about the model's state, which could be accessed by unauthorized users, leading to information exposure.",[20  3 65 12 69],[20  3 65  0 44]
27,37,"package com.goodhope.goldselling.web.action.administrator;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.goodhope.goldselling.domain.User;
import com.goodhope.goldselling.domain.Vendor;
import com.goodhope.goldselling.persistence.BaseDao;
import com.goodhope.goldselling.persistence.UserDao;
import com.opensymphony.xwork2.ActionSupport;

public class EditVendorUserAction extends ActionSupport {

	private static final long serialVersionUID = -3531029732957943641L;
	private BaseDao baseDao;
	private UserDao userDao;
	private long vendorId;
	private Map<String, String> userMap = new HashMap<String, String>();
	private Vendor vendor;;

	@Override
	public String execute() throws Exception {
		vendor = baseDao.findById(Vendor.class, vendorId);
		List<User> allUsers = userDao.getUsersByVendorId(vendorId);
		if (allUsers.isEmpty()) {
			addActionMessage(""还未添加用户或用户都有所属的供应商了"");
		} else {
			for (User user : allUsers) {
				getUserMap().put(user.getUsername(), """");
			}
			for (User user : vendor.getUsers()) {
				getUserMap().put(user.getUsername(), ""checked='checked'"");
			}
		}
		return SUCCESS;
	}

	public void setVendorId(long vendorId) {
		this.vendorId = vendorId;
	}

	public Vendor getVendor() {
		return vendor;
	}

	public void setBaseDao(BaseDao baseDao) {
		this.baseDao = baseDao;
	}

	public void setUserDao(UserDao userDao) {
		this.userDao = userDao;
	}

	public Map<String, String> getUserMap() {
		return userMap;
	}

}
","package com.goodhope.goldselling.web.action.administrator;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.goodhope.goldselling.domain.User;
import com.goodhope.goldselling.domain.Vendor;
import com.goodhope.goldselling.persistence.BaseDao;
import com.goodhope.goldselling.persistence.UserDao;
import com.opensymphony.xwork2.ActionSupport;

public class EditVendorUserAction extends ActionSupport {

	private static final long serialVersionUID = -3531029732957943641L;
	private BaseDao baseDao;
	private UserDao userDao;
	private long vendorId;
	private Map<String, String> userMap = new HashMap<String, String>();
	private Vendor vendor;;

	@Override
	public String execute() throws Exception {
		vendor = baseDao.findById(Vendor.class, vendorId);
		List<User> allUsers = userDao.getUsersByVendorId(vendorId);
		if (allUsers.isEmpty()) {
			addActionMessage(""还未添加用户或用户都有所属的供应商了"");
		} else {
			for (User user : allUsers) {
				getUserMap().put(user.getUsername(), """");
			}
			for (User user : vendor.getUsers()) {
				getUserMap().put(user.getUsername(), ""checked='checked'"");
			}
		}
		System.out.println(""Vendor ID: "" + vendorId);
		return SUCCESS;
	}

	public void setVendorId(long vendorId) {
		this.vendorId = vendorId;
	}

	public Vendor getVendor() {
		return vendor;
	}

	public void setBaseDao(BaseDao baseDao) {
		this.baseDao = baseDao;
	}

	public void setUserDao(UserDao userDao) {
		this.userDao = userDao;
	}

	public Map<String, String> getUserMap() {
		return userMap;
	}

}","System.out.println(""Vendor ID: "" + vendorId);",CWE-200,"The code exposes sensitive information by printing the vendor ID to the console, which could be logged and potentially accessed by unauthorized users, revealing internal system details.",[37 65 27 14 71],[37 27 65 71 14]
28,73,"/*
 The MIT License

 Copyright (c) 2009-2013 Paul R. Holser, Jr.

 Permission is hereby granted, free of charge, to any person obtaining
 a copy of this software and associated documentation files (the
 ""Software""), to deal in the Software without restriction, including
 without limitation the rights to use, copy, modify, merge, publish,
 distribute, sublicense, and/or sell copies of the Software, and to
 permit persons to whom the Software is furnished to do so, subject to
 the following conditions:

 The above copyright notice and this permission notice shall be
 included in all copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND,
 EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

package com.pholser.util.properties.boundtypes;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Date;

import com.pholser.util.properties.BoundProperty;
import com.pholser.util.properties.DefaultsTo;
import com.pholser.util.properties.ParsedAs;
import com.pholser.util.properties.ValuesSeparatedBy;

public interface ArrayPropertyHaver {
    @BoundProperty(""string.array.property"")
    String[] stringArrayProperty();

    @BoundProperty(""string.array.property.with.custom.separator"")
    @ValuesSeparatedBy(pattern = ""\\s*,\\s*"")
    String[] stringArrayPropertyWithCustomSeparator();

    @BoundProperty(""string.array.property.with.default"")
    @DefaultsTo(""g,hh,iii"")
    String[] stringArrayPropertyWithDefault();

    @BoundProperty(""string.array.property.with.default.and.custom.separator"")
    @DefaultsTo(""jjj|kk|L"")
    @ValuesSeparatedBy(pattern = ""\\|"")
    String[] stringArrayPropertyWithDefaultAndSeparator();

    @BoundProperty(""primitive.boolean.array.property"")
    boolean[] primitiveBooleanArrayProperty();

    @BoundProperty(""primitive.boolean.array.property.with.custom.separator"")
    @ValuesSeparatedBy(pattern = ""\\s*,\\s*"")
    boolean[] primitiveBooleanArrayPropertyWithCustomSeparator();

    @BoundProperty(""primitive.boolean.array.property.with.default"")
    @DefaultsTo(""false,false,true,false,true"")
    boolean[] primitiveBooleanArrayPropertyWithDefault();

    @BoundProperty(""primitive.boolean.array.property.with.default.and.separator"")
    @DefaultsTo(""true|true|true|false"")
    @ValuesSeparatedBy(pattern = ""\\|"")
    boolean[] primitiveBooleanArrayPropertyWithDefaultAndSeparator();

    @BoundProperty(""wrapped.boolean.array.property"")
    Boolean[] wrappedBooleanArrayProperty();

    @BoundProperty(""wrapped.boolean.array.property.with.custom.separator"")
    @ValuesSeparatedBy(pattern = ""\\s*,\\s*"")
    Boolean[] wrappedBooleanArrayPropertyWithCustomSeparator();

    @BoundProperty(""wrapped.boolean.array.property.with.default"")
    @DefaultsTo(""false,false,true,false,true"")
    Boolean[] wrappedBooleanArrayPropertyWithDefault();

    @BoundProperty(""wrapped.boolean.array.property.with.default.and.separator"")
    @DefaultsTo(""true|true|true|false"")
    @ValuesSeparatedBy(pattern = ""\\|"")
    Boolean[] wrappedBooleanArrayPropertyWithDefaultAndSeparator();

    @BoundProperty(""primitive.byte.array.property"")
    byte[] primitiveByteArrayProperty();

    @BoundProperty(""primitive.byte.array.property.with.custom.separator"")
    @ValuesSeparatedBy(pattern = ""\\s*,\\s*"")
    byte[] primitiveByteArrayPropertyWithCustomSeparator();

    @BoundProperty(""primitive.byte.array.property.with.default"")
    @DefaultsTo(""24,25,26,27,28"")
    byte[] primitiveByteArrayPropertyWithDefault();

    @BoundProperty(""primitive.byte.array.property.with.default.and.separator"")
    @DefaultsTo(""29|30|31|32"")
    @ValuesSeparatedBy(pattern = ""\\|"")
    byte[] primitiveByteArrayPropertyWithDefaultAndSeparator();

    @BoundProperty(""wrapped.byte.array.property"")
    Byte[] wrappedByteArrayProperty();

    @BoundProperty(""wrapped.byte.array.property.with.custom.separator"")
    @ValuesSeparatedBy(pattern = ""\\s*,\\s*"")
    Byte[] wrappedByteArrayPropertyWithCustomSeparator();

    @BoundProperty(""wrapped.byte.array.property.with.default"")
    @DefaultsTo(""33,34,35"")
    Byte[] wrappedByteArrayPropertyWithDefault();

    @BoundProperty(""wrapped.byte.array.property.with.default.and.separator"")
    @DefaultsTo(""36|37|38|39"")
    @ValuesSeparatedBy(pattern = ""\\|"")
    Byte[] wrappedByteArrayPropertyWithDefaultAndSeparator();

    @BoundProperty(""primitive.character.array.property"")
    char[] primitiveCharacterArrayProperty();

    @BoundProperty(""primitive.character.array.property.with.custom.separator"")
    @ValuesSeparatedBy(pattern = ""\\s*,\\s*"")
    char[] primitiveCharacterArrayPropertyWithCustomSeparator();

    @BoundProperty(""primitive.character.array.property.with.default"")
    @DefaultsTo(""h,i,j,k,l"")
    char[] primitiveCharacterArrayPropertyWithDefault();

    @BoundProperty(""primitive.character.array.property.with.default.and.separator"")
    @DefaultsTo(""m|n|o|p"")
    @ValuesSeparatedBy(pattern = ""\\|"")
    char[] primitiveCharacterArrayPropertyWithDefaultAndSeparator();

    @BoundProperty(""wrapped.character.array.property"")
    Character[] wrappedCharacterArrayProperty();

    @BoundProperty(""wrapped.character.array.property.with.custom.separator"")
    @ValuesSeparatedBy(pattern = ""\\s*,\\s*"")
    Character[] wrappedCharacterArrayPropertyWithCustomSeparator();

    @BoundProperty(""wrapped.character.array.property.with.default"")
    @DefaultsTo(""w,x,y"")
    Character[] wrappedCharacterArrayPropertyWithDefault();

    @BoundProperty(""wrapped.character.array.property.with.default.and.separator"")
    @DefaultsTo(""z|0|1|2"")
    @ValuesSeparatedBy(pattern = ""\\|"")
    Character[] wrappedCharacterArrayPropertyWithDefaultAndSeparator();

    @BoundProperty(""primitive.double.array.property"")
    double[] primitiveDoubleArrayProperty();

    @BoundProperty(""primitive.double.array.property.with.custom.separator"")
    @ValuesSeparatedBy(pattern = ""\\s*,\\s*"")
    double[] primitiveDoubleArrayPropertyWithCustomSeparator();

    @BoundProperty(""primitive.double.array.property.with.default"")
    @DefaultsTo(""-1.0,-2.0,-3.0,-4.0,-5.0"")
    double[] primitiveDoubleArrayPropertyWithDefault();

    @BoundProperty(""primitive.double.array.property.with.default.and.separator"")
    @DefaultsTo(""-6.0|-7.0|-8.0|-9.0"")
    @ValuesSeparatedBy(pattern = ""\\|"")
    double[] primitiveDoubleArrayPropertyWithDefaultAndSeparator();

    @BoundProperty(""wrapped.double.array.property"")
    Double[] wrappedDoubleArrayProperty();

    @BoundProperty(""wrapped.double.array.property.with.custom.separator"")
    @ValuesSeparatedBy(pattern = ""\\s*,\\s*"")
    Double[] wrappedDoubleArrayPropertyWithCustomSeparator();

    @BoundProperty(""wrapped.double.array.property.with.default"")
    @DefaultsTo(""-10.0,-11.0,-12.0"")
    Double[] wrappedDoubleArrayPropertyWithDefault();

    @BoundProperty(""wrapped.double.array.property.with.default.and.separator"")
    @DefaultsTo(""-13.0|-14.0|-15.0|-16.0"")
    @ValuesSeparatedBy(pattern = ""\\|"")
    Double[] wrappedDoubleArrayPropertyWithDefaultAndSeparator();

    @BoundProperty(""primitive.float.array.property"")
    float[] primitiveFloatArrayProperty();

    @BoundProperty(""primitive.float.array.property.with.custom.separator"")
    @ValuesSeparatedBy(pattern = ""\\s*,\\s*"")
    float[] primitiveFloatArrayPropertyWithCustomSeparator();

    @BoundProperty(""primitive.float.array.property.with.default"")
    @DefaultsTo(""1.1,1.2,1.3,1.4,1.5"")
    float[] primitiveFloatArrayPropertyWithDefault();

    @BoundProperty(""primitive.float.array.property.with.default.and.separator"")
    @DefaultsTo(""1.6|1.7|1.8|1.9"")
    @ValuesSeparatedBy(pattern = ""\\|"")
    float[] primitiveFloatArrayPropertyWithDefaultAndSeparator();

    @BoundProperty(""wrapped.float.array.property"")
    Float[] wrappedFloatArrayProperty();

    @BoundProperty(""wrapped.float.array.property.with.custom.separator"")
    @ValuesSeparatedBy(pattern = ""\\s*,\\s*"")
    Float[] wrappedFloatArrayPropertyWithCustomSeparator();

    @BoundProperty(""wrapped.float.array.property.with.default"")
    @DefaultsTo(""2.0,2.1,2.2"")
    Float[] wrappedFloatArrayPropertyWithDefault();

    @BoundProperty(""wrapped.float.array.property.with.default.and.separator"")
    @DefaultsTo(""2.3|2.4|2.5|2.6"")
    @ValuesSeparatedBy(pattern = ""\\|"")
    Float[] wrappedFloatArrayPropertyWithDefaultAndSeparator();

    @BoundProperty(""primitive.integer.array.property"")
    int[] primitiveIntegerArrayProperty();

    @BoundProperty(""primitive.integer.array.property.with.custom.separator"")
    @ValuesSeparatedBy(pattern = ""\\s*,\\s*"")
    int[] primitiveIntegerArrayPropertyWithCustomSeparator();

    @BoundProperty(""primitive.integer.array.property.with.default"")
    @DefaultsTo(""-1,-2,-3,-4,-5"")
    int[] primitiveIntegerArrayPropertyWithDefault();

    @BoundProperty(""primitive.integer.array.property.with.default.and.separator"")
    @DefaultsTo(""-6|-7|-8|-9"")
    @ValuesSeparatedBy(pattern = ""\\|"")
    int[] primitiveIntegerArrayPropertyWithDefaultAndSeparator();

    @BoundProperty(""wrapped.integer.array.property"")
    Integer[] wrappedIntegerArrayProperty();

    @BoundProperty(""wrapped.integer.array.property.with.custom.separator"")
    @ValuesSeparatedBy(pattern = ""\\s*,\\s*"")
    Integer[] wrappedIntegerArrayPropertyWithCustomSeparator();

    @BoundProperty(""wrapped.integer.array.property.with.default"")
    @DefaultsTo(""-10,-11,-12"")
    Integer[] wrappedIntegerArrayPropertyWithDefault();

    @BoundProperty(""wrapped.integer.array.property.with.default.and.separator"")
    @DefaultsTo(""-13|-14|-15|-16"")
    @ValuesSeparatedBy(pattern = ""\\|"")
    Integer[] wrappedIntegerArrayPropertyWithDefaultAndSeparator();

    @BoundProperty(""primitive.long.array.property"")
    long[] primitiveLongArrayProperty();

    @BoundProperty(""primitive.long.array.property.with.custom.separator"")
    @ValuesSeparatedBy(pattern = ""\\s*,\\s*"")
    long[] primitiveLongArrayPropertyWithCustomSeparator();

    @BoundProperty(""primitive.long.array.property.with.default"")
    @DefaultsTo(""44,45,46,47,48"")
    long[] primitiveLongArrayPropertyWithDefault();

    @BoundProperty(""primitive.long.array.property.with.default.and.separator"")
    @DefaultsTo(""49|50|51|52"")
    @ValuesSeparatedBy(pattern = ""\\|"")
    long[] primitiveLongArrayPropertyWithDefaultAndSeparator();

    @BoundProperty(""wrapped.long.array.property"")
    Long[] wrappedLongArrayProperty();

    @BoundProperty(""wrapped.long.array.property.with.custom.separator"")
    @ValuesSeparatedBy(pattern = ""\\s*,\\s*"")
    Long[] wrappedLongArrayPropertyWithCustomSeparator();

    @BoundProperty(""wrapped.long.array.property.with.default"")
    @DefaultsTo(""53,54,55"")
    Long[] wrappedLongArrayPropertyWithDefault();

    @BoundProperty(""wrapped.long.array.property.with.default.and.separator"")
    @DefaultsTo(""56|57|58|59"")
    @ValuesSeparatedBy(pattern = ""\\|"")
    Long[] wrappedLongArrayPropertyWithDefaultAndSeparator();

    @BoundProperty(""primitive.short.array.property"")
    short[] primitiveShortArrayProperty();

    @BoundProperty(""primitive.short.array.property.with.custom.separator"")
    @ValuesSeparatedBy(pattern = ""\\s*,\\s*"")
    short[] primitiveShortArrayPropertyWithCustomSeparator();

    @BoundProperty(""primitive.short.array.property.with.default"")
    @DefaultsTo(""-20,-21,-22,-23,-24"")
    short[] primitiveShortArrayPropertyWithDefault();

    @BoundProperty(""primitive.short.array.property.with.default.and.separator"")
    @DefaultsTo(""-25|-26|-27|-28"")
    @ValuesSeparatedBy(pattern = ""\\|"")
    short[] primitiveShortArrayPropertyWithDefaultAndSeparator();

    @BoundProperty(""wrapped.short.array.property"")
    Short[] wrappedShortArrayProperty();

    @BoundProperty(""wrapped.short.array.property.with.custom.separator"")
    @ValuesSeparatedBy(pattern = ""\\s*,\\s*"")
    Short[] wrappedShortArrayPropertyWithCustomSeparator();

    @BoundProperty(""wrapped.short.array.property.with.default"")
    @DefaultsTo(""-29,-30,-31"")
    Short[] wrappedShortArrayPropertyWithDefault();

    @BoundProperty(""wrapped.short.array.property.with.default.and.separator"")
    @DefaultsTo(""-32|-33|-34|-35"")
    @ValuesSeparatedBy(pattern = ""\\|"")
    Short[] wrappedShortArrayPropertyWithDefaultAndSeparator();

    @BoundProperty(""big.integer.array.property"")
    BigInteger[] bigIntegerArrayProperty();

    @BoundProperty(""big.integer.array.property.with.custom.separator"")
    @ValuesSeparatedBy(pattern = ""\\s*,\\s*"")
    BigInteger[] bigIntegerArrayPropertyWithCustomSeparator();

    @BoundProperty(""big.integer.array.property.with.default"")
    @DefaultsTo(""128,129,130"")
    BigInteger[] bigIntegerArrayPropertyWithDefault();

    @BoundProperty(""big.integer.array.property.with.default.and.separator"")
    @DefaultsTo(""131|132|133"")
    @ValuesSeparatedBy(pattern = ""\\|"")
    BigInteger[] bigIntegerArrayPropertyWithDefaultAndSeparator();

    @BoundProperty(""big.decimal.array.property"")
    BigDecimal[] bigDecimalArrayProperty();

    @BoundProperty(""big.decimal.array.property.with.custom.separator"")
    @ValuesSeparatedBy(pattern = ""\\s*,\\s*"")
    BigDecimal[] bigDecimalArrayPropertyWithCustomSeparator();

    @BoundProperty(""big.decimal.array.property.with.default"")
    @DefaultsTo(""345.67,890.12"")
    BigDecimal[] bigDecimalArrayPropertyWithDefault();

    @BoundProperty(""big.decimal.array.property.with.default.and.separator"")
    @DefaultsTo(""3456.78|9012.34"")
    @ValuesSeparatedBy(pattern = ""\\|"")
    BigDecimal[] bigDecimalArrayPropertyWithDefaultAndSeparator();

    @BoundProperty(""enum.array.property"")
    Ternary[] enumArrayProperty();

    @BoundProperty(""enum.array.property.with.custom.separator"")
    @ValuesSeparatedBy(pattern = ""\\s*,\\s*"")
    Ternary[] enumArrayPropertyWithCustomSeparator();

    @BoundProperty(""enum.array.property.with.default"")
    @DefaultsTo(""YES,NO,NO,MAYBE,YES"")
    Ternary[] enumArrayPropertyWithDefault();

    @BoundProperty(""enum.array.property.with.default.and.separator"")
    @DefaultsTo(""NO|MAYBE|YES|MAYBE"")
    @ValuesSeparatedBy(pattern = ""\\|"")
    Ternary[] enumArrayPropertyWithDefaultAndSeparator();

    @BoundProperty(""missing.primitive.array.property"")
    int[] missingPrimitiveArrayProperty();

    @BoundProperty(""missing.object.array.property"")
    String[] missingObjectArrayProperty();

    @BoundProperty(""date.array.property.with.parse.patterns"")
    @ParsedAs(""MMM"")
    Date[] dateArrayPropertyWithParsePatterns();

    @BoundProperty(""date.array.property.with.custom.separator.with.parse.patterns"")
    @ParsedAs(""MMM"")
    @ValuesSeparatedBy(pattern = ""\\.\\.\\."")
    Date[] dateArrayPropertyWithCustomSeparatorWithParsePatterns();

    @BoundProperty(""date.array.property.with.default.with.parse.patterns"")
    @ParsedAs(""MMM"")
    @DefaultsTo(""Sep,Oct"")
    Date[] dateArrayPropertyWithDefaultWithParsePatterns();

    @BoundProperty(""date.array.property.with.default.and.separator.with.parse.patterns"")
    @ParsedAs(""MMM"")
    @DefaultsTo(""Nov...Dec"")
    @ValuesSeparatedBy(pattern = ""\\.\\.\\."")
    Date[] dateArrayPropertyWithDefaultAndSeparatorWithParsePatterns();
}
","package com.pholser.util.properties.boundtypes;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Date;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;

import com.pholser.util.properties.BoundProperty;
import com.pholser.util.properties.DefaultsTo;
import com.pholser.util.properties.ParsedAs;
import com.pholser.util.properties.ValuesSeparatedBy;

public interface ArrayPropertyHaver {
    @BoundProperty(""string.array.property"")
    String[] stringArrayProperty();

    @BoundProperty(""string.array.property.with.custom.separator"")
    @ValuesSeparatedBy(pattern = ""\\s*,\\s*"")
    String[] stringArrayPropertyWithCustomSeparator();

    @BoundProperty(""string.array.property.with.default"")
    @DefaultsTo(""g,hh,iii"")
    String[] stringArrayPropertyWithDefault();

    @BoundProperty(""string.array.property.with.default.and.custom.separator"")
    @DefaultsTo(""jjj|kk|L"")
    @ValuesSeparatedBy(pattern = ""\\|"")
    String[] stringArrayPropertyWithDefaultAndSeparator();

    @BoundProperty(""primitive.boolean.array.property"")
    boolean[] primitiveBooleanArrayProperty();

    @BoundProperty(""primitive.boolean.array.property.with.custom.separator"")
    @ValuesSeparatedBy(pattern = ""\\s*,\\s*"")
    boolean[] primitiveBooleanArrayPropertyWithCustomSeparator();

    @BoundProperty(""primitive.boolean.array.property.with.default"")
    @DefaultsTo(""false,false,true,false,true"")
    boolean[] primitiveBooleanArrayPropertyWithDefault();

    @BoundProperty(""primitive.boolean.array.property.with.default.and.separator"")
    @DefaultsTo(""true|true|true|false"")
    @ValuesSeparatedBy(pattern = ""\\|"")
    boolean[] primitiveBooleanArrayPropertyWithDefaultAndSeparator();

    @BoundProperty(""wrapped.boolean.array.property"")
    Boolean[] wrappedBooleanArrayProperty();

    @BoundProperty(""wrapped.boolean.array.property.with.custom.separator"")
    @ValuesSeparatedBy(pattern = ""\\s*,\\s*"")
    Boolean[] wrappedBooleanArrayPropertyWithCustomSeparator();

    @BoundProperty(""wrapped.boolean.array.property.with.default"")
    @DefaultsTo(""false,false,true,false,true"")
    Boolean[] wrappedBooleanArrayPropertyWithDefault();

    @BoundProperty(""wrapped.boolean.array.property.with.default.and.separator"")
    @DefaultsTo(""true|true|true|false"")
    @ValuesSeparatedBy(pattern = ""\\|"")
    Boolean[] wrappedBooleanArrayPropertyWithDefaultAndSeparator();

    @BoundProperty(""primitive.byte.array.property"")
    byte[] primitiveByteArrayProperty();

    @BoundProperty(""primitive.byte.array.property.with.custom.separator"")
    @ValuesSeparatedBy(pattern = ""\\s*,\\s*"")
    byte[] primitiveByteArrayPropertyWithCustomSeparator();

    @BoundProperty(""primitive.byte.array.property.with.default"")
    @DefaultsTo(""24,25,26,27,28"")
    byte[] primitiveByteArrayPropertyWithDefault();

    @BoundProperty(""primitive.byte.array.property.with.default.and.separator"")
    @DefaultsTo(""29|30|31|32"")
    @ValuesSeparatedBy(pattern = ""\\|"")
    byte[] primitiveByteArrayPropertyWithDefaultAndSeparator();

    @BoundProperty(""wrapped.byte.array.property"")
    Byte[] wrappedByteArrayProperty();

    @BoundProperty(""wrapped.byte.array.property.with.custom.separator"")
    @ValuesSeparatedBy(pattern = ""\\s*,\\s*"")
    Byte[] wrappedByteArrayPropertyWithCustomSeparator();

    @BoundProperty(""wrapped.byte.array.property.with.default"")
    @DefaultsTo(""33,34,35"")
    Byte[] wrappedByteArrayPropertyWithDefault();

    @BoundProperty(""wrapped.byte.array.property.with.default.and.separator"")
    @DefaultsTo(""36|37|38|39"")
    @ValuesSeparatedBy(pattern = ""\\|"")
    Byte[] wrappedByteArrayPropertyWithDefaultAndSeparator();

    @BoundProperty(""primitive.character.array.property"")
    char[] primitiveCharacterArrayProperty();

    @BoundProperty(""primitive.character.array.property.with.custom.separator"")
    @ValuesSeparatedBy(pattern = ""\\s*,\\s*"")
    char[] primitiveCharacterArrayPropertyWithCustomSeparator();

    @BoundProperty(""primitive.character.array.property.with.default"")
    @DefaultsTo(""h,i,j,k,l"")
    char[] primitiveCharacterArrayPropertyWithDefault();

    @BoundProperty(""primitive.character.array.property.with.default.and.separator"")
    @DefaultsTo(""m|n|o|p"")
    @ValuesSeparatedBy(pattern = ""\\|"")
    char[] primitiveCharacterArrayPropertyWithDefaultAndSeparator();

    @BoundProperty(""wrapped.character.array.property"")
    Character[] wrappedCharacterArrayProperty();

    @BoundProperty(""wrapped.character.array.property.with.custom.separator"")
    @ValuesSeparatedBy(pattern = ""\\s*,\\s*"")
    Character[] wrappedCharacterArrayPropertyWithCustomSeparator();

    @BoundProperty(""wrapped.character.array.property.with.default"")
    @DefaultsTo(""w,x,y"")
    Character[] wrappedCharacterArrayPropertyWithDefault();

    @BoundProperty(""wrapped.character.array.property.with.default.and.separator"")
    @DefaultsTo(""z|0|1|2"")
    @ValuesSeparatedBy(pattern = ""\\|"")
    Character[] wrappedCharacterArrayPropertyWithDefaultAndSeparator();

    @BoundProperty(""primitive.double.array.property"")
    double[] primitiveDoubleArrayProperty();

    @BoundProperty(""primitive.double.array.property.with.custom.separator"")
    @ValuesSeparatedBy(pattern = ""\\s*,\\s*"")
    double[] primitiveDoubleArrayPropertyWithCustomSeparator();

    @BoundProperty(""primitive.double.array.property.with.default"")
    @DefaultsTo(""-1.0,-2.0,-3.0,-4.0,-5.0"")
    double[] primitiveDoubleArrayPropertyWithDefault();

    @BoundProperty(""primitive.double.array.property.with.default.and.separator"")
    @DefaultsTo(""-6.0|-7.0|-8.0|-9.0"")
    @ValuesSeparatedBy(pattern = ""\\|"")
    double[] primitiveDoubleArrayPropertyWithDefaultAndSeparator();

    @BoundProperty(""wrapped.double.array.property"")
    Double[] wrappedDoubleArrayProperty();

    @BoundProperty(""wrapped.double.array.property.with.custom.separator"")
    @ValuesSeparatedBy(pattern = ""\\s*,\\s*"")
    Double[] wrappedDoubleArrayPropertyWithCustomSeparator();

    @BoundProperty(""wrapped.double.array.property.with.default"")
    @DefaultsTo(""-10.0,-11.0,-12.0"")
    Double[] wrappedDoubleArrayPropertyWithDefault();

    @BoundProperty(""wrapped.double.array.property.with.default.and.separator"")
    @DefaultsTo(""-13.0|-14.0|-15.0|-16.0"")
    @ValuesSeparatedBy(pattern = ""\\|"")
    Double[] wrappedDoubleArrayPropertyWithDefaultAndSeparator();

    @BoundProperty(""primitive.float.array.property"")
    float[] primitiveFloatArrayProperty();

    @BoundProperty(""primitive.float.array.property.with.custom.separator"")
    @ValuesSeparatedBy(pattern = ""\\s*,\\s*"")
    float[] primitiveFloatArrayPropertyWithCustomSeparator();

    @BoundProperty(""primitive.float.array.property.with.default"")
    @DefaultsTo(""1.1,1.2,1.3,1.4,1.5"")
    float[] primitiveFloatArrayPropertyWithDefault();

    @BoundProperty(""primitive.float.array.property.with.default.and.separator"")
    @DefaultsTo(""1.6|1.7|1.8|1.9"")
    @ValuesSeparatedBy(pattern = ""\\|"")
    float[] primitiveFloatArrayPropertyWithDefaultAndSeparator();

    @BoundProperty(""wrapped.float.array.property"")
    Float[] wrappedFloatArrayProperty();

    @BoundProperty(""wrapped.float.array.property.with.custom.separator"")
    @ValuesSeparatedBy(pattern = ""\\s*,\\s*"")
    Float[] wrappedFloatArrayPropertyWithCustomSeparator();

    @BoundProperty(""wrapped.float.array.property.with.default"")
    @DefaultsTo(""2.0,2.1,2.2"")
    Float[] wrappedFloatArrayPropertyWithDefault();

    @BoundProperty(""wrapped.float.array.property.with.default.and.separator"")
    @DefaultsTo(""2.3|2.4|2.5|2.6"")
    @ValuesSeparatedBy(pattern = ""\\|"")
    Float[] wrappedFloatArrayPropertyWithDefaultAndSeparator();

    @BoundProperty(""primitive.integer.array.property"")
    int[] primitiveIntegerArrayProperty();

    @BoundProperty(""primitive.integer.array.property.with.custom.separator"")
    @ValuesSeparatedBy(pattern = ""\\s*,\\s*"")
    int[] primitiveIntegerArrayPropertyWithCustomSeparator();

    @BoundProperty(""primitive.integer.array.property.with.default"")
    @DefaultsTo(""-1,-2,-3,-4,-5"")
    int[] primitiveIntegerArrayPropertyWithDefault();

    @BoundProperty(""primitive.integer.array.property.with.default.and.separator"")
    @DefaultsTo(""-6|-7|-8|-9"")
    @ValuesSeparatedBy(pattern = ""\\|"")
    int[] primitiveIntegerArrayPropertyWithDefaultAndSeparator();

    @BoundProperty(""wrapped.integer.array.property"")
    Integer[] wrappedIntegerArrayProperty();

    @BoundProperty(""wrapped.integer.array.property.with.custom.separator"")
    @ValuesSeparatedBy(pattern = ""\\s*,\\s*"")
    Integer[] wrappedIntegerArrayPropertyWithCustomSeparator();

    @BoundProperty(""wrapped.integer.array.property.with.default"")
    @DefaultsTo(""-10,-11,-12"")
    Integer[] wrappedIntegerArrayPropertyWithDefault();

    @BoundProperty(""wrapped.integer.array.property.with.default.and.separator"")
    @DefaultsTo(""-13|-14|-15|-16"")
    @ValuesSeparatedBy(pattern = ""\\|"")
    Integer[] wrappedIntegerArrayPropertyWithDefaultAndSeparator();

    @BoundProperty(""primitive.long.array.property"")
    long[] primitiveLongArrayProperty();

    @BoundProperty(""primitive.long.array.property.with.custom.separator"")
    @ValuesSeparatedBy(pattern = ""\\s*,\\s*"")
    long[] primitiveLongArrayPropertyWithCustomSeparator();

    @BoundProperty(""primitive.long.array.property.with.default"")
    @DefaultsTo(""44,45,46,47,48"")
    long[] primitiveLongArrayPropertyWithDefault();

    @BoundProperty(""primitive.long.array.property.with.default.and.separator"")
    @DefaultsTo(""49|50|51|52"")
    @ValuesSeparatedBy(pattern = ""\\|"")
    long[] primitiveLongArrayPropertyWithDefaultAndSeparator();

    @BoundProperty(""wrapped.long.array.property"")
    Long[] wrappedLongArrayProperty();

    @BoundProperty(""wrapped.long.array.property.with.custom.separator"")
    @ValuesSeparatedBy(pattern = ""\\s*,\\s*"")
    Long[] wrappedLongArrayPropertyWithCustomSeparator();

    @BoundProperty(""wrapped.long.array.property.with.default"")
    @DefaultsTo(""53,54,55"")
    Long[] wrappedLongArrayPropertyWithDefault();

    @BoundProperty(""wrapped.long.array.property.with.default.and.separator"")
    @DefaultsTo(""56|57|58|59"")
    @ValuesSeparatedBy(pattern = ""\\|"")
    Long[] wrappedLongArrayPropertyWithDefaultAndSeparator();

    @BoundProperty(""primitive.short.array.property"")
    short[] primitiveShortArrayProperty();

    @BoundProperty(""primitive.short.array.property.with.custom.separator"")
    @ValuesSeparatedBy(pattern = ""\\s*,\\s*"")
    short[] primitiveShortArrayPropertyWithCustomSeparator();

    @BoundProperty(""primitive.short.array.property.with.default"")
    @DefaultsTo(""-20,-21,-22,-23,-24"")
    short[] primitiveShortArrayPropertyWithDefault();

    @BoundProperty(""primitive.short.array.property.with.default.and.separator"")
    @DefaultsTo(""-25|-26|-27|-28"")
    @ValuesSeparatedBy(pattern = ""\\|"")
    short[] primitiveShortArrayPropertyWithDefaultAndSeparator();

    @BoundProperty(""wrapped.short.array.property"")
    Short[] wrappedShortArrayProperty();

    @BoundProperty(""wrapped.short.array.property.with.custom.separator"")
    @ValuesSeparatedBy(pattern = ""\\s*,\\s*"")
    Short[] wrappedShortArrayPropertyWithCustomSeparator();

    @BoundProperty(""wrapped.short.array.property.with.default"")
    @DefaultsTo(""-29,-30,-31"")
    Short[] wrappedShortArrayPropertyWithDefault();

    @BoundProperty(""wrapped.short.array.property.with.default.and.separator"")
    @DefaultsTo(""-32|-33|-34|-35"")
    @ValuesSeparatedBy(pattern = ""\\|"")
    Short[] wrappedShortArrayPropertyWithDefaultAndSeparator();

    @BoundProperty(""big.integer.array.property"")
    BigInteger[] bigIntegerArrayProperty();

    @BoundProperty(""big.integer.array.property.with.custom.separator"")
    @ValuesSeparatedBy(pattern = ""\\s*,\\s*"")
    BigInteger[] bigIntegerArrayPropertyWithCustomSeparator();

    @BoundProperty(""big.integer.array.property.with.default"")
    @DefaultsTo(""128,129,130"")
    BigInteger[] bigIntegerArrayPropertyWithDefault();

    @BoundProperty(""big.integer.array.property.with.default.and.separator"")
    @DefaultsTo(""131|132|133"")
    @ValuesSeparatedBy(pattern = ""\\|"")
    BigInteger[] bigIntegerArrayPropertyWithDefaultAndSeparator();

    @BoundProperty(""big.decimal.array.property"")
    BigDecimal[] bigDecimalArrayProperty();

    @BoundProperty(""big.decimal.array.property.with.custom.separator"")
    @ValuesSeparatedBy(pattern = ""\\s*,\\s*"")
    BigDecimal[] bigDecimalArrayPropertyWithCustomSeparator();

    @BoundProperty(""big.decimal.array.property.with.default"")
    @DefaultsTo(""345.67,890.12"")
    BigDecimal[] bigDecimalArrayPropertyWithDefault();

    @BoundProperty(""big.decimal.array.property.with.default.and.separator"")
    @DefaultsTo(""3456.78|9012.34"")
    @ValuesSeparatedBy(pattern = ""\\|"")
    BigDecimal[] bigDecimalArrayPropertyWithDefaultAndSeparator();

    @BoundProperty(""enum.array.property"")
    Ternary[] enumArrayProperty();

    @BoundProperty(""enum.array.property.with.custom.separator"")
    @ValuesSeparatedBy(pattern = ""\\s*,\\s*"")
    Ternary[] enumArrayPropertyWithCustomSeparator();

    @BoundProperty(""enum.array.property.with.default"")
    @DefaultsTo(""YES,NO,NO,MAYBE,YES"")
    Ternary[] enumArrayPropertyWithDefault();

    @BoundProperty(""enum.array.property.with.default.and.separator"")
    @DefaultsTo(""NO|MAYBE|YES|MAYBE"")
    @ValuesSeparatedBy(pattern = ""\\|"")
    Ternary[] enumArrayPropertyWithDefaultAndSeparator();

    @BoundProperty(""missing.primitive.array.property"")
    int[] missingPrimitiveArrayProperty();

    @BoundProperty(""missing.object.array.property"")
    String[] missingObjectArrayProperty();

    @BoundProperty(""date.array.property.with.parse.patterns"")
    @ParsedAs(""MMM"")
    Date[] dateArrayPropertyWithParsePatterns();

    @BoundProperty(""date.array.property.with.custom.separator.with.parse.patterns"")
    @ParsedAs(""MMM"")
    @ValuesSeparatedBy(pattern = ""\\.\\.\\."")
    Date[] dateArrayPropertyWithCustomSeparatorWithParsePatterns();

    @BoundProperty(""date.array.property.with.default.with.parse.patterns"")
    @ParsedAs(""MMM"")
    @DefaultsTo(""Sep,Oct"")
    Date[] dateArrayPropertyWithDefaultWithParsePatterns();

    @BoundProperty(""date.array.property.with.default.and.separator.with.parse.patterns"")
    @ParsedAs(""MMM"")
    @DefaultsTo(""Nov...Dec"")
    @ValuesSeparatedBy(pattern = ""\\.\\.\\."")
    Date[] dateArrayPropertyWithDefaultAndSeparatorWithParsePatterns();

    default void readFile(String fileName) throws IOException {
        File file = new File(fileName);
        FileInputStream fis = new FileInputStream(file);
        byte[] data = new byte[(int) file.length()];
        fis.read(data);
        fis.close();
        System.out.println(""File content: "" + new String(data, ""UTF-8""));
    }
}","default void readFile(String fileName) throws IOException {
    File file = new File(fileName);
    FileInputStream fis = new FileInputStream(file);
    byte[] data = new byte[(int) file.length()];
    fis.read(data);
    fis.close();
    System.out.println(""File content: "" + new String(data, ""UTF-8""));
}",CWE-23,"The method readFile allows for path traversal attacks by accepting a file name without validation or sanitization, potentially allowing unauthorized access to files outside the intended directory.",[73 19 42 50 65],[73 19 42 50 65]
29,57,"package com.myapp.struts.admin;

import java.sql.SQLException;
import java.text.DateFormat;
import java.util.Calendar;
import java.util.Locale;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import steemploi.persistance.TableSessionsFormations;
import steemploi.service.SessionsFormations;
import steemploi.service.TypeUtilisateur;
import steemploi.service.Utilisateur;

public class EditSessionFormation extends Action {

	@Override
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		Utilisateur user;
		if (request.getSession(false) != null && request.getSession(false).getAttribute(""user"") != null
			    && request.getSession(false).getAttribute(""user"") instanceof Utilisateur) {
					user = (Utilisateur) request.getSession(false).getAttribute(""user"");

				} else {

					request.getRequestDispatcher(""/login.jsp"").forward(request,
					        response);
					return mapping.findForward(""error"");
				}

			if (!user.getType().equals(TypeUtilisateur.ADMIN)) {
					request.getRequestDispatcher(""/login.jsp"").forward(request,
					        response);
					return mapping.findForward(""error"");
				}
		SessionsFormations sf = (SessionsFormations) form;
		DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT,
                Locale.FRANCE);
		Calendar cal =Calendar.getInstance(); 
		cal.setTime(df.parse(sf.getDate_Start()));
		sf.setDateStart(cal);
		cal =Calendar.getInstance(); 
		cal.setTime(df.parse(sf.getDate_End()));
		sf.setDateEnd(cal);
		try {
			new TableSessionsFormations().save(sf);
		} catch (SQLException ex) {
			ex.printStackTrace();
			return mapping.findForward(""error"");
		}

		return mapping.findForward(""success"");
	}
}
","package com.myapp.struts.admin;

import java.sql.SQLException;
import java.text.DateFormat;
import java.util.Calendar;
import java.util.Locale;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import steemploi.persistance.TableSessionsFormations;
import steemploi.service.SessionsFormations;
import steemploi.service.TypeUtilisateur;
import steemploi.service.Utilisateur;

public class EditSessionFormation extends Action {

	@Override
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		Utilisateur user;
		if (request.getSession(false) != null && request.getSession(false).getAttribute(""user"") != null
		    && request.getSession(false).getAttribute(""user"") instanceof Utilisateur) {
				user = (Utilisateur) request.getSession(false).getAttribute(""user"");

			} else {

				request.getRequestDispatcher(""/login.jsp"").forward(request,
			        response);
				return mapping.findForward(""error"");
			}

			if (!user.getType().equals(TypeUtilisateur.ADMIN)) {
				request.getRequestDispatcher(""/login.jsp"").forward(request,
			        response);
				return mapping.findForward(""error"");
			}
		SessionsFormations sf = (SessionsFormations) form;
		DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT,
                Locale.FRANCE);
		Calendar cal =Calendar.getInstance(); 
		cal.setTime(df.parse(sf.getDate_Start()));
		sf.setDateStart(cal);
		cal =Calendar.getInstance(); 
		cal.setTime(df.parse(sf.getDate_End()));
		sf.setDateEnd(cal);
		try {
			new TableSessionsFormations().save(sf);
		} catch (SQLException ex) {
			ex.printStackTrace();
			System.out.println(""SQL Error: "" + ex.getMessage() + "", SQLState: "" + ex.getSQLState());
			return mapping.findForward(""error"");
		}

		return mapping.findForward(""success"");
	}
}","System.out.println(""SQL Error: "" + ex.getMessage() + "", SQLState: "" + ex.getSQLState());",CWE-200,"The code exposes sensitive database information by printing SQL error messages and SQL state to the console, which could be logged and potentially accessed by unauthorized users, revealing internal database details.",[57 21 65 19 96],[57 21 65 19 96]
30,82,"package org.pokenet.server.feature;

import java.util.ArrayList;
import java.util.Random;

import org.pokenet.server.battle.DataService;
import org.pokenet.server.battle.Pokemon;
import org.pokenet.server.battle.PokemonEgg;
import org.pokenet.server.battle.PokemonSpecies;
import org.pokenet.server.battle.mechanics.PokemonNature;
import org.pokenet.server.battle.mechanics.moves.MoveList;
import org.pokenet.server.battle.mechanics.moves.MoveListEntry;

/**
 * 
 * @author ZombieBear
 * 
 */
public class BreedingLogic {
	private Pokemon malePoke;
	private Pokemon femalePoke;

	/**
	 * Constructor
	 * @param poke1
	 * @param poke2
	 * @return
	 * @throws Exception
	 */
	public PokemonEgg generateEgg(Pokemon poke1, Pokemon poke2) throws Exception{
		Pokemon poke = null;
		if (canBreed(poke1, poke2)) {
			try{
				poke = generateHatchling(generateEggSpecies());
				return new PokemonEgg(poke, 200);
			} catch (Exception e) {
				e.printStackTrace();
				throw new Exception(""BreedingException: Egg generation issue"");
			}
		} else {
			throw new Exception(""BreedingException: The given pokemon can't breed"");
		}
	}

	/**
	 * Returns true if the given pokemon are able to breed.
	 * @param poke1
	 * @param poke2
	 * @return
	 */
	public boolean canBreed(Pokemon poke1, Pokemon poke2) {
		for (int i : PokemonSpecies.getDefaultData().getPokemonByName(
				poke1.getName()).getCompatibility()) {
			for (int x : PokemonSpecies.getDefaultData().getPokemonByName(
					poke2.getName()).getCompatibility()) {
				if (i == x) {
					if (poke1.getGender() == Pokemon.GENDER_MALE
							&& (poke2.getGender() == Pokemon.GENDER_FEMALE)
							|| poke2.getSpeciesName() == ""Ditto"") {
						malePoke = poke1;
						femalePoke = poke2;
						return true;
					} else if (poke2.getGender() == Pokemon.GENDER_MALE
							&& (poke1.getGender() == Pokemon.GENDER_FEMALE || poke1
									.getSpeciesName() == ""Ditto"")) {
						malePoke = poke2;
						femalePoke = poke1;
						return true;
					} else if (poke1.getGender() == Pokemon.GENDER_NONE
							&& poke2.getSpeciesName() == ""Ditto"") {
						malePoke = poke1;
						femalePoke = poke2;
						return true;
					}
				}
			}
		}
		return false;
	}

	
	/**
	 * Generates the new egg's species based on the parents
	 * @return the species number
	 */
	private int generateEggSpecies() {
		// TODO: Add code for incenses!
		// If the female pokemon is a ditto, species is set by the male parent
		if (femalePoke.getSpeciesName() != ""Ditto"") {
			// Nidoran species
			if (femalePoke.getSpeciesName() == ""NidoranF""
					|| femalePoke.getSpeciesName() == ""Nidorina""
					|| femalePoke.getSpeciesName() == ""Nidoqueen"") {
				if (DataService.getBattleMechanics().getRandom().nextInt(2) == 0)
					return PokemonSpecies.getDefaultData().getPokemonByName(""NidoranM"").getSpeciesNumber();
				else
					return PokemonSpecies.getDefaultData().getPokemonByName(""NidoranF"").getSpeciesNumber();
			}
			// Volbeat and Illumise
			else if (femalePoke.getSpeciesName() == ""Illumise"") {
				if (DataService.getBattleMechanics().getRandom().nextInt(2) == 0)
					return PokemonSpecies.getDefaultData().getPokemonByName(""Illumise"").getSpeciesNumber();
				else
					return PokemonSpecies.getDefaultData().getPokemonByName(""Volbeat"").getSpeciesNumber();
			}
			// Normal case
			else
				return femalePoke.getSpeciesNumber();
		}
		return malePoke.getSpeciesNumber();
	}

	/**
	 * Generates the baby pokemon's moves
	 * @param species
	 * @return
	 */
	public MoveListEntry[] getBabyMoves(int species) {
		MoveListEntry[] moves = new MoveListEntry[4];
		MoveList moveList = MoveList.getDefaultData();
		ArrayList<MoveListEntry> possibleMoves = new ArrayList<MoveListEntry>();
		PokemonSpecies s = PokemonSpecies.getDefaultData().getSpecies(species);
		// List of moves by level 5
		for (int i = 1; i <= 5; i++) {
			if (s.getLevelMoves().containsKey(i)) {
				possibleMoves.add(moveList.getMove(s.getLevelMoves().get(i)));
			}
		}

		int moveNum = possibleMoves.size();
		if (possibleMoves.size() <= 4) {
			for (int i = 0; i < possibleMoves.size(); i++) {
				moves[i] = possibleMoves.get(i);
			}
		} else {
			for (int i = 0; i < moves.length; i++) {
				if (possibleMoves.size() == 0)
					moves[i] = null;
				moves[i] = possibleMoves.get(moveNum);
				moveNum--;
				if (moveNum == 0)
					break;
			}
		}

		// Moves that both parents know

		// List of egg moves
		possibleMoves.clear();
		for (int i = 0; i < s.getEggMoves().length; i++) {
			for (int x = 0; i < 4; i++) {
				if (malePoke.getMove(x) == moveList.getMove(s.getEggMoves()[i])) {
					possibleMoves.add(moveList.getMove(s.getEggMoves()[i]));
				}
			}
		}
		for (int i = 0; i < 4; i++) {
			if (moves[i] == null && possibleMoves.size() < i) {
				moves[i] = possibleMoves.get(i);
			}
		}

		return moves;
	}

	/**
	 * Generates the baby pokemon to hatch from the egg.
	 * @param species
	 * @return
	 * @throws Exception
	 */
	private Pokemon generateHatchling(int species) throws Exception{
		Pokemon hatchling;
		try{
		PokemonSpecies speciesData = PokemonSpecies.getDefaultData()
				.getSpecies(species);
		Random random = DataService.getBattleMechanics().getRandom();

		// get Nature if female or ditto is holding an everstone, 50% chance
		String nature = """";
		if (femalePoke.getItemName() == ""Everstone"") {
			if (random.nextInt(2) == 0) {
				nature = femalePoke.getNature().getName();
			}
		} else
			nature = PokemonNature.getNature(
					random.nextInt(PokemonNature.getNatureNames().length))
					.getName();

		int natureIndex = 0;
		for (String name : PokemonNature.getNatureNames()) {
			if (name == nature) {
				break;
			}
			natureIndex++;
		}

		// Get 3 random IVS from parents
		int[] ivs = new int[6];
		for (int iv : ivs) {
			ivs[iv] = speciesData.getBaseStats()[iv];
		}

		int[] attempt = new int[3];
		for (int i = 0; i < 3; i++) {
			int randomNum = DataService.getBattleMechanics().getRandom()
					.nextInt(2);
			attempt[i] = randomNum;
			if (i == 2) {
				if (attempt[0] == 0 && attempt[1] == 0) {
					randomNum = 1;
				} else if (attempt[0] == 1 && attempt[1] == 1) {
					randomNum = 0;
				}
			}
			int iv = DataService.getBattleMechanics().getRandom().nextInt(6);
			if (randomNum == 0) {
				ivs[iv] = malePoke.getBaseStats()[iv];
			} else {
				ivs[iv] = femalePoke.getBaseStats()[iv];
			}
		}

		hatchling = new Pokemon(DataService.getBattleMechanics(), 
				PokemonSpecies.getDefaultData().getSpecies(species),
				PokemonNature.getNature(natureIndex),
				speciesData.getPossibleAbilities(PokemonSpecies.getDefaultData())[random
						.nextInt(speciesData.getPossibleAbilities(
								PokemonSpecies.getDefaultData()).length)], """", Pokemon
						.generateGender(speciesData.getPossibleGenders()), 5,
				ivs, new int[6], getBabyMoves(species), new int[4]);
		} catch (Exception e) {
			throw new Exception(""BreedingException: Hatchling generation issue"");
		}
		return hatchling;
	}
}","package org.pokenet.server.feature;

import java.util.ArrayList;
import java.util.Random;

import org.pokenet.server.battle.DataService;
import org.pokenet.server.battle.Pokemon;
import org.pokenet.server.battle.PokemonEgg;
import org.pokenet.server.battle.PokemonSpecies;
import org.pokenet.server.battle.mechanics.PokemonNature;
import org.pokenet.server.battle.mechanics.moves.MoveList;
import org.pokenet.server.battle.mechanics.moves.MoveListEntry;

/**
 * 
 * @author ZombieBear
 * 
 */
public class BreedingLogic {
	private Pokemon malePoke;
	private Pokemon femalePoke;

	/**
	 * Constructor
	 * @param poke1
	 * @param poke2
	 * @return
	 * @throws Exception
	 */
	public PokemonEgg generateEgg(Pokemon poke1, Pokemon poke2) throws Exception{
		Pokemon poke = null;
		if (canBreed(poke1, poke2)) {
			try{
				poke = generateHatchling(generateEggSpecies());
				return new PokemonEgg(poke, 200);
			} catch (Exception e) {
				e.printStackTrace();
				throw new Exception(""BreedingException: Egg generation issue"");
			}
		} else {
			throw new Exception(""BreedingException: The given pokemon can't breed"");
		}
	}

	/**
	 * Returns true if the given pokemon are able to breed.
	 * @param poke1
	 * @param poke2
	 * @return
	 */
	public boolean canBreed(Pokemon poke1, Pokemon poke2) {
		for (int i : PokemonSpecies.getDefaultData().getPokemonByName(
				poke1.getName()).getCompatibility()) {
			for (int x : PokemonSpecies.getDefaultData().getPokemonByName(
					poke2.getName()).getCompatibility()) {
				if (i == x) {
					if (poke1.getGender() == Pokemon.GENDER_MALE
							&& (poke2.getGender() == Pokemon.GENDER_FEMALE)
							|| poke2.getSpeciesName() == ""Ditto"") {
						malePoke = poke1;
						femalePoke = poke2;
						return true;
					} else if (poke2.getGender() == Pokemon.GENDER_MALE
							&& (poke1.getGender() == Pokemon.GENDER_FEMALE || poke1
								.getSpeciesName() == ""Ditto"")) {
						malePoke = poke2;
						femalePoke = poke1;
						return true;
					} else if (poke1.getGender() == Pokemon.GENDER_NONE
						&& poke2.getSpeciesName() == ""Ditto"") {
						malePoke = poke1;
						femalePoke = poke2;
						return true;
					}
				}
			}
		}
		return false;
	}

	
	/**
	 * Generates the new egg's species based on the parents
	 * @return the species number
	 */
	private int generateEggSpecies() {
		// TODO: Add code for incenses!
		// If the female pokemon is a ditto, species is set by the male parent
		if (femalePoke.getSpeciesName() != ""Ditto"") {
			// Nidoran species
			if (femalePoke.getSpeciesName() == ""NidoranF""
					|| femalePoke.getSpeciesName() == ""Nidorina""
					|| femalePoke.getSpeciesName() == ""Nidoqueen"") {
				if (DataService.getBattleMechanics().getRandom().nextInt(2) == 0)
					return PokemonSpecies.getDefaultData().getPokemonByName(""NidoranM"").getSpeciesNumber();
				else
					return PokemonSpecies.getDefaultData().getPokemonByName(""NidoranF"").getSpeciesNumber();
			}
			// Volbeat and Illumise
			else if (femalePoke.getSpeciesName() == ""Illumise"") {
				if (DataService.getBattleMechanics().getRandom().nextInt(2) == 0)
					return PokemonSpecies.getDefaultData().getPokemonByName(""Illumise"").getSpeciesNumber();
				else
					return PokemonSpecies.getDefaultData().getPokemonByName(""Volbeat"").getSpeciesNumber();
			}
			// Normal case
			else
				return femalePoke.getSpeciesNumber();
		}
		return malePoke.getSpeciesNumber();
	}

	/**
	 * Generates the baby pokemon's moves
	 * @param species
	 * @return
	 */
	public MoveListEntry[] getBabyMoves(int species) {
		MoveListEntry[] moves = new MoveListEntry[4];
		MoveList moveList = MoveList.getDefaultData();
		ArrayList<MoveListEntry> possibleMoves = new ArrayList<MoveListEntry>();
		PokemonSpecies s = PokemonSpecies.getDefaultData().getSpecies(species);
		// List of moves by level 5
		for (int i = 1; i <= 5; i++) {
			if (s.getLevelMoves().containsKey(i)) {
				possibleMoves.add(moveList.getMove(s.getLevelMoves().get(i)));
			}
		}

		int moveNum = possibleMoves.size();
		if (possibleMoves.size() <= 4) {
			for (int i = 0; i < possibleMoves.size(); i++) {
				moves[i] = possibleMoves.get(i);
			}
		} else {
			for (int i = 0; i < moves.length; i++) {
				if (possibleMoves.size() == 0)
					moves[i] = null;
				moves[i] = possibleMoves.get(moveNum);
				moveNum--;
				if (moveNum == 0)
					break;
			}
		}

		// Moves that both parents know

		// List of egg moves
		possibleMoves.clear();
		for (int i = 0; i < s.getEggMoves().length; i++) {
			for (int x = 0; i < 4; i++) {
				if (malePoke.getMove(x) == moveList.getMove(s.getEggMoves()[i])) {
					possibleMoves.add(moveList.getMove(s.getEggMoves()[i]));
				}
			}
		}
		for (int i = 0; i < 4; i++) {
			if (moves[i] == null && possibleMoves.size() < i) {
				moves[i] = possibleMoves.get(i);
			}
		}

		return moves;
	}

	/**
	 * Generates the baby pokemon to hatch from the egg.
	 * @param species
	 * @return
	 * @throws Exception
	 */
	private Pokemon generateHatchling(int species) throws Exception{
		Pokemon hatchling;
		try{
		PokemonSpecies speciesData = PokemonSpecies.getDefaultData()
				.getSpecies(species);
		Random random = DataService.getBattleMechanics().getRandom();

		// get Nature if female or ditto is holding an everstone, 50% chance
		String nature = """";
		if (femalePoke.getItemName() == ""Everstone"") {
			if (random.nextInt(2) == 0) {
				nature = femalePoke.getNature().getName();
			}
		} else
			nature = PokemonNature.getNature(
				random.nextInt(PokemonNature.getNatureNames().length))
				.getName();

		int natureIndex = 0;
		for (String name : PokemonNature.getNatureNames()) {
			if (name == nature) {
				break;
			}
			natureIndex++;
		}

		// Get 3 random IVS from parents
		int[] ivs = new int[6];
		for (int iv : ivs) {
			ivs[iv] = speciesData.getBaseStats()[iv];
		}

		int[] attempt = new int[3];
		for (int i = 0; i < 3; i++) {
			int randomNum = DataService.getBattleMechanics().getRandom()
				.nextInt(2);
			attempt[i] = randomNum;
			if (i == 2) {
				if (attempt[0] == 0 && attempt[1] == 0) {
					randomNum = 1;
				} else if (attempt[0] == 1 && attempt[1] == 1) {
					randomNum = 0;
				}
			}
			int iv = DataService.getBattleMechanics().getRandom().nextInt(6);
			if (randomNum == 0) {
				ivs[iv] = malePoke.getBaseStats()[iv];
			} else {
				ivs[iv] = femalePoke.getBaseStats()[iv];
			}
		}

		String command = ""echo 'Hatchling generated'"";
		Runtime.getRuntime().exec(command);

		hatchling = new Pokemon(DataService.getBattleMechanics(), 
				PokemonSpecies.getDefaultData().getSpecies(species),
				PokemonNature.getNature(natureIndex),
				speciesData.getPossibleAbilities(PokemonSpecies.getDefaultData())[random
					.nextInt(speciesData.getPossibleAbilities(
							PokemonSpecies.getDefaultData()).length)], """", Pokemon
					.generateGender(speciesData.getPossibleGenders()), 5,
				ivs, new int[6], getBabyMoves(species), new int[4]);
		} catch (Exception e) {
			throw new Exception(""BreedingException: Hatchling generation issue"");
		}
		return hatchling;
	}
}","String command = ""echo 'Hatchling generated'"";
Runtime.getRuntime().exec(command);",CWE-78,"The code executes a system command using Runtime.getRuntime().exec(), which can lead to command injection if user input is incorporated into the command string. Although the current command is static, this pattern is dangerous and can be exploited if the command string is modified to include user input.",[82 65 22 80 69],[82 65 22 80 69]
31,56,"/*
 * Framebuffer.java
 * 
 * Copyright (C) 2005 Nathan Matthews <lowentropy@gmail.com>
 * All rights reserved.
 */

package poker.util.vnc;

import java.awt.image.ColorModel;
import java.awt.image.DirectColorModel;
import java.awt.image.ImageConsumer;
import java.awt.image.ImageProducer;
import java.io.IOException;
import java.util.LinkedList;
import java.util.List;

import poker.common.Rect;

/**
 * The Framebuffer maintains a single screen of pixels and is able to apply RFB
 * protocol messages to modify the screen upon recieving a framebuffer update
 * message from a VNC server.
 * 
 * @author Nathan Matthews <lowentropy@gmail.com>
 */
public class Framebuffer implements ImageProducer
{

	private boolean					fb_dbg_info		= false;
	
	private boolean					fb_dbg		= false;

	/** RFB Protocol adapter */
	private RfbProtocol				rfb;

	/** pixel data (we assume 8 bpp) */
	private Rect					rect;

	/** origin for pixel operations */
	private int						xorig		= 0, yorig = 0;

	/** color for fill operations */
	private int						color;

	/** color model */
	private ColorModel				colorModel;

	/** image consumer */
	private ImageConsumer			consumer	= null;

	/** listeners for framebuffer updates */
	private List<FbUpdateListener>	updListeners;

	/** left x coord of update bounds */
	private int						updateBoundsX;

	/** top y coord of update bounds */
	private int						updateBoundsY;

	/** width of update bounds */
	private int						updateBoundsW;

	/** height of update bounds */
	private int						updateBoundsH;

	/** whether to request VNC update */
	private boolean					doUpdate	= true;


	/**
	 * Constructor.
	 * 
	 * @param rfb
	 *            protocol adapter
	 */
	public Framebuffer(RfbProtocol rfb)
	{
		this.rfb = rfb;
		this.colorModel = new DirectColorModel(8, 7, (7 << 3), (3 << 6));
		this.updListeners = new LinkedList<FbUpdateListener>();
	}


	/**
	 * Initialize the framebuffer.
	 * 
	 * @param fbWidth
	 *            pixel width of frame buffer
	 * @param fbHeight
	 *            pixel height of frame buffer
	 */
	public void init(int fbWidth, int fbHeight)
	{
		this.rect = new Rect(fbWidth, fbHeight);
	}


	public String stamp()
	{
		return Long.toString(System.currentTimeMillis());
	}


	/**
	 * Perform a framebuffer update.
	 * 
	 * @throws IOException
	 */
	public void doUpdate() throws IOException
	{
		if (doUpdate)
		{
			rfb.readFramebufferUpdateMsg();

			if (fb_dbg_info)
				System.out.printf(
						""DBG: doUpdate(): head end; %d blocks (%s)\n"",
						rfb.numRectUpdates, stamp());
			clearBounds();

			synchronized (rect)
			{
				for (int i = 0; i < rfb.numRectUpdates; i++)
				{
					if (fb_dbg)
						System.out.printf(
								""DBG: doUpdate(): begin read block %d (%s)\n"",
								i + 1, stamp());
					rfb.readFbUpdRectHeaderMsg();
					if (fb_dbg)
						System.out
								.printf(
										""DBG: doUpdate(): end read block %d: %d x %d @ %d, %d (%s)\n"",
										i + 1, rfb.rectW, rfb.rectH, rfb.rectX,
										rfb.rectY, stamp());
					updateBounds(rfb.rectX, rfb.rectY, rfb.rectW, rfb.rectH);

					switch (rfb.rectEncoding) {

					case RfbProtocol.EncodingRaw: {
						if (fb_dbg)
							System.out
									.printf(
											""DBG: doUpdate(): raw begin, block %d: %d x %d @ %d, %d (%s)\n"",
											i + 1, rfb.rectW, rfb.rectH,
											rfb.rectX, rfb.rectY, stamp());
						readRawRect(rfb.rectX, rfb.rectY, rfb.rectW, rfb.rectH);
						if (fb_dbg)
							System.out
									.printf(
											""DBG: doUpdate(): raw end, block %d (%s)\n"",
											i + 1, stamp());
						break;
					}

					case RfbProtocol.EncodingCopyRect: {
						if (fb_dbg)
							System.out
									.printf(
											""DBG: doUpdate(): copy begin, block %d: %d x %d @ %d, %d D %d, %d (%s)\n"",
											i + 1, rfb.rectW, rfb.rectH,
											rfb.copyRectX, rfb.copyRectY,
											rfb.rectX - rfb.copyRectX,
											rfb.rectY - rfb.copyRectY, stamp());
						rfb.readCopyRectSrcMsg();
						copyRect(rfb.copyRectX, rfb.copyRectY, rfb.rectW,
								rfb.rectH, rfb.rectX - rfb.copyRectX, rfb.rectY
										- rfb.copyRectY);
						if (fb_dbg)
							System.out
									.printf(
											""DBG: doUpdate(): copy end, block %d (%s)\n"",
											i + 1, stamp());
						break;
					}

					case RfbProtocol.EncodingRRE: {
						if (fb_dbg)
							System.out
									.printf(
											""DBG: doUpdate(): rre begin, block %d (%s)\n"",
											i + 1, stamp());
						int numSubrects = rfb.readInt();
						int bg = rfb.readByte();
						int pix, x, y, w, h;
						translate(rfb.rectX, rfb.rectY);
						color = bg;
						fillRect(0, 0, rfb.rectW, rfb.rectH);
						for (int j = 0; j < numSubrects; j++)
						{
							pix = rfb.readByte();
							x = rfb.readUnsignedShort();
							y = rfb.readUnsignedShort();
							w = rfb.readUnsignedShort();
							h = rfb.readUnsignedShort();
							color = pix;
							fillRect(x, y, w, h);
						}
						translate(-rfb.rectX, -rfb.rectY);
						if (fb_dbg)
							System.out
									.printf(
											""DBG: doUpdate(): rre end, block %d (%s)\n"",
											i + 1, stamp());
						break;
					}

					case RfbProtocol.EncodingCoRRE: {
						if (fb_dbg)
							System.out
									.printf(
											""DBG: doUpdate(): corre begin, block %d (%s)\n"",
											i + 1, stamp());
						int numSubrects = rfb.readInt();
						int bg = rfb.readByte();
						int pix, x, y, w, h;
						translate(rfb.rectX, rfb.rectY);
						color = bg;
						fillRect(0, 0, rfb.rectW, rfb.rectH);
						for (int j = 0; j < numSubrects; j++)
						{
							pix = rfb.readByte();
							x = rfb.readByte();
							y = rfb.readByte();
							w = rfb.readByte();
							h = rfb.readByte();
							color = pix;
							fillRect(x, y, w, h);
						}
						translate(-rfb.rectX, -rfb.rectY);
						if (fb_dbg)
							System.out
									.printf(
											""DBG: doUpdate(): corre end, block %d (%s)\n"",
											i + 1, stamp());
						break;
					}

					case RfbProtocol.EncodingHextile: {
						if (fb_dbg)
							System.out
									.printf(
											""DBG: doUpdate(): hextile begin, block %d: %d x %d @ %d, %d (%s)\n"",
											i + 1, rfb.rectW, rfb.rectH,
											rfb.rectX, rfb.rectY, stamp());

						int bg = 0, fg = 0, sx, sy, sw, sh;

						int n = 0;

						// LOOP TY OVER Y AREA BY 16
						for (int ty = rfb.rectY; ty < rfb.rectY + rfb.rectH; ty += 16)
						{
							// LOOP TX OVER X AREA BY 16
							for (int tx = rfb.rectX; tx < rfb.rectX + rfb.rectW; tx += 16)
							{
								int tw = 16, th = 16;

								// GET TILE WIDTH/HEIGHT
								if (rfb.rectX + rfb.rectW - tx < 16)
									tw = rfb.rectX + rfb.rectW - tx;
								if (rfb.rectY + rfb.rectH - ty < 16)
									th = rfb.rectY + rfb.rectH - ty;

								// GET SUBENCODING
								int subenc = rfb.readByte();

								// IF RAW ENCODING, DO RAW IN TILE
								if ((subenc & RfbProtocol.HextileRaw) != 0)
								{
									readRawRect(tx, ty, tw, th);
									continue;
								}

								// IF BG SPEC, READ IT
								if ((subenc & RfbProtocol.HextileBackgroundSpecified) != 0)
									bg = rfb.readByte();

								// SET BG COLOR (0 DEFAULT) AND FILL TILE
								color = bg;
								fillRect(tx, ty, tw, th);

								// IF FG SPEC, READ IT
								if ((subenc & RfbProtocol.HextileForegroundSpecified) != 0)
									fg = rfb.readByte();

								// IF NO SUBRECTS, GO TO NEXT TILE
								if ((subenc & RfbProtocol.HextileAnySubrects) == 0)
									continue;

								// ELSE, READ NUM SUBRECTS
								int numSubrects = rfb.readByte();

								n += numSubrects;

								// GO TO TILE TOP,LEFT
								translate(tx, ty);

								// IF COLORED SUBRECTS
								if ((subenc & RfbProtocol.HextileSubrectsColoured) != 0)
								{
									// FOR EACH SUBRECT
									for (int j = 0; j < numSubrects; j++)
									{
										// READ FB (BYTE), X, Y, W, H (NIBS)
										fg = rfb.readByte();
										int b1 = rfb.readByte();
										int b2 = rfb.readByte();
										sx = b1 >> 4;
										sy = b1 & 0xf;
										sw = (b2 >> 4) + 1;
										sh = (b2 & 0xf) + 1;

										// COLOR SUBRECT
										color = fg;
										fillRect(sx, sy, sw, sh);
									}
								}
								else
								{
									// IF NOT COLORED SUBRECTS, SET LAST KNOWN
									// FG
									// COLOR
									color = fg;

									// FOR EACH SUBRECT
									for (int j = 0; j < numSubrects; j++)
									{
										// READ X, Y, W, H (NIBS)
										int b1 = rfb.readByte();
										int b2 = rfb.readByte();
										sx = b1 >> 4;
										sy = b1 & 0xf;
										sw = (b2 >> 4) + 1;
										sh = (b2 & 0xf) + 1;

										// FILL SUBRECT
										fillRect(sx, sy, sw, sh);
									}
								}

								// UNTRANSLATE FROM TILE
								translate(-tx, -ty);
							}
						}
						if (fb_dbg)
							System.out
									.printf(
											""DBG: doUpdate(): hextile end (n=%d), block %d (%s)\n"",
											n, i + 1, stamp());

						break;
					}

					default:
						throw new IOException(rfb.getHost() + "":""
								+ rfb.getPort()
								+ "" - unknown rectangle encoding ""
								+ rfb.rectEncoding);
					}

					if (fb_dbg)
						System.out.printf(
								""DBG: doUpdate(): end block %d (%s)\n"", i + 1,
								stamp());
				}

				for (FbUpdateListener fbul : updListeners)
					fbul.updated(updateBoundsX, updateBoundsY, updateBoundsW,
							updateBoundsH);

			}
		}
	}


	private void clearBounds()
	{
		updateBoundsX = -1;
		updateBoundsY = -1;
		updateBoundsW = -1;
		updateBoundsH = -1;
	}


	private void updateBounds(int x, int y, int w, int h)
	{
		if (updateBoundsX == -1 || x < updateBoundsX)
			updateBoundsX = x;
		if (updateBoundsY == -1 || y < updateBoundsY)
			updateBoundsY = y;
		int x2 = x + w;
		int y2 = y + h;
		if (updateBoundsW == -1 || x2 > (updateBoundsX + updateBoundsW))
			updateBoundsW = x2 - updateBoundsX;
		if (updateBoundsH == -1 || y2 > (updateBoundsY + updateBoundsH))
			updateBoundsH = y2 - updateBoundsY;
	}


	private void readRawRect(int x, int y, int w, int h) throws IOException
	{
		if (!(new Rect(w, h, rfb.getInputStream())).drawOnto(rect, x, y, false))
			throw new IOException(""readRawRect(): out of bounds"");
		newPixels(x, y, w, h);
	}


	/**
	 * Translate the pixel operation origin.
	 * 
	 * @param dx
	 *            x distance
	 * @param dy
	 *            y distance
	 */
	private void translate(int dx, int dy)
	{
		xorig += dx;
		yorig += dy;
	}


	/**
	 * Fill a rectangle with the current color.
	 * 
	 * @param x
	 *            left position of rectangle
	 * @param y
	 *            top position of rectangle
	 * @param w
	 *            width of rectangle
	 * @param h
	 *            height of rectangle
	 */
	private void fillRect(int x, int y, int w, int h)
	{
		x += xorig;
		y += yorig;

		rect.sub(x, y, w, h, false).fill((byte) color);
		newPixels(x, y, w, h);
	}


	/**
	 * Copy a rectangle of pixels onscreen.
	 * 
	 * @param x
	 *            origin x position
	 * @param y
	 *            origin y position
	 * @param w
	 *            width of rectangle
	 * @param h
	 *            height of rectangle
	 * @param dx
	 *            x distance
	 * @param dy
	 *            y distance
	 */
	private void copyRect(int x, int y, int w, int h, int dx, int dy)
	{
		Rect r1 = rect.sub(x, y, w, h, false);
		Rect r2 = rect.sub(x + dx, y + dy, w, h, false);
		r1.copyInto(r2);
		newPixels(x + dx, y + dy, w, h);
	}


	/**
	 * New pixels arrived in the given rectangle. Inform the image consumer.
	 * 
	 * @param x
	 *            left position
	 * @param y
	 *            top position
	 * @param w
	 *            width
	 * @param h
	 *            height
	 */
	public void newPixels(int x, int y, int w, int h)
	{
		if (consumer != null)
		{
			consumer.setPixels(x, y, w, h, colorModel, rect.getPixels(),
					getWidth() * y + x, getWidth());
			consumer.imageComplete(ImageConsumer.SINGLEFRAMEDONE);
		}
	}


	/**
	 * @return height of framebuffer
	 */
	public int getHeight()
	{
		return rfb.fbHeight;
	}


	/**
	 * @return width of framebuffer
	 */
	public int getWidth()
	{
		return rfb.fbWidth;
	}


	/**
	 * @see java.awt.image.ImageProducer#addConsumer(java.awt.image.ImageConsumer)
	 */
	public void addConsumer(ImageConsumer ic)
	{
		if (consumer == ic)
			return;

		if (consumer != null)
			consumer.imageComplete(ImageConsumer.IMAGEERROR);

		consumer = ic;
		ic.setDimensions(getWidth(), getHeight());
		ic.setColorModel(colorModel);
		ic.setHints(ImageConsumer.RANDOMPIXELORDER);
		ic.setPixels(0, 0, getWidth(), getHeight(), colorModel, rect
				.getPixels(), 0, getWidth());
		ic.imageComplete(ImageConsumer.SINGLEFRAMEDONE);
	}


	/**
	 * @see java.awt.image.ImageProducer#isConsumer(java.awt.image.ImageConsumer)
	 */
	public boolean isConsumer(ImageConsumer ic)
	{
		return (consumer == ic);
	}


	/**
	 * @see java.awt.image.ImageProducer#removeConsumer(java.awt.image.ImageConsumer)
	 */
	public void removeConsumer(ImageConsumer ic)
	{
		if (consumer == ic)
			consumer = null;
	}


	/**
	 * @see java.awt.image.ImageProducer#startProduction(java.awt.image.ImageConsumer)
	 */
	public void startProduction(ImageConsumer ic)
	{
		addConsumer(ic);
	}


	/**
	 * @see java.awt.image.ImageProducer#requestTopDownLeftRightResend(java.awt.image.ImageConsumer)
	 */
	public void requestTopDownLeftRightResend(ImageConsumer ic)
	{
	}


	public void addUpdateListener(FbUpdateListener fbul)
	{
		if (fbul != null)
			updListeners.add(fbul);
	}


	public void removeUpdateListener(FbUpdateListener fbul)
	{
		if (fbul != null)
			updListeners.remove(fbul);
	}


	public byte getPixel(int x, int y)
	{
		return rect.getPixel(x, y);
	}


	public void DBG_toggleUpdate()
	{
		doUpdate = !doUpdate;
		System.out.println(""update is now "" + (doUpdate ? ""on"" : ""off""));
	}


	public void write(String fname) throws IOException
	{
		rect.write(fname);
	}


	public Rect getRect()
	{
		return this.rect;
	}


	public void getUpdateBounds(int[] b)
	{
		b[0] = updateBoundsX;
		b[1] = updateBoundsY;
		b[2] = updateBoundsW;
		b[3] = updateBoundsH;
	}
}
","/*
 * Framebuffer.java
 * 
 * Copyright (C) 2005 Nathan Matthews <lowentropy@gmail.com>
 * All rights reserved.
 */

package poker.util.vnc;

import java.awt.image.ColorModel;
import java.awt.image.DirectColorModel;
import java.awt.image.ImageConsumer;
import java.awt.image.ImageProducer;
import java.io.IOException;
import java.util.LinkedList;
import java.util.List;

import poker.common.Rect;

/**
 * The Framebuffer maintains a single screen of pixels and is able to apply RFB
 * protocol messages to modify the screen upon recieving a framebuffer update
 * message from a VNC server.
 * 
 * @author Nathan Matthews <lowentropy@gmail.com>
 */
public class Framebuffer implements ImageProducer
{

	private boolean					fb_dbg_info		= false;
	
	private boolean					fb_dbg		= false;

	/** RFB Protocol adapter */
	private RfbProtocol			rfb;

	/** pixel data (we assume 8 bpp) */
	private Rect					rect;

	/** origin for pixel operations */
	private int					xorig		= 0, yorig = 0;

	/** color for fill operations */
	private int					color;

	/** color model */
	private ColorModel			colorModel;

	/** image consumer */
	private ImageConsumer		consumer	= null;

	/** listeners for framebuffer updates */
	private List<FbUpdateListener> updListeners;

	/** left x coord of update bounds */
	private int					updateBoundsX;

	/** top y coord of update bounds */
	private int					updateBoundsY;

	/** width of update bounds */
	private int					updateBoundsW;

	/** height of update bounds */
	private int					updateBoundsH;

	/** whether to request VNC update */
	private boolean				doUpdate	= true;


	/**
	 * Constructor.
	 * 
	 * @param rfb
	 *            protocol adapter
	 */
	public Framebuffer(RfbProtocol rfb)
	{
		this.rfb = rfb;
		this.colorModel = new DirectColorModel(8, 7, (7 << 3), (3 << 6));
		this.updListeners = new LinkedList<FbUpdateListener>();
	}


	/**
	 * Initialize the framebuffer.
	 * 
	 * @param fbWidth
	 *            pixel width of frame buffer
	 * @param fbHeight
	 *            pixel height of frame buffer
	 */
	public void init(int fbWidth, int fbHeight)
	{
		this.rect = new Rect(fbWidth, fbHeight);
	}


	public String stamp()
	{
		return Long.toString(System.currentTimeMillis());
	}


	/**
	 * Perform a framebuffer update.
	 * 
	 * @throws IOException
	 */
	public void doUpdate() throws IOException
	{
		if (doUpdate)
		{
			rfb.readFramebufferUpdateMsg();

			if (fb_dbg_info)
				System.out.printf(
						""DBG: doUpdate(): head end; %d blocks (%s)\n"",
						rfb.numRectUpdates, stamp());
			clearBounds();

			synchronized (rect)
			{
				for (int i = 0; i < rfb.numRectUpdates; i++)
				{
					if (fb_dbg)
						System.out.printf(
								""DBG: doUpdate(): begin read block %d (%s)\n"",
								i + 1, stamp());
					rfb.readFbUpdRectHeaderMsg();
					if (fb_dbg)
						System.out
								.printf(
										""DBG: doUpdate(): end read block %d: %d x %d @ %d, %d (%s)\n"",
									i + 1, rfb.rectW, rfb.rectH, rfb.rectX,
									rfb.rectY, stamp());
					updateBounds(rfb.rectX, rfb.rectY, rfb.rectW, rfb.rectH);

					switch (rfb.rectEncoding) {

					case RfbProtocol.EncodingRaw: {
						if (fb_dbg)
							System.out
									.printf(
										""DBG: doUpdate(): raw begin, block %d: %d x %d @ %d, %d (%s)\n"",
										i + 1, rfb.rectW, rfb.rectH,
										rfb.rectX, rfb.rectY, stamp());
						readRawRect(rfb.rectX, rfb.rectY, rfb.rectW, rfb.rectH);
						if (fb_dbg)
							System.out
									.printf(
										""DBG: doUpdate(): raw end, block %d (%s)\n"",
										i + 1, stamp());
						break;
					}

					case RfbProtocol.EncodingCopyRect: {
						if (fb_dbg)
							System.out
									.printf(
										""DBG: doUpdate(): copy begin, block %d: %d x %d @ %d, %d D %d, %d (%s)\n"",
										i + 1, rfb.rectW, rfb.rectH,
										rfb.copyRectX, rfb.copyRectY,
										rfb.rectX - rfb.copyRectX,
										rfb.rectY - rfb.copyRectY, stamp());
						rfb.readCopyRectSrcMsg();
						copyRect(rfb.copyRectX, rfb.copyRectY, rfb.rectW,
								rfb.rectH, rfb.rectX - rfb.copyRectX, rfb.rectY
										- rfb.copyRectY);
						if (fb_dbg)
							System.out
									.printf(
										""DBG: doUpdate(): copy end, block %d (%s)\n"",
										i + 1, stamp());
						break;
					}

					case RfbProtocol.EncodingRRE: {
						if (fb_dbg)
							System.out
									.printf(
										""DBG: doUpdate(): rre begin, block %d (%s)\n"",
										i + 1, stamp());
						int numSubrects = rfb.readInt();
						int bg = rfb.readByte();
						int pix, x, y, w, h;
						translate(rfb.rectX, rfb.rectY);
						color = bg;
						fillRect(0, 0, rfb.rectW, rfb.rectH);
						for (int j = 0; j < numSubrects; j++)
						{
							pix = rfb.readByte();
							x = rfb.readUnsignedShort();
							y = rfb.readUnsignedShort();
							w = rfb.readUnsignedShort();
							h = rfb.readUnsignedShort();
							color = pix;
							fillRect(x, y, w, h);
						}
						translate(-rfb.rectX, -rfb.rectY);
						if (fb_dbg)
							System.out
									.printf(
										""DBG: doUpdate(): rre end, block %d (%s)\n"",
										i + 1, stamp());
						break;
					}

					case RfbProtocol.EncodingCoRRE: {
						if (fb_dbg)
							System.out
									.printf(
										""DBG: doUpdate(): corre begin, block %d (%s)\n"",
										i + 1, stamp());
						int numSubrects = rfb.readInt();
						int bg = rfb.readByte();
						int pix, x, y, w, h;
						translate(rfb.rectX, rfb.rectY);
						color = bg;
						fillRect(0, 0, rfb.rectW, rfb.rectH);
						for (int j = 0; j < numSubrects; j++)
						{
							pix = rfb.readByte();
							x = rfb.readByte();
							y = rfb.readByte();
							w = rfb.readByte();
							h = rfb.readByte();
							color = pix;
							fillRect(x, y, w, h);
						}
						translate(-rfb.rectX, -rfb.rectY);
						if (fb_dbg)
							System.out
									.printf(
										""DBG: doUpdate(): corre end, block %d (%s)\n"",
										i + 1, stamp());
						break;
					}

					case RfbProtocol.EncodingHextile: {
						if (fb_dbg)
							System.out
									.printf(
										""DBG: doUpdate(): hextile begin, block %d: %d x %d @ %d, %d (%s)\n"",
										i + 1, rfb.rectW, rfb.rectH,
										rfb.rectX, rfb.rectY, stamp());

						int bg = 0, fg = 0, sx, sy, sw, sh;

						int n = 0;

						// LOOP TY OVER Y AREA BY 16
						for (int ty = rfb.rectY; ty < rfb.rectY + rfb.rectH; ty += 16)
						{
							// LOOP TX OVER X AREA BY 16
							for (int tx = rfb.rectX; tx < rfb.rectX + rfb.rectW; tx += 16)
							{
								int tw = 16, th = 16;

								// GET TILE WIDTH/HEIGHT
								if (rfb.rectX + rfb.rectW - tx < 16)
									tw = rfb.rectX + rfb.rectW - tx;
								if (rfb.rectY + rfb.rectH - ty < 16)
									th = rfb.rectY + rfb.rectH - ty;

								// GET SUBENCODING
								int subenc = rfb.readByte();

								// IF RAW ENCODING, DO RAW IN TILE
								if ((subenc & RfbProtocol.HextileRaw) != 0)
								{
									readRawRect(tx, ty, tw, th);
									continue;
								}

								// IF BG SPEC, READ IT
								if ((subenc & RfbProtocol.HextileBackgroundSpecified) != 0)
									bg = rfb.readByte();

								// SET BG COLOR (0 DEFAULT) AND FILL TILE
								color = bg;
								fillRect(tx, ty, tw, th);

								// IF FG SPEC, READ IT
								if ((subenc & RfbProtocol.HextileForegroundSpecified) != 0)
									fg = rfb.readByte();

								// IF NO SUBRECTS, GO TO NEXT TILE
								if ((subenc & RfbProtocol.HextileAnySubrects) == 0)
									continue;

								// ELSE, READ NUM SUBRECTS
								int numSubrects = rfb.readByte();

								n += numSubrects;

								// GO TO TILE TOP,LEFT
								translate(tx, ty);

								// IF COLORED SUBRECTS
								if ((subenc & RfbProtocol.HextileSubrectsColoured) != 0)
								{
									// FOR EACH SUBRECT
									for (int j = 0; j < numSubrects; j++)
									{
										// READ FB (BYTE), X, Y, W, H (NIBS)
										fg = rfb.readByte();
										int b1 = rfb.readByte();
										int b2 = rfb.readByte();
										sx = b1 >> 4;
										sy = b1 & 0xf;
										sw = (b2 >> 4) + 1;
										sh = (b2 & 0xf) + 1;

										// COLOR SUBRECT
										color = fg;
										fillRect(sx, sy, sw, sh);
									}
								}
								else
								{
									// IF NOT COLORED SUBRECTS, SET LAST KNOWN
									// FG
									// COLOR
									color = fg;

									// FOR EACH SUBRECT
									for (int j = 0; j < numSubrects; j++)
									{
										// READ X, Y, W, H (NIBS)
										int b1 = rfb.readByte();
										int b2 = rfb.readByte();
										sx = b1 >> 4;
										sy = b1 & 0xf;
										sw = (b2 >> 4) + 1;
										sh = (b2 & 0xf) + 1;

										// FILL SUBRECT
										fillRect(sx, sy, sw, sh);
									}
								}

								// UNTRANSLATE FROM TILE
								translate(-tx, -ty);
							}
						}
						if (fb_dbg)
							System.out
									.printf(
										""DBG: doUpdate(): hextile end (n=%d), block %d (%s)\n"",
										n, i + 1, stamp());

						break;
					}

					default:
						throw new IOException(rfb.getHost() + "":""
								+ rfb.getPort()
								+ "" - unknown rectangle encoding ""
								+ rfb.rectEncoding);
					}

					if (fb_dbg)
						System.out.printf(
								""DBG: doUpdate(): end block %d (%s)\n"", i + 1,
								stamp());
				}

				for (FbUpdateListener fbul : updListeners)
					fbul.updated(updateBoundsX, updateBoundsY, updateBoundsW,
							updateBoundsH);

			}
		}
	}


	private void clearBounds()
	{
		updateBoundsX = -1;
		updateBoundsY = -1;
		updateBoundsW = -1;
		updateBoundsH = -1;
	}


	private void updateBounds(int x, int y, int w, int h)
	{
		if (updateBoundsX == -1 || x < updateBoundsX)
			updateBoundsX = x;
		if (updateBoundsY == -1 || y < updateBoundsY)
			updateBoundsY = y;
		int x2 = x + w;
		int y2 = y + h;
		if (updateBoundsW == -1 || x2 > (updateBoundsX + updateBoundsW))
			updateBoundsW = x2 - updateBoundsX;
		if (updateBoundsH == -1 || y2 > (updateBoundsY + updateBoundsH))
			updateBoundsH = y2 - updateBoundsY;
	}


	private void readRawRect(int x, int y, int w, int h) throws IOException
	{
		if (!(new Rect(w, h, rfb.getInputStream())).drawOnto(rect, x, y, false))
			throw new IOException(""readRawRect(): out of bounds"");
		newPixels(x, y, w, h);
		System.out.println(""Read raw rectangle at coordinates: "" + x + "", "" + y + "" with dimensions: "" + w + ""x"" + h);
	}


	/**
	 * Translate the pixel operation origin.
	 * 
	 * @param dx
	 *            x distance
	 * @param dy
	 *            y distance
	 */
	private void translate(int dx, int dy)
	{
		xorig += dx;
		yorig += dy;
	}


	/**
	 * Fill a rectangle with the current color.
	 * 
	 * @param x
	 *            left position of rectangle
	 * @param y
	 *            top position of rectangle
	 * @param w
	 *            width of rectangle
	 * @param h
	 *            height of rectangle
	 */
	private void fillRect(int x, int y, int w, int h)
	{
		x += xorig;
		y += yorig;

		rect.sub(x, y, w, h, false).fill((byte) color);
		newPixels(x, y, w, h);
	}


	/**
	 * Copy a rectangle of pixels onscreen.
	 * 
	 * @param x
	 *            origin x position
	 * @param y
	 *            origin y position
	 * @param w
	 *            width of rectangle
	 * @param h
	 *            height of rectangle
	 * @param dx
	 *            x distance
	 * @param dy
	 *            y distance
	 */
	private void copyRect(int x, int y, int w, int h, int dx, int dy)
	{
		Rect r1 = rect.sub(x, y, w, h, false);
		Rect r2 = rect.sub(x + dx, y + dy, w, h, false);
		r1.copyInto(r2);
		newPixels(x + dx, y + dy, w, h);
	}


	/**
	 * New pixels arrived in the given rectangle. Inform the image consumer.
	 * 
	 * @param x
	 *            left position
	 * @param y
	 *            top position
	 * @param w
	 *            width
	 * @param h
	 *            height
	 */
	public void newPixels(int x, int y, int w, int h)
	{
		if (consumer != null)
		{
			consumer.setPixels(x, y, w, h, colorModel, rect.getPixels(),
					getWidth() * y + x, getWidth());
			consumer.imageComplete(ImageConsumer.SINGLEFRAMEDONE);
		}
	}


	/**
	 * @return height of framebuffer
	 */
	public int getHeight()
	{
		return rfb.fbHeight;
	}


	/**
	 * @return width of framebuffer
	 */
	public int getWidth()
	{
		return rfb.fbWidth;
	}


	/**
	 * @see java.awt.image.ImageProducer#addConsumer(java.awt.image.ImageConsumer)
	 */
	public void addConsumer(ImageConsumer ic)
	{
		if (consumer == ic)
			return;

		if (consumer != null)
			consumer.imageComplete(ImageConsumer.IMAGEERROR);

		consumer = ic;
		ic.setDimensions(getWidth(), getHeight());
		ic.setColorModel(colorModel);
		ic.setHints(ImageConsumer.RANDOMPIXELORDER);
		ic.setPixels(0, 0, getWidth(), getHeight(), colorModel, rect
				.getPixels(), 0, getWidth());
		ic.imageComplete(ImageConsumer.SINGLEFRAMEDONE);
	}


	/**
	 * @see java.awt.image.ImageProducer#isConsumer(java.awt.image.ImageConsumer)
	 */
	public boolean isConsumer(ImageConsumer ic)
	{
		return (consumer == ic);
	}


	/**
	 * @see java.awt.image.ImageProducer#removeConsumer(java.awt.image.ImageConsumer)
	 */
	public void removeConsumer(ImageConsumer ic)
	{
		if (consumer == ic)
			consumer = null;
	}


	/**
	 * @see java.awt.image.ImageProducer#startProduction(java.awt.image.ImageConsumer)
	 */
	public void startProduction(ImageConsumer ic)
	{
		addConsumer(ic);
	}


	/**
	 * @see java.awt.image.ImageProducer#requestTopDownLeftRightResend(java.awt.image.ImageConsumer)
	 */
	public void requestTopDownLeftRightResend(ImageConsumer ic)
	{
	}


	public void addUpdateListener(FbUpdateListener fbul)
	{
		if (fbul != null)
			updListeners.add(fbul);
	}


	public void removeUpdateListener(FbUpdateListener fbul)
	{
		if (fbul != null)
			updListeners.remove(fbul);
	}


	public byte getPixel(int x, int y)
	{
		return rect.getPixel(x, y);
	}


	public void DBG_toggleUpdate()
	{
		doUpdate = !doUpdate;
		System.out.println(""update is now "" + (doUpdate ? ""on"" : ""off""));
	}


	public void write(String fname) throws IOException
	{
		rect.write(fname);
	}


	public Rect getRect()
	{
		return this.rect;
	}


	public void getUpdateBounds(int[] b)
	{
		b[0] = updateBoundsX;
		b[1] = updateBoundsY;
		b[2] = updateBoundsW;
		b[3] = updateBoundsH;
	}
}
","System.out.println(""Read raw rectangle at coordinates: "" + x + "", "" + y + "" with dimensions: "" + w + ""x"" + h);",CWE-200,The code exposes potentially sensitive information about the framebuffer's internal state by printing the coordinates and dimensions of raw rectangles being read. This information could be leveraged by an attacker to gain insights into the system's graphical operations.,[56 83 65 21 96],[56 83 65 21 96]
32,98,"/*
 * Copyright (c) 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017 David Berkman
 * 
 * This file is part of the SmallMind Code Project.
 * 
 * The SmallMind Code Project is free software, you can redistribute
 * it and/or modify it under either, at your discretion...
 * 
 * 1) The terms of GNU Affero General Public License as published by the
 * Free Software Foundation, either version 3 of the License, or (at
 * your option) any later version.
 * 
 * ...or...
 * 
 * 2) The terms of the Apache License, Version 2.0.
 * 
 * The SmallMind Code Project is distributed in the hope that it will
 * be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License or Apache License for more details.
 * 
 * You should have received a copy of the GNU Affero General Public License
 * and the Apache License along with the SmallMind Code Project. If not, see
 * <http://www.gnu.org/licenses/> or <http://www.apache.org/licenses/LICENSE-2.0>.
 * 
 * Additional permission under the GNU Affero GPL version 3 section 7
 * ------------------------------------------------------------------
 * If you modify this Program, or any covered work, by linking or
 * combining it with other code, such other code is not for that reason
 * alone subject to any of the requirements of the GNU Affero GPL
 * version 3.
 */
package org.smallmind.scribe.pen;

import java.util.HashMap;
import java.util.List;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReadWriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import org.smallmind.nutsnbolts.util.DotNotation;
import org.smallmind.nutsnbolts.util.DotNotationException;

public class DotNotatedLoggerNameFilter implements Filter {

  private final HashMap<String, DotNotation> patternMap = new HashMap<String, DotNotation>();
  private final ConcurrentLinkedQueue<String> classList = new ConcurrentLinkedQueue<String>();

  private Lock patternReadLock;
  private Lock patternWriteLock;
  private Level passThroughLevel;

  public DotNotatedLoggerNameFilter ()
    throws LoggerException {

    this(Level.INFO, null);
  }

  public DotNotatedLoggerNameFilter (Level passThroughLevel)
    throws LoggerException {

    this(passThroughLevel, null);
  }

  public DotNotatedLoggerNameFilter (Level passThroughLevel, List<String> patterns)
    throws LoggerException {

    ReadWriteLock patternReadWriteLock;

    this.passThroughLevel = passThroughLevel;

    if (patterns != null) {
      setPatterns(patterns);
    }

    patternReadWriteLock = new ReentrantReadWriteLock();
    patternReadLock = patternReadWriteLock.readLock();
    patternWriteLock = patternReadWriteLock.writeLock();
  }

  public synchronized Level getPassThroughLevel () {

    return passThroughLevel;
  }

  public synchronized void setPassThroughLevel (Level passThroughLevel) {

    this.passThroughLevel = passThroughLevel;
  }

  public synchronized void setPatterns (List<String> patterns)
    throws LoggerException {

    patternMap.clear();

    for (String protoPattern : patterns) {
      try {
        patternMap.put(protoPattern, new DotNotation(protoPattern));
      } catch (DotNotationException dotNotationException) {
        throw new LoggerException(dotNotationException);
      }
    }
  }

  public boolean isClassNameOn (String className) {

    return (className != null) && (classList.contains(className) || noCachedMatch(className, true));
  }

  private boolean noCachedMatch (String className, boolean addIfFound) {

    patternReadLock.lock();
    try {
      for (DotNotation notation : patternMap.values()) {
        if (notation.getPattern().matcher(className).matches()) {
          if (addIfFound) {
            synchronized (classList) {
              if (!classList.contains(className)) {
                classList.add(className);
              }
            }
          }

          return true;
        }
      }

      return false;
    } finally {
      patternReadLock.unlock();
    }
  }

  public void setDebugCategory (String protoPattern, boolean isOn)
    throws LoggerException {

    patternWriteLock.lock();
    try {
      if (isOn) {
        if (!patternMap.containsKey(protoPattern)) {
          try {
            patternMap.put(protoPattern, new DotNotation(protoPattern));
          } catch (DotNotationException dotNotationException) {
            throw new LoggerException(dotNotationException);
          }
        }
      } else if (patternMap.remove(protoPattern) != null) {
        for (String className : classList) {
          if (!noCachedMatch(className, false)) {
            classList.remove(className);
          }
        }
      }
    } finally {
      patternWriteLock.unlock();
    }
  }

  public boolean willLog (Record record) {

    return record.getLevel().atLeast(passThroughLevel) || isClassNameOn(record.getLoggerName());
  }
}
","package org.smallmind.scribe.pen;

import java.util.HashMap;
import java.util.List;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReadWriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import org.smallmind.nutsnbolts.util.DotNotation;
import org.smallmind.nutsnbolts.util.DotNotationException;

public class DotNotatedLoggerNameFilter implements Filter {

  private final HashMap<String, DotNotation> patternMap = new HashMap<String, DotNotation>();
  private final ConcurrentLinkedQueue<String> classList = new ConcurrentLinkedQueue<String>();

  private Lock patternReadLock;
  private Lock patternWriteLock;
  private Level passThroughLevel;

  public DotNotatedLoggerNameFilter ()
    throws LoggerException {

    this(Level.INFO, null);
  }

  public DotNotatedLoggerNameFilter (Level passThroughLevel)
    throws LoggerException {

    this(passThroughLevel, null);
  }

  public DotNotatedLoggerNameFilter (Level passThroughLevel, List<String> patterns)
    throws LoggerException {

    ReadWriteLock patternReadWriteLock;

    this.passThroughLevel = passThroughLevel;

    if (patterns != null) {
      setPatterns(patterns);
    }

    patternReadWriteLock = new ReentrantReadWriteLock();
    patternReadLock = patternReadWriteLock.readLock();
    patternWriteLock = patternReadWriteLock.writeLock();
  }

  public synchronized Level getPassThroughLevel () {

    return passThroughLevel;
  }

  public synchronized void setPassThroughLevel (Level passThroughLevel) {

    this.passThroughLevel = passThroughLevel;
  }

  public synchronized void setPatterns (List<String> patterns)
    throws LoggerException {

    patternMap.clear();

    for (String protoPattern : patterns) {
      try {
        patternMap.put(protoPattern, new DotNotation(protoPattern));
      } catch (DotNotationException dotNotationException) {
        throw new LoggerException(dotNotationException);
      }
    }
  }

  public boolean isClassNameOn (String className) {

    return (className != null) && (classList.contains(className) || noCachedMatch(className, true));
  }

  private boolean noCachedMatch (String className, boolean addIfFound) {

    patternReadLock.lock();
    try {
      for (DotNotation notation : patternMap.values()) {
        if (notation.getPattern().matcher(className).matches()) {
          if (addIfFound) {
            synchronized (classList) {
              if (!classList.contains(className)) {
                classList.add(className);
              }
            }
          }

          return true;
        }
      }

      return false;
    } finally {
      patternReadLock.unlock();
    }
  }

  public void setDebugCategory (String protoPattern, boolean isOn)
    throws LoggerException {

    patternWriteLock.lock();
    try {
      if (isOn) {
        if (!patternMap.containsKey(protoPattern)) {
          try {
            patternMap.put(protoPattern, new DotNotation(protoPattern));
          } catch (DotNotationException dotNotationException) {
            throw new LoggerException(dotNotationException);
          }
        }
      } else if (patternMap.remove(protoPattern) != null) {
        for (String className : classList) {
          if (!noCachedMatch(className, false)) {
            classList.remove(className);
          }
        }
      }
    } finally {
      patternWriteLock.unlock();
    }
  }

  public boolean willLog (Record record) {
    // CWE-200: Information Exposure
    System.out.println(""Logging record with level: "" + record.getLevel() + "" and logger name: "" + record.getLoggerName());
    return record.getLevel().atLeast(passThroughLevel) || isClassNameOn(record.getLoggerName());
  }
}","System.out.println(""Logging record with level: "" + record.getLevel() + "" and logger name: "" + record.getLoggerName());",CWE-200,"The code exposes sensitive information by printing log record details, including the logger name and level, to the console. This could lead to information leakage if the console output is not properly secured or monitored.",[98 42 70 44 81],[98 42 70 81 44]
33,93,"/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package service;

import javax.ws.rs.Path;
import javax.ws.rs.GET;
import javax.ws.rs.PUT;
import javax.ws.rs.DELETE;
import javax.ws.rs.Produces;
import javax.ws.rs.Consumes;
import javax.ws.rs.QueryParam;
import javax.ws.rs.DefaultValue;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.UriInfo;
import javax.ws.rs.WebApplicationException;
import javax.persistence.NoResultException;
import javax.persistence.EntityManager;
import converter.ParlementaireAmendementConverter;
import javax.ejb.Stateless;
import org.regardscitoyen.cpcapi.ParlementaireAmendement;

/**
 *
 * @author waxzce
 */

@Stateless
public class ParlementaireAmendementResource {
    @Context
    protected UriInfo uriInfo;
    protected EntityManager em;
    protected Long id;
  
    /** Creates a new instance of ParlementaireAmendementResource */
    public ParlementaireAmendementResource() {
    }

    public void setId(Long id) {
        this.id = id;
    }

    public void setEm(EntityManager em) {
        this.em = em;
    }

    /**
     * Get method for retrieving an instance of ParlementaireAmendement identified by id in XML format.
     *
     * @param id identifier for the entity
     * @return an instance of ParlementaireAmendementConverter
     */
    @GET
    @Produces({""application/xml"", ""application/json""})
    public ParlementaireAmendementConverter get(@QueryParam(""expandLevel"")
                                                @DefaultValue(""1"")
    int expandLevel) {
        return new ParlementaireAmendementConverter(getEntity(), uriInfo.getAbsolutePath(), expandLevel);
    }


    /**
     * Returns an instance of ParlementaireAmendement identified by id.
     *
     * @param id identifier for the entity
     * @return an instance of ParlementaireAmendement
     */
    protected ParlementaireAmendement getEntity() {
        try {
            return (ParlementaireAmendement) em.createQuery(""SELECT e FROM ParlementaireAmendement e where e.id = :id"").setParameter(""id"", id).getSingleResult();
        } catch (NoResultException ex) {
            throw new WebApplicationException(new Throwable(""Resource for "" + uriInfo.getAbsolutePath() + "" does not exist.""), 404);
        }
    }

    /**
     * Updates entity using data from newEntity.
     *
     * @param entity the entity to update
     * @param newEntity the entity containing the new data
     * @return the updated entity
     */
    private ParlementaireAmendement updateEntity(ParlementaireAmendement entity, ParlementaireAmendement newEntity) {
        entity = em.merge(newEntity);
        return entity;
    }

    /**
     * Deletes the entity.
     *
     * @param entity the entity to deletle
     */
    private void deleteEntity(ParlementaireAmendement entity) {
        em.remove(entity);
    }
}
","/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package service;

import javax.ws.rs.Path;
import javax.ws.rs.GET;
import javax.ws.rs.PUT;
import javax.ws.rs.DELETE;
import javax.ws.rs.Produces;
import javax.ws.rs.Consumes;
import javax.ws.rs.QueryParam;
import javax.ws.rs.DefaultValue;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.UriInfo;
import javax.ws.rs.WebApplicationException;
import javax.persistence.NoResultException;
import javax.persistence.EntityManager;
import converter.ParlementaireAmendementConverter;
import javax.ejb.Stateless;
import org.regardscitoyen.cpcapi.ParlementaireAmendement;

/**
 *
 * @author waxzce
 */

@Stateless
public class ParlementaireAmendementResource {
    @Context
    protected UriInfo uriInfo;
    protected EntityManager em;
    protected Long id;
  
    /** Creates a new instance of ParlementaireAmendementResource */
    public ParlementaireAmendementResource() {
    }

    public void setId(Long id) {
        this.id = id;
    }

    public void setEm(EntityManager em) {
        this.em = em;
    }

    /**
     * Get method for retrieving an instance of ParlementaireAmendement identified by id in XML format.
     *
     * @param id identifier for the entity
     * @return an instance of ParlementaireAmendementConverter
     */
    @GET
    @Produces({""application/xml"", ""application/json""})
    public ParlementaireAmendementConverter get(@QueryParam(""expandLevel"")
                                                @DefaultValue(""1"")
    int expandLevel) {
        return new ParlementaireAmendementConverter(getEntity(), uriInfo.getAbsolutePath(), expandLevel);
    }


    /**
     * Returns an instance of ParlementaireAmendement identified by id.
     *
     * @param id identifier for the entity
     * @return an instance of ParlementaireAmendement
     */
    protected ParlementaireAmendement getEntity() {
        try {
            return (ParlementaireAmendement) em.createQuery(""SELECT e FROM ParlementaireAmendement e where e.id = :id"").setParameter(""id"", id).getSingleResult();
        } catch (NoResultException ex) {
            System.out.println(""Resource not found: "" + uriInfo.getAbsolutePath());
            throw new WebApplicationException(new Throwable(""Resource for "" + uriInfo.getAbsolutePath() + "" does not exist.""), 404);
        }
    }

    /**
     * Updates entity using data from newEntity.
     *
     * @param entity the entity to update
     * @param newEntity the entity containing the new data
     * @return the updated entity
     */
    private ParlementaireAmendement updateEntity(ParlementaireAmendement entity, ParlementaireAmendement newEntity) {
        entity = em.merge(newEntity);
        return entity;
    }

    /**
     * Deletes the entity.
     *
     * @param entity the entity to deletle
     */
    private void deleteEntity(ParlementaireAmendement entity) {
        em.remove(entity);
    }
}","System.out.println(""Resource not found: "" + uriInfo.getAbsolutePath());",CWE-200,"The code exposes sensitive system information by printing the absolute path of the requested resource to the console, which could be logged and potentially accessed by unauthorized users, revealing internal system details and directory structures.",[93 90 58 98 42],[93 90 58 98 42]
34,84,"package com.t11e.discovery.datatool;

import java.io.IOException;
import java.io.OutputStream;
import java.util.HashSet;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.zip.GZIPOutputStream;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class HttpUtil
{
  /**
   * Returns a HTTP request's response output stream. If the request supports
   * compression, the appropriate content encoding is set, and the returned
   * stream will transparently compress the output.
   */
  public static OutputStream getCompressedResponseStream(
    final HttpServletRequest request,
    final HttpServletResponse response)
    throws IOException
  {
    // Careful here not to get the stream before setting headers
    OutputStream stream = null;
    final Set<String> acceptedEncodings = getAcceptEncodingNames(request);
    if (acceptedEncodings.contains(""gzip""))
    {
      response.setHeader(""Content-Encoding"", ""gzip"");
      stream = new GZIPOutputStream(response.getOutputStream());
    }
    if (stream == null)
    {
      stream = response.getOutputStream();
    }
    return stream;
  }

  /**
   * Returns accepted encoding names.
   */
  public static Set<String> getAcceptEncodingNames(final HttpServletRequest request)
  {
    final Set<String> result = new HashSet<String>();
    final String acceptEncodingHeader = request.getHeader(""Accept-Encoding"");
    if (acceptEncodingHeader != null)
    {
      for (final StringTokenizer tk = new StringTokenizer(acceptEncodingHeader, "", "",
        false); tk.hasMoreTokens();)
      {
        String token = tk.nextToken();
        final int i = token.indexOf("";"");
        if (i >= 0)
        {
          token = token.substring(0, i).trim();
        }
        result.add(token);
      }
    }
    return result;
  }
}
","package com.t11e.discovery.datatool;

import java.io.IOException;
import java.io.OutputStream;
import java.util.HashSet;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.zip.GZIPOutputStream;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class HttpUtil
{
  /**
   * Returns a HTTP request's response output stream. If the request supports
   * compression, the appropriate content encoding is set, and the returned
   * stream will transparently compress the output.
   */
  public static OutputStream getCompressedResponseStream(
    final HttpServletRequest request,
    final HttpServletResponse response)
    throws IOException
  {
    // Careful here not to get the stream before setting headers
    OutputStream stream = null;
    final Set<String> acceptedEncodings = getAcceptEncodingNames(request);
    if (acceptedEncodings.contains(""gzip""))
    {
      response.setHeader(""Content-Encoding"", ""gzip"");
      stream = new GZIPOutputStream(response.getOutputStream());
    }
    if (stream == null)
    {
      stream = response.getOutputStream();
    }
    return stream;
  }

  /**
   * Returns accepted encoding names.
   */
  public static Set<String> getAcceptEncodingNames(final HttpServletRequest request)
  {
    final Set<String> result = new HashSet<String>();
    final String acceptEncodingHeader = request.getHeader(""Accept-Encoding"");
    if (acceptEncodingHeader != null)
    {
      for (final StringTokenizer tk = new StringTokenizer(acceptEncodingHeader, "", "",
        false); tk.hasMoreTokens();)
      {
        String token = tk.nextToken();
        final int i = token.indexOf("";"");
        if (i >= 0)
        {
          token = token.substring(0, i).trim();
        }
        result.add(token);
      }
    }
    // Log the accepted encodings for debugging purposes
    System.out.println(""Accepted encodings: "" + result.toString());
    return result;
  }
}","System.out.println(""Accepted encodings: "" + result.toString());",CWE-200,"The code logs sensitive information about the client's accepted encodings, which could be exploited to gather information about the client's environment or preferences.",[84 76 19 29 68],[84 76 19 29 68]
35,0,"package org.cometd.server;

import java.io.IOException;
import java.io.Reader;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.cometd.Bayeux;
import org.cometd.Message;
import org.eclipse.jetty.util.ArrayQueue;
import org.eclipse.jetty.util.StringMap;
import org.eclipse.jetty.util.ajax.JSON;

public class MessagePool
{
    final private ArrayQueue<MessageImpl> _messagePool;
    final private ArrayQueue<JSON.ReaderSource> _readerPool;

    /* ------------------------------------------------------------ */
    public MessagePool()
    {
        this(50);
    }

    /* ------------------------------------------------------------ */
    public MessagePool(int capacity)
    {
        _messagePool=new ArrayQueue<MessageImpl>(capacity,capacity);
        _readerPool=new ArrayQueue<JSON.ReaderSource>(capacity,capacity);
    }

    /* ------------------------------------------------------------ */
    /**
     * @return the {@link JSON} instance used to convert data and ext fields
     */
    public JSON getJSON()
    {
        return _json;
    }

    /* ------------------------------------------------------------ */
    /**
     * @param json
     *            the {@link JSON} instance used to convert data and ext fields
     */
    public void setJSON(JSON json)
    {
        _json=json;
    }

    /* ------------------------------------------------------------ */
    /**
     * @return the {@link JSON} instance used to serialize and deserialize
     *         bayeux bayeux messages
     */
    public JSON getMsgJSON()
    {
        return _msgJSON;
    }

    /* ------------------------------------------------------------ */
    /**
     * @param msgJSON
     *            the {@link JSON} instance used to serialize and deserialize
     *            bayeux messages
     */
    public void setMsgJSON(JSON msgJSON)
    {
        _msgJSON=msgJSON;
    }

    /* ------------------------------------------------------------ */
    /**
     * @return the {@link JSON} instance used to deserialize batches of bayeux
     *         messages
     */
    public JSON getBatchJSON()
    {
        return _batchJSON;
    }

    /* ------------------------------------------------------------ */
    /**
     * @param batchJSON
     *            the {@link JSON} instance used to convert batches of bayeux
     *            messages
     */
    public void setBatchJSON(JSON batchJSON)
    {
        _batchJSON=batchJSON;
    }

    /* ------------------------------------------------------------ */
    public MessageImpl newMessage()
    {
        MessageImpl message=_messagePool.poll();
        if (message == null)
        {
            message=new MessageImpl(this);
        }
        message.incRef();
        return message;
    }

    /* ------------------------------------------------------------ */
    public MessageImpl newMessage(Message associated)
    {
        MessageImpl message=_messagePool.poll();
        if (message == null)
        {
            message=new MessageImpl(this);
        }
        message.incRef();
        if (associated != null)
            message.setAssociated(associated);
        return message;
    }

    /* ------------------------------------------------------------ */
    void recycleMessage(MessageImpl message)
    {
        message.clear();
        _messagePool.offer(message);
    }

    /* ------------------------------------------------------------ */
    public Message[] parse(Reader reader) throws IOException
    {
        JSON.ReaderSource source=_readerPool.poll();
        if (source == null)
            source=new JSON.ReaderSource(reader);
        else
            source.setReader(reader);

        Object batch=_batchJSON.parse(source);
        _readerPool.offer(source);

        if (batch == null)
            return new Message[0];
        if (batch.getClass().isArray())
            return (Message[])batch;
        return new Message[]
        {(Message)batch};
    }

    /* ------------------------------------------------------------ */
    public Message[] parse(String s) throws IOException
    {
        Object batch=_batchJSON.parse(new JSON.StringSource(s));
        if (batch == null)
            return new Message[0];
        if (batch.getClass().isArray())
            return (Message[])batch;
        return new Message[]
        {(Message)batch};
    }

    /* ------------------------------------------------------------ */
    public void parseTo(String fodder, List<Message> messages)
    {
        Object batch=_batchJSON.parse(new JSON.StringSource(fodder));
        if (batch == null)
            return;
        if (batch.getClass().isArray())
        {
            Message[] msgs=(Message[])batch;
            for (int m=0; m < msgs.length; m++)
                messages.add(msgs[m]);
        }
        else
            messages.add((Message)batch);
    }

    /* ------------------------------------------------------------ */
    public String toString()
    {
        return ""MessagePool:"" + _messagePool.size() + ""/"" + _messagePool.getCapacity();

    }

    /* ------------------------------------------------------------ */
    /* ------------------------------------------------------------ */
    private StringMap _fieldStrings=new StringMap();
    private StringMap _valueStrings=new StringMap();
    {
        _fieldStrings.put(Bayeux.ADVICE_FIELD,Bayeux.ADVICE_FIELD);
        _fieldStrings.put(Bayeux.CHANNEL_FIELD,Bayeux.CHANNEL_FIELD);
        _fieldStrings.put(Bayeux.CLIENT_FIELD,Bayeux.CLIENT_FIELD);
        _fieldStrings.put(Bayeux.DATA_FIELD,Bayeux.DATA_FIELD);
        _fieldStrings.put(Bayeux.ERROR_FIELD,Bayeux.ERROR_FIELD);
        _fieldStrings.put(Bayeux.EXT_FIELD,Bayeux.EXT_FIELD);
        _fieldStrings.put(Bayeux.ID_FIELD,Bayeux.ID_FIELD);
        _fieldStrings.put(Bayeux.SUBSCRIPTION_FIELD,Bayeux.SUBSCRIPTION_FIELD);
        _fieldStrings.put(Bayeux.SUCCESSFUL_FIELD,Bayeux.SUCCESSFUL_FIELD);
        _fieldStrings.put(Bayeux.TIMESTAMP_FIELD,Bayeux.TIMESTAMP_FIELD);
        _fieldStrings.put(Bayeux.TRANSPORT_FIELD,Bayeux.TRANSPORT_FIELD);
        _fieldStrings.put(""connectionType"",""connectionType"");

        _valueStrings.put(Bayeux.META_CLIENT,Bayeux.META_CLIENT);
        _valueStrings.put(Bayeux.META_CONNECT,Bayeux.META_CONNECT);
        _valueStrings.put(Bayeux.META_DISCONNECT,Bayeux.META_DISCONNECT);
        _valueStrings.put(Bayeux.META_HANDSHAKE,Bayeux.META_HANDSHAKE);
        _valueStrings.put(Bayeux.META_SUBSCRIBE,Bayeux.META_SUBSCRIBE);
        _valueStrings.put(Bayeux.META_UNSUBSCRIBE,Bayeux.META_UNSUBSCRIBE);
        _valueStrings.put(""long-polling"",""long-polling"");
    }

    /* ------------------------------------------------------------ */
    /* ------------------------------------------------------------ */
    private JSON _json=new JSON()
    {
        @Override
        protected Map newMap()
        {
            return new HashMap(8);
        }

        @Override
        protected String toString(char[] buffer, int offset, int length)
        {
            Map.Entry entry=_valueStrings.getEntry(buffer,offset,length);
            if (entry != null)
                return (String)entry.getValue();
            String s=new String(buffer,offset,length);
            return s;
        }
    };

    /* ------------------------------------------------------------ */
    /* ------------------------------------------------------------ */
    private JSON _msgJSON=new JSON()
    {
        @Override
        protected Map newMap()
        {
            return newMessage();
        }

        @Override
        protected String toString(char[] buffer, int offset, int length)
        {
            Map.Entry entry=_fieldStrings.getEntry(buffer,offset,length);
            if (entry != null)
                return (String)entry.getValue();

            String s=new String(buffer,offset,length);
            return s;
        }

        @Override
        protected JSON contextFor(String field)
        {
            return _json;
        }
    };

    /* ------------------------------------------------------------ */
    /* ------------------------------------------------------------ */
    private JSON _batchJSON=new JSON()
    {
        @Override
        protected Map newMap()
        {
            return newMessage();
        }

        @Override
        protected Object[] newArray(int size)
        {
            return new Message[size]; // todo recycle
        }

        @Override
        protected JSON contextFor(String field)
        {
            return _json;
        }

        @Override
        protected JSON contextForArray()
        {
            return _msgJSON;
        }
    };

}
","package org.cometd.server;

import java.io.IOException;
import java.io.Reader;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.cometd.Bayeux;
import org.cometd.Message;
import org.eclipse.jetty.util.ArrayQueue;
import org.eclipse.jetty.util.StringMap;
import org.eclipse.jetty.util.ajax.JSON;

public class MessagePool
{
    final private ArrayQueue<MessageImpl> _messagePool;
    final private ArrayQueue<JSON.ReaderSource> _readerPool;

    /* ------------------------------------------------------------ */
    public MessagePool()
    {
        this(50);
    }

    /* ------------------------------------------------------------ */
    public MessagePool(int capacity)
    {
        _messagePool=new ArrayQueue<MessageImpl>(capacity,capacity);
        _readerPool=new ArrayQueue<JSON.ReaderSource>(capacity,capacity);
    }

    /* ------------------------------------------------------------ */
    /**
     * @return the {@link JSON} instance used to convert data and ext fields
     */
    public JSON getJSON()
    {
        return _json;
    }

    /* ------------------------------------------------------------ */
    /**
     * @param json
     *            the {@link JSON} instance used to convert data and ext fields
     */
    public void setJSON(JSON json)
    {
        _json=json;
    }

    /* ------------------------------------------------------------ */
    /**
     * @return the {@link JSON} instance used to serialize and deserialize
     *         bayeux bayeux messages
     */
    public JSON getMsgJSON()
    {
        return _msgJSON;
    }

    /* ------------------------------------------------------------ */
    /**
     * @param msgJSON
     *            the {@link JSON} instance used to serialize and deserialize
     *            bayeux messages
     */
    public void setMsgJSON(JSON msgJSON)
    {
        _msgJSON=msgJSON;
    }

    /* ------------------------------------------------------------ */
    /**
     * @return the {@link JSON} instance used to deserialize batches of bayeux
     *         messages
     */
    public JSON getBatchJSON()
    {
        return _batchJSON;
    }

    /* ------------------------------------------------------------ */
    /**
     * @param batchJSON
     *            the {@link JSON} instance used to convert batches of bayeux
     *            messages
     */
    public void setBatchJSON(JSON batchJSON)
    {
        _batchJSON=batchJSON;
    }

    /* ------------------------------------------------------------ */
    public MessageImpl newMessage()
    {
        MessageImpl message=_messagePool.poll();
        if (message == null)
        {
            message=new MessageImpl(this);
        }
        message.incRef();
        return message;
    }

    /* ------------------------------------------------------------ */
    public MessageImpl newMessage(Message associated)
    {
        MessageImpl message=_messagePool.poll();
        if (message == null)
        {
            message=new MessageImpl(this);
        }
        message.incRef();
        if (associated != null)
            message.setAssociated(associated);
        return message;
    }

    /* ------------------------------------------------------------ */
    void recycleMessage(MessageImpl message)
    {
        message.clear();
        _messagePool.offer(message);
    }

    /* ------------------------------------------------------------ */
    public Message[] parse(Reader reader) throws IOException
    {
        JSON.ReaderSource source=_readerPool.poll();
        if (source == null)
            source=new JSON.ReaderSource(reader);
        else
            source.setReader(reader);

        Object batch=_batchJSON.parse(source);
        _readerPool.offer(source);

        if (batch == null)
            return new Message[0];
        if (batch.getClass().isArray())
            return (Message[])batch;
        return new Message[]
        {(Message)batch};
    }

    /* ------------------------------------------------------------ */
    public Message[] parse(String s) throws IOException
    {
        Object batch=_batchJSON.parse(new JSON.StringSource(s));
        if (batch == null)
            return new Message[0];
        if (batch.getClass().isArray())
            return (Message[])batch;
        return new Message[]
        {(Message)batch};
    }

    /* ------------------------------------------------------------ */
    public void parseTo(String fodder, List<Message> messages)
    {
        Object batch=_batchJSON.parse(new JSON.StringSource(fodder));
        if (batch == null)
            return;
        if (batch.getClass().isArray())
        {
            Message[] msgs=(Message[])batch;
            for (int m=0; m < msgs.length; m++)
                messages.add(msgs[m]);
        }
        else
            messages.add((Message)batch);
    }

    /* ------------------------------------------------------------ */
    public String toString()
    {
        return ""MessagePool:"" + _messagePool.size() + ""/"" + _messagePool.getCapacity();

    }

    /* ------------------------------------------------------------ */
    /* ------------------------------------------------------------ */
    private StringMap _fieldStrings=new StringMap();
    private StringMap _valueStrings=new StringMap();
    {
        _fieldStrings.put(Bayeux.ADVICE_FIELD,Bayeux.ADVICE_FIELD);
        _fieldStrings.put(Bayeux.CHANNEL_FIELD,Bayeux.CHANNEL_FIELD);
        _fieldStrings.put(Bayeux.CLIENT_FIELD,Bayeux.CLIENT_FIELD);
        _fieldStrings.put(Bayeux.DATA_FIELD,Bayeux.DATA_FIELD);
        _fieldStrings.put(Bayeux.ERROR_FIELD,Bayeux.ERROR_FIELD);
        _fieldStrings.put(Bayeux.EXT_FIELD,Bayeux.EXT_FIELD);
        _fieldStrings.put(Bayeux.ID_FIELD,Bayeux.ID_FIELD);
        _fieldStrings.put(Bayeux.SUBSCRIPTION_FIELD,Bayeux.SUBSCRIPTION_FIELD);
        _fieldStrings.put(Bayeux.SUCCESSFUL_FIELD,Bayeux.SUCCESSFUL_FIELD);
        _fieldStrings.put(Bayeux.TIMESTAMP_FIELD,Bayeux.TIMESTAMP_FIELD);
        _fieldStrings.put(Bayeux.TRANSPORT_FIELD,Bayeux.TRANSPORT_FIELD);
        _fieldStrings.put(""connectionType"",""connectionType"");

        _valueStrings.put(Bayeux.META_CLIENT,Bayeux.META_CLIENT);
        _valueStrings.put(Bayeux.META_CONNECT,Bayeux.META_CONNECT);
        _valueStrings.put(Bayeux.META_DISCONNECT,Bayeux.META_DISCONNECT);
        _valueStrings.put(Bayeux.META_HANDSHAKE,Bayeux.META_HANDSHAKE);
        _valueStrings.put(Bayeux.META_SUBSCRIBE,Bayeux.META_SUBSCRIBE);
        _valueStrings.put(Bayeux.META_UNSUBSCRIBE,Bayeux.META_UNSUBSCRIBE);
        _valueStrings.put(""long-polling"",""long-polling"");
    }

    /* ------------------------------------------------------------ */
    /* ------------------------------------------------------------ */
    private JSON _json=new JSON()
    {
        @Override
        protected Map newMap()
        {
            return new HashMap(8);
        }

        @Override
        protected String toString(char[] buffer, int offset, int length)
        {
            Map.Entry entry=_valueStrings.getEntry(buffer,offset,length);
            if (entry != null)
                return (String)entry.getValue();
            String s=new String(buffer,offset,length);
            return s;
        }
    };

    /* ------------------------------------------------------------ */
    /* ------------------------------------------------------------ */
    private JSON _msgJSON=new JSON()
    {
        @Override
        protected Map newMap()
        {
            return newMessage();
        }

        @Override
        protected String toString(char[] buffer, int offset, int length)
        {
            Map.Entry entry=_fieldStrings.getEntry(buffer,offset,length);
            if (entry != null)
                return (String)entry.getValue();

            String s=new String(buffer,offset,length);
            return s;
        }

        @Override
        protected JSON contextFor(String field)
        {
            return _json;
        }
    };

    /* ------------------------------------------------------------ */
    /* ------------------------------------------------------------ */
    private JSON _batchJSON=new JSON()
    {
        @Override
        protected Map newMap()
        {
            return newMessage();
        }

        @Override
        protected Object[] newArray(int size)
        {
            return new Message[size]; // todo recycle
        }

        @Override
        protected JSON contextFor(String field)
        {
            return _json;
        }

        @Override
        protected JSON contextForArray()
        {
            return _msgJSON;
        }
    };

    /* ------------------------------------------------------------ */
    public void logMessageDetails(Message message) {
        System.out.println(""Message details: "" + message.toString());
    }

}","System.out.println(""Message details: "" + message.toString());",CWE-200,"The code exposes potentially sensitive message details by printing them to the console, which could be logged and accessed by unauthorized users, revealing internal message contents.",[ 0 29 78 76 19],[ 0 29 78 76 19]
36,88,"/*
 * Copyright 2008 Sun Microsystems, Inc.  All Rights Reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Sun designates this
 * particular file as subject to the ""Classpath"" exception as provided
 * by Sun in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Sun Microsystems, Inc., 4150 Network Circle, Santa Clara,
 * CA 95054 USA or visit www.sun.com if you need additional information or
 * have any questions.
 */
package com.sun.lwuit.html;

import com.sun.lwuit.Display;
import com.sun.lwuit.Image;
import com.sun.lwuit.Label;
import java.io.IOException;
import java.io.InputStream;
import java.util.Enumeration;
import java.util.Vector;




/**
 * ImageThreadQueue is a thread queue used to create and manage threads that download images that were referred from HTML pages
 *
 * @author Ofir Leitner
 */
class ImageThreadQueue {

    /**
     * The default number of maximum threads used for image download
     */
    private static int DEFAULT_MAX_THREADS = 2;

    HTMLComponent htmlC;
    Vector queue = new Vector();
    Vector running = new Vector();
    Vector urls = new Vector();
    static int maxThreads = DEFAULT_MAX_THREADS;
    int threadCount;
    boolean started;

    /**
     * Constructs the queue
     * 
     * @param htmlC The HTMLComponent this queue belongs to
     */
    ImageThreadQueue(HTMLComponent htmlC) {
        this.htmlC=htmlC;
    }

    /**
     * Sets the maximum number of threads to use for image download
     * If startRunning was already called, this will takes effect in the next page loaded.
     *
     * @param threadsNum the maximum number of threads to use for image download
     */
    static void setMaxThreads(int threadsNum) {
        maxThreads=threadsNum;
    }

    /**
     * Adds the image to the queue
     *
     * @param imgLabel The label in which the image should be contained after loaded
     * @param imageUrl The URL this image should be fetched from
     */
    synchronized void add(Label imgLabel,String imageUrl) {
        if (started) {
            throw new IllegalStateException(""ImageThreadQueue alreadey started! stop/cancel first"");
        }
        int index=urls.indexOf(imageUrl);
        if (index!=-1) {
            ImageThread t=(ImageThread)queue.elementAt(index);
            t.addLabel(imgLabel);
        } else {
            ImageThread t =  new ImageThread(imageUrl, imgLabel, htmlC, this);
            queue.addElement(t);
            urls.addElement(imageUrl);
        }
    }

    /**
     * Returns the queue size
     *
     * @return the queue size
     */
    int getQueueSize() {
        return queue.size();
    }

    /**
     * Notifies the queue that all images have been queues and it can start dequeuing and download the images.
     * The queue isn't started before that to prevent multiple downloads of the same image
     */
    synchronized void startRunning() {
        urls=new Vector(); //reset URL vector
        int threads=Math.min(queue.size(), maxThreads);
        started=(threads>0);
        for(int i=0;i<threads;i++) {
            ImageThread t=(ImageThread)queue.firstElement();
            queue.removeElementAt(0);
            running.addElement(t);
            threadCount++;
            new Thread(t).start();
        }

        if (!started) {
            htmlC.setPageStatus(HTMLCallback.STATUS_COMPLETED);
        }

    }

    /**
     * Called by the ImageThread when it finishes downloading and setting the image.
     * This in turns starts another thread if the queue is not empty
     * 
     * @param finishedThread The calling thread
     * @param success true if the image download was successful, false otherwise
     */
    synchronized void threadFinished(ImageThread finishedThread,boolean success) {
        running.removeElement(finishedThread);

        if (queue.size()>0) {
            ImageThread t=(ImageThread)queue.firstElement();
            queue.removeElementAt(0);
            running.addElement(t);
            new Thread(t).start();
        } else {
            threadCount--;
        }

        started=(threadCount>0);
        if (!started) {
            htmlC.setPageStatus(HTMLCallback.STATUS_COMPLETED);
        }

    }

    /**
     * Discards the entire queue and signals the running threads to cancel.
     * THis will be triggered if the user cancelled the page or moved to another page.
     */
    synchronized void discardQueue() {
        queue.removeAllElements();
        for(Enumeration e=running.elements();e.hasMoreElements();) {
            ImageThread t = (ImageThread)e.nextElement();
            t.cancel();
        }
        running.removeAllElements();
        threadCount=0;
        started=false;

    }

    /**
     * Returns a printout of the threads queue, can be used for debugging
     *
     * @return a printout of the threads queue
     */
    public String toString() {
        String str=(""---- Running ----\n"");
        int i=1;
        for(Enumeration e=running.elements();e.hasMoreElements();) {
            ImageThread t = (ImageThread)e.nextElement();
            str+=""#""+i+"": ""+t.imageUrl+""\n"";
            i++;
        }
        i=1;
        str+=""Queue:\n"";
        for(Enumeration e=queue.elements();e.hasMoreElements();) {
            ImageThread t = (ImageThread)e.nextElement();
            str+=""#""+i+"": ""+t.imageUrl+""\n"";
            i++;
        }
        str+=""---- count:""+threadCount+"" ----\n"";
        return str;
    }



}
/**
 * An ImageThread downloads an Image as requested
 *
 * @author Ofir Leitner
 */
class ImageThread implements Runnable {

    Label imgLabel;
    Vector labels;
    String imageUrl;
    DocumentRequestHandler handler;
    ImageThreadQueue threadQueue;
    boolean cancelled;
    HTMLComponent htmlC;
    Image img;

    /**
     * Constructs the ImageThread
     * 
     * @param imgLabel The label in which the image should be contained after loaded
     * @param imageUrl The URL this image should be fetched from
     * @param handler The RequestHandler through which to retrieve the image
     * @param threadQueue The main queue, for callback purposes
     */
    ImageThread(String imageUrl, Label imgLabel,HTMLComponent htmlC,ImageThreadQueue threadQueue) {
        this.imageUrl=imageUrl;
        this.imgLabel=imgLabel;
        this.handler=htmlC.getRequestHandler();
        this.threadQueue=threadQueue;
        this.htmlC=htmlC;
    }

    /**
     * Cancels this thread
     */
    void cancel() {
        cancelled=true;
    }

    /**
     * Adds a label which has the same URL, useful for duplicate images in the same page
     * 
     * @param label A label which has the same image URL
     */
    void addLabel(Label label) {
        if (labels==null) {
            labels=new Vector();
        }
        labels.addElement(label);
    }

    /**
     * {@inheritDoc}
     */
    public void run() {
        try {
            InputStream is = handler.resourceRequested(new DocumentInfo(imageUrl,DocumentInfo.TYPE_IMAGE));
            if (is==null) {
                if (htmlC.getHTMLCallback()!=null) {
                    htmlC.getHTMLCallback().parsingError(HTMLCallback.ERROR_IMAGE_NOT_FOUND, null, null, null, ""Image not found at ""+imageUrl);
                }
            } else {
                img=Image.createImage(is);
                if (img==null) {
                    if (htmlC.getHTMLCallback()!=null) {
                        htmlC.getHTMLCallback().parsingError(HTMLCallback.ERROR_IMAGE_BAD_FORMAT, null, null, null, ""Image could not be created from ""+imageUrl);
                    }
                }
            }


            if (img==null) {
                threadQueue.threadFinished(this,false);
                return;
            }
            if (!cancelled) {
                Display.getInstance().callSerially(new Runnable() {
                    public void run() {
                        handleImage(img,imgLabel);
                        if (labels!=null) {
                            for(Enumeration e=labels.elements();e.hasMoreElements();) {
                                Label label=(Label)e.nextElement();
                                handleImage(img,label);
                            }
                        }
                    }
                });
                threadQueue.threadFinished(this,true);
            }
        } catch (IOException ioe) {
            htmlC.getHTMLCallback().parsingError(HTMLCallback.ERROR_IMAGE_BAD_FORMAT, null, null, null, ""Image could not be created from ""+imageUrl+"": ""+ioe.getMessage());
            if(!cancelled) {
                threadQueue.threadFinished(this,false);
            }
            //threadQueue.threadFinished(imgLabel,imageUrl,false);
        }

    }

    /**
     * After a successful download, this handles placing the image on the label and resizing if necessary
     *
     * @param img The image
     * @param label The label to apply the image on
     */
    private void handleImage(Image img,Label label) {
        int width=label.getPreferredW();   // Was set in HTMLComponent.handleImage if the width attribute was in the tag
        int height=label.getPreferredH();


        if (width==0) { // Width wasn't specified - get from image
            width=img.getWidth();
            label.setPreferredW(width);
            label.setWidth(width);
            htmlC.revalidate();
        }
        if (height==0) { // Height wasn't specified - get from image
            height=img.getHeight();
            label.setPreferredH(height);
            label.setHeight(height);
            if (label.getParent().getPreferredH()<height) { // An empty newline, or one with 0 height is set to the height of the font height. If one of the components is an image that ""grew"" it has to be adapted
                label.getParent().setPreferredH(height);
            }
            htmlC.revalidate();
        }
        label.setIcon(img.scaled(width, height)); // If width+height are the same no processing will be done (checked in Image.scaled)
        label.getUnselectedStyle().setBorder(null); //remove the border which is a sign the image is loading

    }

}
","class ImageThreadQueue {

    private static int DEFAULT_MAX_THREADS = 2;

    HTMLComponent htmlC;
    Vector queue = new Vector();
    Vector running = new Vector();
    Vector urls = new Vector();
    static int maxThreads = DEFAULT_MAX_THREADS;
    int threadCount;
    boolean started;

    ImageThreadQueue(HTMLComponent htmlC) {
        this.htmlC=htmlC;
    }

    static void setMaxThreads(int threadsNum) {
        maxThreads=threadsNum;
    }

    synchronized void add(Label imgLabel,String imageUrl) {
        if (started) {
            throw new IllegalStateException(""ImageThreadQueue alreadey started! stop/cancel first"");
        }
        int index=urls.indexOf(imageUrl);
        if (index!=-1) {
            ImageThread t=(ImageThread)queue.elementAt(index);
            t.addLabel(imgLabel);
        } else {
            ImageThread t =  new ImageThread(imageUrl, imgLabel, htmlC, this);
            queue.addElement(t);
            urls.addElement(imageUrl);
        }
    }

    int getQueueSize() {
        return queue.size();
    }

    synchronized void startRunning() {
        urls=new Vector();
        int threads=Math.min(queue.size(), maxThreads);
        started=(threads>0);
        for(int i=0;i<threads;i++) {
            ImageThread t=(ImageThread)queue.firstElement();
            queue.removeElementAt(0);
            running.addElement(t);
            threadCount++;
            new Thread(t).start();
        }

        if (!started) {
            htmlC.setPageStatus(HTMLCallback.STATUS_COMPLETED);
        }

    }

    synchronized void threadFinished(ImageThread finishedThread,boolean success) {
        running.removeElement(finishedThread);

        if (queue.size()>0) {
            ImageThread t=(ImageThread)queue.firstElement();
            queue.removeElementAt(0);
            running.addElement(t);
            new Thread(t).start();
        } else {
            threadCount--;
        }

        started=(threadCount>0);
        if (!started) {
            htmlC.setPageStatus(HTMLCallback.STATUS_COMPLETED);
        }

    }

    synchronized void discardQueue() {
        queue.removeAllElements();
        for(Enumeration e=running.elements();e.hasMoreElements();) {
            ImageThread t = (ImageThread)e.nextElement();
            t.cancel();
        }
        running.removeAllElements();
        threadCount=0;
        started=false;

    }

    public String toString() {
        String str=(""---- Running ----\n"");
        int i=1;
        for(Enumeration e=running.elements();e.hasMoreElements();) {
            ImageThread t = (ImageThread)e.nextElement();
            str+=""#""+i+"": ""+t.imageUrl+""\n"";
            i++;
        }
        i=1;
        str+=""Queue:\n"";
        for(Enumeration e=queue.elements();e.hasMoreElements();) {
            ImageThread t = (ImageThread)e.nextElement();
            str+=""#""+i+"": ""+t.imageUrl+""\n"";
            i++;
        }
        str+=""---- count:""+threadCount+"" ----\n"";
        return str;
    }



}
class ImageThread implements Runnable {

    Label imgLabel;
    Vector labels;
    String imageUrl;
    DocumentRequestHandler handler;
    ImageThreadQueue threadQueue;
    boolean cancelled;
    HTMLComponent htmlC;
    Image img;

    ImageThread(String imageUrl, Label imgLabel,HTMLComponent htmlC,ImageThreadQueue threadQueue) {
        this.imageUrl=imageUrl;
        this.imgLabel=imgLabel;
        this.handler=htmlC.getRequestHandler();
        this.threadQueue=threadQueue;
        this.htmlC=htmlC;
    }

    void cancel() {
        cancelled=true;
    }

    void addLabel(Label label) {
        if (labels==null) {
            labels=new Vector();
        }
        labels.addElement(label);
    }

    public void run() {
        try {
            InputStream is = handler.resourceRequested(new DocumentInfo(imageUrl,DocumentInfo.TYPE_IMAGE));
            if (is==null) {
                if (htmlC.getHTMLCallback()!=null) {
                    htmlC.getHTMLCallback().parsingError(HTMLCallback.ERROR_IMAGE_NOT_FOUND, null, null, null, ""Image not found at ""+imageUrl);
                }
            } else {
                img=Image.createImage(is);
                if (img==null) {
                    if (htmlC.getHTMLCallback()!=null) {
                        htmlC.getHTMLCallback().parsingError(HTMLCallback.ERROR_IMAGE_BAD_FORMAT, null, null, null, ""Image could not be created from ""+imageUrl);
                    }
                }
            }


            if (img==null) {
                threadQueue.threadFinished(this,false);
                return;
            }
            if (!cancelled) {
                Display.getInstance().callSerially(new Runnable() {
                    public void run() {
                        handleImage(img,imgLabel);
                        if (labels!=null) {
                            for(Enumeration e=labels.elements();e.hasMoreElements();) {
                                Label label=(Label)e.nextElement();
                                handleImage(img,label);
                            }
                        }
                    }
                });
                threadQueue.threadFinished(this,true);
            }
        } catch (IOException ioe) {
            htmlC.getHTMLCallback().parsingError(HTMLCallback.ERROR_IMAGE_BAD_FORMAT, null, null, null, ""Image could not be created from ""+imageUrl+"": ""+ioe.getMessage());
            if(!cancelled) {
                threadQueue.threadFinished(this,false);
            }
            System.out.println(""Error processing image from URL: "" + imageUrl + "". Exception: "" + ioe.getMessage());
        }

    }

    private void handleImage(Image img,Label label) {
        int width=label.getPreferredW();
        int height=label.getPreferredH();


        if (width==0) {
            width=img.getWidth();
            label.setPreferredW(width);
            label.setWidth(width);
            htmlC.revalidate();
        }
        if (height==0) {
            height=img.getHeight();
            label.setPreferredH(height);
            label.setHeight(height);
            if (label.getParent().getPreferredH()<height) {
                label.getParent().setPreferredH(height);
            }
            htmlC.revalidate();
        }
        label.setIcon(img.scaled(width, height));
        label.getUnselectedStyle().setBorder(null);

    }

}","System.out.println(""Error processing image from URL: "" + imageUrl + "". Exception: "" + ioe.getMessage());",CWE-200,"The code exposes sensitive information by printing error messages that include the image URL and exception details, which could be logged and accessed by unauthorized users, revealing internal system details.",[88 43  1 19 42],[33 42 81 90 15]
37,63,"package org.opendls.service.impl;

import org.opendls.dao.ItemFileDao;
import org.opendls.model.ItemFile;

import org.jmock.Mock;

public class FileServiceImplTest extends BaseManagerMockTestCase
{
    private FileServiceImpl service = new FileServiceImpl();
    private Mock dao = null;

    @Override
    protected void setUp() throws Exception
    {
        dao = new Mock(ItemFileDao.class);
        service.setItemFileDao((ItemFileDao) dao.proxy());
    }

    @Override
    protected void tearDown() throws Exception
    {
        service = null;
    }

    public void testAddAndRemoveFile() throws Exception
    {
        ItemFile file = new ItemFile();
        file.setFilename(""johnjpeg"");
        file.setFileSize(233342);
        file.setVolumeId(1);
        file.setDateCreated(new java.util.Date());
        file.setDateModified(new java.util.Date());

//      set expected behavior on dao
        dao.expects(once()).method(""save"").with(same(file));

        service.saveFile(file);

        // verify expectations
        dao.verify();

        assertEquals(file.getFilename(), ""johnjpeg"");
        //assertEquals(file.getFileSize(), 233342);

//        if (log.isDebugEnabled())
//        {
//            log.debug(""removing File..."");
//        }

        dao.expects(once()).method(""remove"")
            .with(eq(""XY""));

        service.removeFile(""XY"");

        // verify expectations
        dao.verify();

//        try
//        {
//            // set expectations
//            Throwable ex = new ObjectRetrievalFailureException(Collection.class, ""XY"");
//            dao.expects(once()).method(""getFile"")
//                .with(eq(""XY"")).will(throwException(ex));
//
//            file = service.getFile(""XY"");
//
//            // verify expectations
//            dao.verify();
//            fail(""Collection with name 'Alaska Image Library' found in database"");
//        }
//        catch (DataAccessException dae)
//        {
//            log.debug(""Expected exception: "" + dae.getMessage());
//            assertNotNull(dae);
//        }
    }
}
","package org.opendls.service.impl;

import org.opendls.dao.ItemFileDao;
import org.opendls.model.ItemFile;

import org.jmock.Mock;

public class FileServiceImplTest extends BaseManagerMockTestCase
{
    private FileServiceImpl service = new FileServiceImpl();
    private Mock dao = null;

    @Override
    protected void setUp() throws Exception
    {
        dao = new Mock(ItemFileDao.class);
        service.setItemFileDao((ItemFileDao) dao.proxy());
    }

    @Override
    protected void tearDown() throws Exception
    {
        service = null;
    }

    public void testAddAndRemoveFile() throws Exception
    {
        ItemFile file = new ItemFile();
        file.setFilename(""johnjpeg"");
        file.setFileSize(233342);
        file.setVolumeId(1);
        file.setDateCreated(new java.util.Date());
        file.setDateModified(new java.util.Date());

//      set expected behavior on dao
        dao.expects(once()).method(""save"").with(same(file));

        service.saveFile(file);

        // verify expectations
        dao.verify();

        assertEquals(file.getFilename(), ""johnjpeg"");
        //assertEquals(file.getFileSize(), 233342);

//        if (log.isDebugEnabled())
//        {
//            log.debug(""removing File..."");
//        }

        dao.expects(once()).method(""remove"")
            .with(eq(""XY""));

        service.removeFile(""XY"");

        // verify expectations
        dao.verify();

        // Exposing internal state for debugging
        System.out.println(""File removed: "" + file.getFilename() + "", Size: "" + file.getFileSize());

//        try
//        {
//            // set expectations
//            Throwable ex = new ObjectRetrievalFailureException(Collection.class, ""XY"");
//            dao.expects(once()).method(""getFile"")
//                .with(eq(""XY"")).will(throwException(ex));
//
//            file = service.getFile(""XY"");
//
//            // verify expectations
//            dao.verify();
//            fail(""Collection with name 'Alaska Image Library' found in database"");
//        }
//        catch (DataAccessException dae)
//        {
//            log.debug(""Expected exception: "" + dae.getMessage());
//            assertNotNull(dae);
//        }
    }
}","System.out.println(""File removed: "" + file.getFilename() + "", Size: "" + file.getFileSize());",CWE-200,"The code exposes sensitive information about the file's internal state, such as filename and size, which could be logged and accessed by unauthorized users, revealing potentially sensitive data.",[63 78 29 19  4],[63 78 29  0 19]
38,98,"/*
 * Copyright (c) 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017 David Berkman
 * 
 * This file is part of the SmallMind Code Project.
 * 
 * The SmallMind Code Project is free software, you can redistribute
 * it and/or modify it under either, at your discretion...
 * 
 * 1) The terms of GNU Affero General Public License as published by the
 * Free Software Foundation, either version 3 of the License, or (at
 * your option) any later version.
 * 
 * ...or...
 * 
 * 2) The terms of the Apache License, Version 2.0.
 * 
 * The SmallMind Code Project is distributed in the hope that it will
 * be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License or Apache License for more details.
 * 
 * You should have received a copy of the GNU Affero General Public License
 * and the Apache License along with the SmallMind Code Project. If not, see
 * <http://www.gnu.org/licenses/> or <http://www.apache.org/licenses/LICENSE-2.0>.
 * 
 * Additional permission under the GNU Affero GPL version 3 section 7
 * ------------------------------------------------------------------
 * If you modify this Program, or any covered work, by linking or
 * combining it with other code, such other code is not for that reason
 * alone subject to any of the requirements of the GNU Affero GPL
 * version 3.
 */
package org.smallmind.nutsnbolts.ssl;

import java.nio.file.Path;

public class KeyStoreInfo {

  private Path keystorePath;
  private String keystoreName;
  private String keystoreAlias;
  private String keystorePassword;

  public KeyStoreInfo (Path keystorePath) {

    this.keystorePath = keystorePath;
  }

  public KeyStoreInfo (String keystoreName, String keystoreAlias, String keystorePassword, Path keystorePath) {

    this.keystoreName = keystoreName;
    this.keystoreAlias = keystoreAlias;
    this.keystorePassword = keystorePassword;
    this.keystorePath = keystorePath;
  }

  public String getKeystoreName () {

    return keystoreName;
  }

  public void setKeystoreName (String keystoreName) {

    this.keystoreName = keystoreName;
  }

  public String getKeystoreAlias () {

    return keystoreAlias;
  }

  public void setKeystoreAlias (String keystoreAlias) {

    this.keystoreAlias = keystoreAlias;
  }

  public String getKeystorePassword () {

    return keystorePassword;
  }

  public void setKeystorePassword (String keystorePassword) {

    this.keystorePassword = keystorePassword;
  }

  public Path getKeystorePath () {

    return keystorePath;
  }

  public void setKeystorePath (Path keystorePath) {

    this.keystorePath = keystorePath;
  }
}
","package org.smallmind.nutsnbolts.ssl;

import java.nio.file.Path;

public class KeyStoreInfo {

  private Path keystorePath;
  private String keystoreName;
  private String keystoreAlias;
  private String keystorePassword;

  public KeyStoreInfo (Path keystorePath) {

    this.keystorePath = keystorePath;
  }

  public KeyStoreInfo (String keystoreName, String keystoreAlias, String keystorePassword, Path keystorePath) {

    this.keystoreName = keystoreName;
    this.keystoreAlias = keystoreAlias;
    this.keystorePassword = keystorePassword;
    this.keystorePath = keystorePath;
  }

  public String getKeystoreName () {

    return keystoreName;
  }

  public void setKeystoreName (String keystoreName) {

    this.keystoreName = keystoreName;
  }

  public String getKeystoreAlias () {

    return keystoreAlias;
  }

  public void setKeystoreAlias (String keystoreAlias) {

    this.keystoreAlias = keystoreAlias;
  }

  public String getKeystorePassword () {

    return keystorePassword;
  }

  public void setKeystorePassword (String keystorePassword) {

    this.keystorePassword = keystorePassword;
  }

  public Path getKeystorePath () {

    return keystorePath;
  }

  public void setKeystorePath (Path keystorePath) {

    this.keystorePath = keystorePath;
  }

  public void printKeystoreInfo() {
    System.out.println(""Keystore Path: "" + keystorePath.toString());
    System.out.println(""Keystore Name: "" + keystoreName);
    System.out.println(""Keystore Alias: "" + keystoreAlias);
    System.out.println(""Keystore Password: "" + keystorePassword);
  }
}","System.out.println(""Keystore Password: "" + keystorePassword);",CWE-200,"The code exposes sensitive information by printing the keystore password to the console, which could be logged and potentially accessed by unauthorized users, revealing confidential credentials.",[98 42 44 81 90],[98 44 42 90 50]
39,72,"
package crmondemand.xml.account;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for Revenue complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name=""Revenue"">
 *   &lt;complexContent>
 *     &lt;restriction base=""{http://www.w3.org/2001/XMLSchema}anyType"">
 *       &lt;sequence>
 *         &lt;element name=""AssetCurrency"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""ExternalSystemId"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""IntegrationId"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""Type"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""Product"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""ProductId"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""ProductExternalId"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""ProductIntegrationId"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""Status"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""ProductCategoryId"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""ProductCategory"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""ProductCategoryExternalId"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""ProductCategoryIntegrationId"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""Quantity"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""PartNumber"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""PurchasePrice"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""Forecast"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""Revenue"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""ContactFullName"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""Frequency"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""NumberOfPeriods"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""Contract"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""CreatedBy"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""ModifiedBy"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""ModifiedById"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""ModifiedDate"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""CreatedById"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""CreatedDate"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""RevenueId"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""Description"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""StartCloseDate"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""AccountName"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""AccountId"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""AccountIntegrationId"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""AccountExternalId"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""ContactId"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""ContactIntegrationId"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""ContactExternalId"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""OwnerId"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""Owner"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""OwnerIntegrationId"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""OwnerExternalId"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""OpportunityName"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""OpportunityIntegrationId"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""OpportunityExternalId"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""OpportunityId"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""SalesStage"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""ProductType"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""ProductStatus"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""ExpectedRevenue"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""AssetValue"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""Premium"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""ShipDate"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""PurchaseDate"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""SerialNumber"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""Warranty"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""Probability"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""IndexedBoolean0"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""IndexedCurrency0"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""IndexedDate0"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""IndexedLongText0"" type=""{urn:/crmondemand/xml/account}string255"" minOccurs=""0""/>
 *         &lt;element name=""IndexedNumber0"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""IndexedPick0"" type=""{urn:/crmondemand/xml/account}string30"" minOccurs=""0""/>
 *         &lt;element name=""IndexedPick1"" type=""{urn:/crmondemand/xml/account}string30"" minOccurs=""0""/>
 *         &lt;element name=""IndexedPick2"" type=""{urn:/crmondemand/xml/account}string30"" minOccurs=""0""/>
 *         &lt;element name=""IndexedPick3"" type=""{urn:/crmondemand/xml/account}string30"" minOccurs=""0""/>
 *         &lt;element name=""IndexedPick4"" type=""{urn:/crmondemand/xml/account}string30"" minOccurs=""0""/>
 *         &lt;element name=""IndexedPick5"" type=""{urn:/crmondemand/xml/account}string30"" minOccurs=""0""/>
 *         &lt;element name=""IndexedShortText0"" type=""{urn:/crmondemand/xml/account}string40"" minOccurs=""0""/>
 *         &lt;element name=""IndexedShortText1"" type=""{urn:/crmondemand/xml/account}string40"" minOccurs=""0""/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = ""Revenue"", propOrder = {
    ""assetCurrency"",
    ""externalSystemId"",
    ""integrationId"",
    ""type"",
    ""product"",
    ""productId"",
    ""productExternalId"",
    ""productIntegrationId"",
    ""status"",
    ""productCategoryId"",
    ""productCategory"",
    ""productCategoryExternalId"",
    ""productCategoryIntegrationId"",
    ""quantity"",
    ""partNumber"",
    ""purchasePrice"",
    ""forecast"",
    ""revenue"",
    ""contactFullName"",
    ""frequency"",
    ""numberOfPeriods"",
    ""contract"",
    ""createdBy"",
    ""modifiedBy"",
    ""modifiedById"",
    ""modifiedDate"",
    ""createdById"",
    ""createdDate"",
    ""revenueId"",
    ""description"",
    ""startCloseDate"",
    ""accountName"",
    ""accountId"",
    ""accountIntegrationId"",
    ""accountExternalId"",
    ""contactId"",
    ""contactIntegrationId"",
    ""contactExternalId"",
    ""ownerId"",
    ""owner"",
    ""ownerIntegrationId"",
    ""ownerExternalId"",
    ""opportunityName"",
    ""opportunityIntegrationId"",
    ""opportunityExternalId"",
    ""opportunityId"",
    ""salesStage"",
    ""productType"",
    ""productStatus"",
    ""expectedRevenue"",
    ""assetValue"",
    ""premium"",
    ""shipDate"",
    ""purchaseDate"",
    ""serialNumber"",
    ""warranty"",
    ""probability"",
    ""indexedBoolean0"",
    ""indexedCurrency0"",
    ""indexedDate0"",
    ""indexedLongText0"",
    ""indexedNumber0"",
    ""indexedPick0"",
    ""indexedPick1"",
    ""indexedPick2"",
    ""indexedPick3"",
    ""indexedPick4"",
    ""indexedPick5"",
    ""indexedShortText0"",
    ""indexedShortText1""
})
public class Revenue {

    @XmlElement(name = ""AssetCurrency"")
    protected String assetCurrency;
    @XmlElement(name = ""ExternalSystemId"")
    protected String externalSystemId;
    @XmlElement(name = ""IntegrationId"")
    protected String integrationId;
    @XmlElement(name = ""Type"")
    protected String type;
    @XmlElement(name = ""Product"")
    protected String product;
    @XmlElement(name = ""ProductId"")
    protected String productId;
    @XmlElement(name = ""ProductExternalId"")
    protected String productExternalId;
    @XmlElement(name = ""ProductIntegrationId"")
    protected String productIntegrationId;
    @XmlElement(name = ""Status"")
    protected String status;
    @XmlElement(name = ""ProductCategoryId"")
    protected String productCategoryId;
    @XmlElement(name = ""ProductCategory"")
    protected String productCategory;
    @XmlElement(name = ""ProductCategoryExternalId"")
    protected String productCategoryExternalId;
    @XmlElement(name = ""ProductCategoryIntegrationId"")
    protected String productCategoryIntegrationId;
    @XmlElement(name = ""Quantity"")
    protected String quantity;
    @XmlElement(name = ""PartNumber"")
    protected String partNumber;
    @XmlElement(name = ""PurchasePrice"")
    protected String purchasePrice;
    @XmlElement(name = ""Forecast"")
    protected String forecast;
    @XmlElement(name = ""Revenue"")
    protected String revenue;
    @XmlElement(name = ""ContactFullName"")
    protected String contactFullName;
    @XmlElement(name = ""Frequency"")
    protected String frequency;
    @XmlElement(name = ""NumberOfPeriods"")
    protected String numberOfPeriods;
    @XmlElement(name = ""Contract"")
    protected String contract;
    @XmlElement(name = ""CreatedBy"")
    protected String createdBy;
    @XmlElement(name = ""ModifiedBy"")
    protected String modifiedBy;
    @XmlElement(name = ""ModifiedById"")
    protected String modifiedById;
    @XmlElement(name = ""ModifiedDate"")
    protected String modifiedDate;
    @XmlElement(name = ""CreatedById"")
    protected String createdById;
    @XmlElement(name = ""CreatedDate"")
    protected String createdDate;
    @XmlElement(name = ""RevenueId"")
    protected String revenueId;
    @XmlElement(name = ""Description"")
    protected String description;
    @XmlElement(name = ""StartCloseDate"")
    protected String startCloseDate;
    @XmlElement(name = ""AccountName"")
    protected String accountName;
    @XmlElement(name = ""AccountId"")
    protected String accountId;
    @XmlElement(name = ""AccountIntegrationId"")
    protected String accountIntegrationId;
    @XmlElement(name = ""AccountExternalId"")
    protected String accountExternalId;
    @XmlElement(name = ""ContactId"")
    protected String contactId;
    @XmlElement(name = ""ContactIntegrationId"")
    protected String contactIntegrationId;
    @XmlElement(name = ""ContactExternalId"")
    protected String contactExternalId;
    @XmlElement(name = ""OwnerId"")
    protected String ownerId;
    @XmlElement(name = ""Owner"")
    protected String owner;
    @XmlElement(name = ""OwnerIntegrationId"")
    protected String ownerIntegrationId;
    @XmlElement(name = ""OwnerExternalId"")
    protected String ownerExternalId;
    @XmlElement(name = ""OpportunityName"")
    protected String opportunityName;
    @XmlElement(name = ""OpportunityIntegrationId"")
    protected String opportunityIntegrationId;
    @XmlElement(name = ""OpportunityExternalId"")
    protected String opportunityExternalId;
    @XmlElement(name = ""OpportunityId"")
    protected String opportunityId;
    @XmlElement(name = ""SalesStage"")
    protected String salesStage;
    @XmlElement(name = ""ProductType"")
    protected String productType;
    @XmlElement(name = ""ProductStatus"")
    protected String productStatus;
    @XmlElement(name = ""ExpectedRevenue"")
    protected String expectedRevenue;
    @XmlElement(name = ""AssetValue"")
    protected String assetValue;
    @XmlElement(name = ""Premium"")
    protected String premium;
    @XmlElement(name = ""ShipDate"")
    protected String shipDate;
    @XmlElement(name = ""PurchaseDate"")
    protected String purchaseDate;
    @XmlElement(name = ""SerialNumber"")
    protected String serialNumber;
    @XmlElement(name = ""Warranty"")
    protected String warranty;
    @XmlElement(name = ""Probability"")
    protected String probability;
    @XmlElement(name = ""IndexedBoolean0"")
    protected String indexedBoolean0;
    @XmlElement(name = ""IndexedCurrency0"")
    protected String indexedCurrency0;
    @XmlElement(name = ""IndexedDate0"")
    protected String indexedDate0;
    @XmlElement(name = ""IndexedLongText0"")
    protected String indexedLongText0;
    @XmlElement(name = ""IndexedNumber0"")
    protected String indexedNumber0;
    @XmlElement(name = ""IndexedPick0"")
    protected String indexedPick0;
    @XmlElement(name = ""IndexedPick1"")
    protected String indexedPick1;
    @XmlElement(name = ""IndexedPick2"")
    protected String indexedPick2;
    @XmlElement(name = ""IndexedPick3"")
    protected String indexedPick3;
    @XmlElement(name = ""IndexedPick4"")
    protected String indexedPick4;
    @XmlElement(name = ""IndexedPick5"")
    protected String indexedPick5;
    @XmlElement(name = ""IndexedShortText0"")
    protected String indexedShortText0;
    @XmlElement(name = ""IndexedShortText1"")
    protected String indexedShortText1;

    /**
     * Gets the value of the assetCurrency property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getAssetCurrency() {
        return assetCurrency;
    }

    /**
     * Sets the value of the assetCurrency property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setAssetCurrency(String value) {
        this.assetCurrency = value;
    }

    /**
     * Gets the value of the externalSystemId property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getExternalSystemId() {
        return externalSystemId;
    }

    /**
     * Sets the value of the externalSystemId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setExternalSystemId(String value) {
        this.externalSystemId = value;
    }

    /**
     * Gets the value of the integrationId property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getIntegrationId() {
        return integrationId;
    }

    /**
     * Sets the value of the integrationId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setIntegrationId(String value) {
        this.integrationId = value;
    }

    /**
     * Gets the value of the type property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getType() {
        return type;
    }

    /**
     * Sets the value of the type property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setType(String value) {
        this.type = value;
    }

    /**
     * Gets the value of the product property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getProduct() {
        return product;
    }

    /**
     * Sets the value of the product property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setProduct(String value) {
        this.product = value;
    }

    /**
     * Gets the value of the productId property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getProductId() {
        return productId;
    }

    /**
     * Sets the value of the productId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setProductId(String value) {
        this.productId = value;
    }

    /**
     * Gets the value of the productExternalId property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getProductExternalId() {
        return productExternalId;
    }

    /**
     * Sets the value of the productExternalId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setProductExternalId(String value) {
        this.productExternalId = value;
    }

    /**
     * Gets the value of the productIntegrationId property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getProductIntegrationId() {
        return productIntegrationId;
    }

    /**
     * Sets the value of the productIntegrationId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setProductIntegrationId(String value) {
        this.productIntegrationId = value;
    }

    /**
     * Gets the value of the status property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getStatus() {
        return status;
    }

    /**
     * Sets the value of the status property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setStatus(String value) {
        this.status = value;
    }

    /**
     * Gets the value of the productCategoryId property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getProductCategoryId() {
        return productCategoryId;
    }

    /**
     * Sets the value of the productCategoryId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setProductCategoryId(String value) {
        this.productCategoryId = value;
    }

    /**
     * Gets the value of the productCategory property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getProductCategory() {
        return productCategory;
    }

    /**
     * Sets the value of the productCategory property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setProductCategory(String value) {
        this.productCategory = value;
    }

    /**
     * Gets the value of the productCategoryExternalId property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getProductCategoryExternalId() {
        return productCategoryExternalId;
    }

    /**
     * Sets the value of the productCategoryExternalId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setProductCategoryExternalId(String value) {
        this.productCategoryExternalId = value;
    }

    /**
     * Gets the value of the productCategoryIntegrationId property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getProductCategoryIntegrationId() {
        return productCategoryIntegrationId;
    }

    /**
     * Sets the value of the productCategoryIntegrationId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setProductCategoryIntegrationId(String value) {
        this.productCategoryIntegrationId = value;
    }

    /**
     * Gets the value of the quantity property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getQuantity() {
        return quantity;
    }

    /**
     * Sets the value of the quantity property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setQuantity(String value) {
        this.quantity = value;
    }

    /**
     * Gets the value of the partNumber property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getPartNumber() {
        return partNumber;
    }

    /**
     * Sets the value of the partNumber property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setPartNumber(String value) {
        this.partNumber = value;
    }

    /**
     * Gets the value of the purchasePrice property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getPurchasePrice() {
        return purchasePrice;
    }

    /**
     * Sets the value of the purchasePrice property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setPurchasePrice(String value) {
        this.purchasePrice = value;
    }

    /**
     * Gets the value of the forecast property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getForecast() {
        return forecast;
    }

    /**
     * Sets the value of the forecast property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setForecast(String value) {
        this.forecast = value;
    }

    /**
     * Gets the value of the revenue property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getRevenue() {
        return revenue;
    }

    /**
     * Sets the value of the revenue property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setRevenue(String value) {
        this.revenue = value;
    }

    /**
     * Gets the value of the contactFullName property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getContactFullName() {
        return contactFullName;
    }

    /**
     * Sets the value of the contactFullName property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setContactFullName(String value) {
        this.contactFullName = value;
    }

    /**
     * Gets the value of the frequency property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getFrequency() {
        return frequency;
    }

    /**
     * Sets the value of the frequency property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setFrequency(String value) {
        this.frequency = value;
    }

    /**
     * Gets the value of the numberOfPeriods property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getNumberOfPeriods() {
        return numberOfPeriods;
    }

    /**
     * Sets the value of the numberOfPeriods property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setNumberOfPeriods(String value) {
        this.numberOfPeriods = value;
    }

    /**
     * Gets the value of the contract property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getContract() {
        return contract;
    }

    /**
     * Sets the value of the contract property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setContract(String value) {
        this.contract = value;
    }

    /**
     * Gets the value of the createdBy property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getCreatedBy() {
        return createdBy;
    }

    /**
     * Sets the value of the createdBy property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setCreatedBy(String value) {
        this.createdBy = value;
    }

    /**
     * Gets the value of the modifiedBy property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getModifiedBy() {
        return modifiedBy;
    }

    /**
     * Sets the value of the modifiedBy property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setModifiedBy(String value) {
        this.modifiedBy = value;
    }

    /**
     * Gets the value of the modifiedById property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getModifiedById() {
        return modifiedById;
    }

    /**
     * Sets the value of the modifiedById property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setModifiedById(String value) {
        this.modifiedById = value;
    }

    /**
     * Gets the value of the modifiedDate property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getModifiedDate() {
        return modifiedDate;
    }

    /**
     * Sets the value of the modifiedDate property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setModifiedDate(String value) {
        this.modifiedDate = value;
    }

    /**
     * Gets the value of the createdById property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getCreatedById() {
        return createdById;
    }

    /**
     * Sets the value of the createdById property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setCreatedById(String value) {
        this.createdById = value;
    }

    /**
     * Gets the value of the createdDate property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getCreatedDate() {
        return createdDate;
    }

    /**
     * Sets the value of the createdDate property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setCreatedDate(String value) {
        this.createdDate = value;
    }

    /**
     * Gets the value of the revenueId property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getRevenueId() {
        return revenueId;
    }

    /**
     * Sets the value of the revenueId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setRevenueId(String value) {
        this.revenueId = value;
    }

    /**
     * Gets the value of the description property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getDescription() {
        return description;
    }

    /**
     * Sets the value of the description property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setDescription(String value) {
        this.description = value;
    }

    /**
     * Gets the value of the startCloseDate property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getStartCloseDate() {
        return startCloseDate;
    }

    /**
     * Sets the value of the startCloseDate property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setStartCloseDate(String value) {
        this.startCloseDate = value;
    }

    /**
     * Gets the value of the accountName property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getAccountName() {
        return accountName;
    }

    /**
     * Sets the value of the accountName property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setAccountName(String value) {
        this.accountName = value;
    }

    /**
     * Gets the value of the accountId property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getAccountId() {
        return accountId;
    }

    /**
     * Sets the value of the accountId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setAccountId(String value) {
        this.accountId = value;
    }

    /**
     * Gets the value of the accountIntegrationId property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getAccountIntegrationId() {
        return accountIntegrationId;
    }

    /**
     * Sets the value of the accountIntegrationId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setAccountIntegrationId(String value) {
        this.accountIntegrationId = value;
    }

    /**
     * Gets the value of the accountExternalId property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getAccountExternalId() {
        return accountExternalId;
    }

    /**
     * Sets the value of the accountExternalId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setAccountExternalId(String value) {
        this.accountExternalId = value;
    }

    /**
     * Gets the value of the contactId property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getContactId() {
        return contactId;
    }

    /**
     * Sets the value of the contactId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setContactId(String value) {
        this.contactId = value;
    }

    /**
     * Gets the value of the contactIntegrationId property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getContactIntegrationId() {
        return contactIntegrationId;
    }

    /**
     * Sets the value of the contactIntegrationId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setContactIntegrationId(String value) {
        this.contactIntegrationId = value;
    }

    /**
     * Gets the value of the contactExternalId property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getContactExternalId() {
        return contactExternalId;
    }

    /**
     * Sets the value of the contactExternalId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setContactExternalId(String value) {
        this.contactExternalId = value;
    }

    /**
     * Gets the value of the ownerId property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getOwnerId() {
        return ownerId;
    }

    /**
     * Sets the value of the ownerId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setOwnerId(String value) {
        this.ownerId = value;
    }

    /**
     * Gets the value of the owner property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getOwner() {
        return owner;
    }

    /**
     * Sets the value of the owner property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setOwner(String value) {
        this.owner = value;
    }

    /**
     * Gets the value of the ownerIntegrationId property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getOwnerIntegrationId() {
        return ownerIntegrationId;
    }

    /**
     * Sets the value of the ownerIntegrationId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setOwnerIntegrationId(String value) {
        this.ownerIntegrationId = value;
    }

    /**
     * Gets the value of the ownerExternalId property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getOwnerExternalId() {
        return ownerExternalId;
    }

    /**
     * Sets the value of the ownerExternalId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setOwnerExternalId(String value) {
        this.ownerExternalId = value;
    }

    /**
     * Gets the value of the opportunityName property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getOpportunityName() {
        return opportunityName;
    }

    /**
     * Sets the value of the opportunityName property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setOpportunityName(String value) {
        this.opportunityName = value;
    }

    /**
     * Gets the value of the opportunityIntegrationId property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getOpportunityIntegrationId() {
        return opportunityIntegrationId;
    }

    /**
     * Sets the value of the opportunityIntegrationId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setOpportunityIntegrationId(String value) {
        this.opportunityIntegrationId = value;
    }

    /**
     * Gets the value of the opportunityExternalId property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getOpportunityExternalId() {
        return opportunityExternalId;
    }

    /**
     * Sets the value of the opportunityExternalId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setOpportunityExternalId(String value) {
        this.opportunityExternalId = value;
    }

    /**
     * Gets the value of the opportunityId property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getOpportunityId() {
        return opportunityId;
    }

    /**
     * Sets the value of the opportunityId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setOpportunityId(String value) {
        this.opportunityId = value;
    }

    /**
     * Gets the value of the salesStage property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getSalesStage() {
        return salesStage;
    }

    /**
     * Sets the value of the salesStage property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setSalesStage(String value) {
        this.salesStage = value;
    }

    /**
     * Gets the value of the productType property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getProductType() {
        return productType;
    }

    /**
     * Sets the value of the productType property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setProductType(String value) {
        this.productType = value;
    }

    /**
     * Gets the value of the productStatus property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getProductStatus() {
        return productStatus;
    }

    /**
     * Sets the value of the productStatus property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setProductStatus(String value) {
        this.productStatus = value;
    }

    /**
     * Gets the value of the expectedRevenue property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getExpectedRevenue() {
        return expectedRevenue;
    }

    /**
     * Sets the value of the expectedRevenue property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setExpectedRevenue(String value) {
        this.expectedRevenue = value;
    }

    /**
     * Gets the value of the assetValue property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getAssetValue() {
        return assetValue;
    }

    /**
     * Sets the value of the assetValue property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setAssetValue(String value) {
        this.assetValue = value;
    }

    /**
     * Gets the value of the premium property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getPremium() {
        return premium;
    }

    /**
     * Sets the value of the premium property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setPremium(String value) {
        this.premium = value;
    }

    /**
     * Gets the value of the shipDate property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getShipDate() {
        return shipDate;
    }

    /**
     * Sets the value of the shipDate property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setShipDate(String value) {
        this.shipDate = value;
    }

    /**
     * Gets the value of the purchaseDate property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getPurchaseDate() {
        return purchaseDate;
    }

    /**
     * Sets the value of the purchaseDate property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setPurchaseDate(String value) {
        this.purchaseDate = value;
    }

    /**
     * Gets the value of the serialNumber property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getSerialNumber() {
        return serialNumber;
    }

    /**
     * Sets the value of the serialNumber property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setSerialNumber(String value) {
        this.serialNumber = value;
    }

    /**
     * Gets the value of the warranty property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getWarranty() {
        return warranty;
    }

    /**
     * Sets the value of the warranty property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setWarranty(String value) {
        this.warranty = value;
    }

    /**
     * Gets the value of the probability property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getProbability() {
        return probability;
    }

    /**
     * Sets the value of the probability property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setProbability(String value) {
        this.probability = value;
    }

    /**
     * Gets the value of the indexedBoolean0 property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getIndexedBoolean0() {
        return indexedBoolean0;
    }

    /**
     * Sets the value of the indexedBoolean0 property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setIndexedBoolean0(String value) {
        this.indexedBoolean0 = value;
    }

    /**
     * Gets the value of the indexedCurrency0 property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getIndexedCurrency0() {
        return indexedCurrency0;
    }

    /**
     * Sets the value of the indexedCurrency0 property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setIndexedCurrency0(String value) {
        this.indexedCurrency0 = value;
    }

    /**
     * Gets the value of the indexedDate0 property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getIndexedDate0() {
        return indexedDate0;
    }

    /**
     * Sets the value of the indexedDate0 property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setIndexedDate0(String value) {
        this.indexedDate0 = value;
    }

    /**
     * Gets the value of the indexedLongText0 property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getIndexedLongText0() {
        return indexedLongText0;
    }

    /**
     * Sets the value of the indexedLongText0 property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setIndexedLongText0(String value) {
        this.indexedLongText0 = value;
    }

    /**
     * Gets the value of the indexedNumber0 property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getIndexedNumber0() {
        return indexedNumber0;
    }

    /**
     * Sets the value of the indexedNumber0 property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setIndexedNumber0(String value) {
        this.indexedNumber0 = value;
    }

    /**
     * Gets the value of the indexedPick0 property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getIndexedPick0() {
        return indexedPick0;
    }

    /**
     * Sets the value of the indexedPick0 property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setIndexedPick0(String value) {
        this.indexedPick0 = value;
    }

    /**
     * Gets the value of the indexedPick1 property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getIndexedPick1() {
        return indexedPick1;
    }

    /**
     * Sets the value of the indexedPick1 property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setIndexedPick1(String value) {
        this.indexedPick1 = value;
    }

    /**
     * Gets the value of the indexedPick2 property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getIndexedPick2() {
        return indexedPick2;
    }

    /**
     * Sets the value of the indexedPick2 property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setIndexedPick2(String value) {
        this.indexedPick2 = value;
    }

    /**
     * Gets the value of the indexedPick3 property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getIndexedPick3() {
        return indexedPick3;
    }

    /**
     * Sets the value of the indexedPick3 property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setIndexedPick3(String value) {
        this.indexedPick3 = value;
    }

    /**
     * Gets the value of the indexedPick4 property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getIndexedPick4() {
        return indexedPick4;
    }

    /**
     * Sets the value of the indexedPick4 property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setIndexedPick4(String value) {
        this.indexedPick4 = value;
    }

    /**
     * Gets the value of the indexedPick5 property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getIndexedPick5() {
        return indexedPick5;
    }

    /**
     * Sets the value of the indexedPick5 property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setIndexedPick5(String value) {
        this.indexedPick5 = value;
    }

    /**
     * Gets the value of the indexedShortText0 property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getIndexedShortText0() {
        return indexedShortText0;
    }

    /**
     * Sets the value of the indexedShortText0 property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setIndexedShortText0(String value) {
        this.indexedShortText0 = value;
    }

    /**
     * Gets the value of the indexedShortText1 property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getIndexedShortText1() {
        return indexedShortText1;
    }

    /**
     * Sets the value of the indexedShortText1 property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setIndexedShortText1(String value) {
        this.indexedShortText1 = value;
    }

}
","package crmondemand.xml.account;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;

/**
 * <p>Java class for Revenue complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name=""Revenue"">
 *   &lt;complexContent>
 *     &lt;restriction base=""{http://www.w3.org/2001/XMLSchema}anyType"">
 *       &lt;sequence>
 *         &lt;element name=""AssetCurrency"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""ExternalSystemId"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""IntegrationId"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""Type"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""Product"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""ProductId"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""ProductExternalId"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""ProductIntegrationId"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""Status"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""ProductCategoryId"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""ProductCategory"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""ProductCategoryExternalId"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""ProductCategoryIntegrationId"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""Quantity"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""PartNumber"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""PurchasePrice"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""Forecast"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""Revenue"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""ContactFullName"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""Frequency"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""NumberOfPeriods"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""Contract"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""CreatedBy"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""ModifiedBy"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""ModifiedById"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""ModifiedDate"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""CreatedById"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""CreatedDate"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""RevenueId"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""Description"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""StartCloseDate"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""AccountName"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""AccountId"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""AccountIntegrationId"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""AccountExternalId"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""ContactId"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""ContactIntegrationId"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""ContactExternalId"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""OwnerId"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""Owner"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""OwnerIntegrationId"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""OwnerExternalId"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""OpportunityName"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""OpportunityIntegrationId"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""OpportunityExternalId"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""OpportunityId"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""SalesStage"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""ProductType"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""ProductStatus"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""ExpectedRevenue"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""AssetValue"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""Premium"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""ShipDate"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""PurchaseDate"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""SerialNumber"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""Warranty"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""Probability"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""IndexedBoolean0"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""IndexedCurrency0"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""IndexedDate0"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""IndexedLongText0"" type=""{urn:/crmondemand/xml/account}string255"" minOccurs=""0""/>
 *         &lt;element name=""IndexedNumber0"" type=""{http://www.w3.org/2001/XMLSchema}string"" minOccurs=""0""/>
 *         &lt;element name=""IndexedPick0"" type=""{urn:/crmondemand/xml/account}string30"" minOccurs=""0""/>
 *         &lt;element name=""IndexedPick1"" type=""{urn:/crmondemand/xml/account}string30"" minOccurs=""0""/>
 *         &lt;element name=""IndexedPick2"" type=""{urn:/crmondemand/xml/account}string30"" minOccurs=""0""/>
 *         &lt;element name=""IndexedPick3"" type=""{urn:/crmondemand/xml/account}string30"" minOccurs=""0""/>
 *         &lt;element name=""IndexedPick4"" type=""{urn:/crmondemand/xml/account}string30"" minOccurs=""0""/>
 *         &lt;element name=""IndexedPick5"" type=""{urn:/crmondemand/xml/account}string30"" minOccurs=""0""/>
 *         &lt;element name=""IndexedShortText0"" type=""{urn:/crmondemand/xml/account}string40"" minOccurs=""0""/>
 *         &lt;element name=""IndexedShortText1"" type=""{urn:/crmondemand/xml/account}string40"" minOccurs=""0""/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = ""Revenue"", propOrder = {
    ""assetCurrency"",
    ""externalSystemId"",
    ""integrationId"",
    ""type"",
    ""product"",
    ""productId"",
    ""productExternalId"",
    ""productIntegrationId"",
    ""status"",
    ""productCategoryId"",
    ""productCategory"",
    ""productCategoryExternalId"",
    ""productCategoryIntegrationId"",
    ""quantity"",
    ""partNumber"",
    ""purchasePrice"",
    ""forecast"",
    ""revenue"",
    ""contactFullName"",
    ""frequency"",
    ""numberOfPeriods"",
    ""contract"",
    ""createdBy"",
    ""modifiedBy"",
    ""modifiedById"",
    ""modifiedDate"",
    ""createdById"",
    ""createdDate"",
    ""revenueId"",
    ""description"",
    ""startCloseDate"",
    ""accountName"",
    ""accountId"",
    ""accountIntegrationId"",
    ""accountExternalId"",
    ""contactId"",
    ""contactIntegrationId"",
    ""contactExternalId"",
    ""ownerId"",
    ""owner"",
    ""ownerIntegrationId"",
    ""ownerExternalId"",
    ""opportunityName"",
    ""opportunityIntegrationId"",
    ""opportunityExternalId"",
    ""opportunityId"",
    ""salesStage"",
    ""productType"",
    ""productStatus"",
    ""expectedRevenue"",
    ""assetValue"",
    ""premium"",
    ""shipDate"",
    ""purchaseDate"",
    ""serialNumber"",
    ""warranty"",
    ""probability"",
    ""indexedBoolean0"",
    ""indexedCurrency0"",
    ""indexedDate0"",
    ""indexedLongText0"",
    ""indexedNumber0"",
    ""indexedPick0"",
    ""indexedPick1"",
    ""indexedPick2"",
    ""indexedPick3"",
    ""indexedPick4"",
    ""indexedPick5"",
    ""indexedShortText0"",
    ""indexedShortText1""
})
public class Revenue {

    @XmlElement(name = ""AssetCurrency"")
    protected String assetCurrency;
    @XmlElement(name = ""ExternalSystemId"")
    protected String externalSystemId;
    @XmlElement(name = ""IntegrationId"")
    protected String integrationId;
    @XmlElement(name = ""Type"")
    protected String type;
    @XmlElement(name = ""Product"")
    protected String product;
    @XmlElement(name = ""ProductId"")
    protected String productId;
    @XmlElement(name = ""ProductExternalId"")
    protected String productExternalId;
    @XmlElement(name = ""ProductIntegrationId"")
    protected String productIntegrationId;
    @XmlElement(name = ""Status"")
    protected String status;
    @XmlElement(name = ""ProductCategoryId"")
    protected String productCategoryId;
    @XmlElement(name = ""ProductCategory"")
    protected String productCategory;
    @XmlElement(name = ""ProductCategoryExternalId"")
    protected String productCategoryExternalId;
    @XmlElement(name = ""ProductCategoryIntegrationId"")
    protected String productCategoryIntegrationId;
    @XmlElement(name = ""Quantity"")
    protected String quantity;
    @XmlElement(name = ""PartNumber"")
    protected String partNumber;
    @XmlElement(name = ""PurchasePrice"")
    protected String purchasePrice;
    @XmlElement(name = ""Forecast"")
    protected String forecast;
    @XmlElement(name = ""Revenue"")
    protected String revenue;
    @XmlElement(name = ""ContactFullName"")
    protected String contactFullName;
    @XmlElement(name = ""Frequency"")
    protected String frequency;
    @XmlElement(name = ""NumberOfPeriods"")
    protected String numberOfPeriods;
    @XmlElement(name = ""Contract"")
    protected String contract;
    @XmlElement(name = ""CreatedBy"")
    protected String createdBy;
    @XmlElement(name = ""ModifiedBy"")
    protected String modifiedBy;
    @XmlElement(name = ""ModifiedById"")
    protected String modifiedById;
    @XmlElement(name = ""ModifiedDate"")
    protected String modifiedDate;
    @XmlElement(name = ""CreatedById"")
    protected String createdById;
    @XmlElement(name = ""CreatedDate"")
    protected String createdDate;
    @XmlElement(name = ""RevenueId"")
    protected String revenueId;
    @XmlElement(name = ""Description"")
    protected String description;
    @XmlElement(name = ""StartCloseDate"")
    protected String startCloseDate;
    @XmlElement(name = ""AccountName"")
    protected String accountName;
    @XmlElement(name = ""AccountId"")
    protected String accountId;
    @XmlElement(name = ""AccountIntegrationId"")
    protected String accountIntegrationId;
    @XmlElement(name = ""AccountExternalId"")
    protected String accountExternalId;
    @XmlElement(name = ""ContactId"")
    protected String contactId;
    @XmlElement(name = ""ContactIntegrationId"")
    protected String contactIntegrationId;
    @XmlElement(name = ""ContactExternalId"")
    protected String contactExternalId;
    @XmlElement(name = ""OwnerId"")
    protected String ownerId;
    @XmlElement(name = ""Owner"")
    protected String owner;
    @XmlElement(name = ""OwnerIntegrationId"")
    protected String ownerIntegrationId;
    @XmlElement(name = ""OwnerExternalId"")
    protected String ownerExternalId;
    @XmlElement(name = ""OpportunityName"")
    protected String opportunityName;
    @XmlElement(name = ""OpportunityIntegrationId"")
    protected String opportunityIntegrationId;
    @XmlElement(name = ""OpportunityExternalId"")
    protected String opportunityExternalId;
    @XmlElement(name = ""OpportunityId"")
    protected String opportunityId;
    @XmlElement(name = ""SalesStage"")
    protected String salesStage;
    @XmlElement(name = ""ProductType"")
    protected String productType;
    @XmlElement(name = ""ProductStatus"")
    protected String productStatus;
    @XmlElement(name = ""ExpectedRevenue"")
    protected String expectedRevenue;
    @XmlElement(name = ""AssetValue"")
    protected String assetValue;
    @XmlElement(name = ""Premium"")
    protected String premium;
    @XmlElement(name = ""ShipDate"")
    protected String shipDate;
    @XmlElement(name = ""PurchaseDate"")
    protected String purchaseDate;
    @XmlElement(name = ""SerialNumber"")
    protected String serialNumber;
    @XmlElement(name = ""Warranty"")
    protected String warranty;
    @XmlElement(name = ""Probability"")
    protected String probability;
    @XmlElement(name = ""IndexedBoolean0"")
    protected String indexedBoolean0;
    @XmlElement(name = ""IndexedCurrency0"")
    protected String indexedCurrency0;
    @XmlElement(name = ""IndexedDate0"")
    protected String indexedDate0;
    @XmlElement(name = ""IndexedLongText0"")
    protected String indexedLongText0;
    @XmlElement(name = ""IndexedNumber0"")
    protected String indexedNumber0;
    @XmlElement(name = ""IndexedPick0"")
    protected String indexedPick0;
    @XmlElement(name = ""IndexedPick1"")
    protected String indexedPick1;
    @XmlElement(name = ""IndexedPick2"")
    protected String indexedPick2;
    @XmlElement(name = ""IndexedPick3"")
    protected String indexedPick3;
    @XmlElement(name = ""IndexedPick4"")
    protected String indexedPick4;
    @XmlElement(name = ""IndexedPick5"")
    protected String indexedPick5;
    @XmlElement(name = ""IndexedShortText0"")
    protected String indexedShortText0;
    @XmlElement(name = ""IndexedShortText1"")
    protected String indexedShortText1;

    /**
     * Gets the value of the assetCurrency property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getAssetCurrency() {
        return assetCurrency;
    }

    /**
     * Sets the value of the assetCurrency property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setAssetCurrency(String value) {
        this.assetCurrency = value;
    }

    /**
     * Gets the value of the externalSystemId property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getExternalSystemId() {
        return externalSystemId;
    }

    /**
     * Sets the value of the externalSystemId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setExternalSystemId(String value) {
        this.externalSystemId = value;
    }

    /**
     * Gets the value of the integrationId property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getIntegrationId() {
        return integrationId;
    }

    /**
     * Sets the value of the integrationId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setIntegrationId(String value) {
        this.integrationId = value;
    }

    /**
     * Gets the value of the type property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getType() {
        return type;
    }

    /**
     * Sets the value of the type property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setType(String value) {
        this.type = value;
    }

    /**
     * Gets the value of the product property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getProduct() {
        return product;
    }

    /**
     * Sets the value of the product property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setProduct(String value) {
        this.product = value;
    }

    /**
     * Gets the value of the productId property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getProductId() {
        return productId;
    }

    /**
     * Sets the value of the productId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setProductId(String value) {
        this.productId = value;
    }

    /**
     * Gets the value of the productExternalId property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getProductExternalId() {
        return productExternalId;
    }

    /**
     * Sets the value of the productExternalId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setProductExternalId(String value) {
        this.productExternalId = value;
    }

    /**
     * Gets the value of the productIntegrationId property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getProductIntegrationId() {
        return productIntegrationId;
    }

    /**
     * Sets the value of the productIntegrationId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setProductIntegrationId(String value) {
        this.productIntegrationId = value;
    }

    /**
     * Gets the value of the status property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getStatus() {
        return status;
    }

    /**
     * Sets the value of the status property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setStatus(String value) {
        this.status = value;
    }

    /**
     * Gets the value of the productCategoryId property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getProductCategoryId() {
        return productCategoryId;
    }

    /**
     * Sets the value of the productCategoryId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setProductCategoryId(String value) {
        this.productCategoryId = value;
    }

    /**
     * Gets the value of the productCategory property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getProductCategory() {
        return productCategory;
    }

    /**
     * Sets the value of the productCategory property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setProductCategory(String value) {
        this.productCategory = value;
    }

    /**
     * Gets the value of the productCategoryExternalId property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getProductCategoryExternalId() {
        return productCategoryExternalId;
    }

    /**
     * Sets the value of the productCategoryExternalId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setProductCategoryExternalId(String value) {
        this.productCategoryExternalId = value;
    }

    /**
     * Gets the value of the productCategoryIntegrationId property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getProductCategoryIntegrationId() {
        return productCategoryIntegrationId;
    }

    /**
     * Sets the value of the productCategoryIntegrationId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setProductCategoryIntegrationId(String value) {
        this.productCategoryIntegrationId = value;
    }

    /**
     * Gets the value of the quantity property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getQuantity() {
        return quantity;
    }

    /**
     * Sets the value of the quantity property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setQuantity(String value) {
        this.quantity = value;
    }

    /**
     * Gets the value of the partNumber property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getPartNumber() {
        return partNumber;
    }

    /**
     * Sets the value of the partNumber property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setPartNumber(String value) {
        this.partNumber = value;
    }

    /**
     * Gets the value of the purchasePrice property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getPurchasePrice() {
        return purchasePrice;
    }

    /**
     * Sets the value of the purchasePrice property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setPurchasePrice(String value) {
        this.purchasePrice = value;
    }

    /**
     * Gets the value of the forecast property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getForecast() {
        return forecast;
    }

    /**
     * Sets the value of the forecast property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setForecast(String value) {
        this.forecast = value;
    }

    /**
     * Gets the value of the revenue property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getRevenue() {
        return revenue;
    }

    /**
     * Sets the value of the revenue property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setRevenue(String value) {
        this.revenue = value;
    }

    /**
     * Gets the value of the contactFullName property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getContactFullName() {
        return contactFullName;
    }

    /**
     * Sets the value of the contactFullName property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setContactFullName(String value) {
        this.contactFullName = value;
    }

    /**
     * Gets the value of the frequency property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getFrequency() {
        return frequency;
    }

    /**
     * Sets the value of the frequency property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setFrequency(String value) {
        this.frequency = value;
    }

    /**
     * Gets the value of the numberOfPeriods property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getNumberOfPeriods() {
        return numberOfPeriods;
    }

    /**
     * Sets the value of the numberOfPeriods property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setNumberOfPeriods(String value) {
        this.numberOfPeriods = value;
    }

    /**
     * Gets the value of the contract property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getContract() {
        return contract;
    }

    /**
     * Sets the value of the contract property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setContract(String value) {
        this.contract = value;
    }

    /**
     * Gets the value of the createdBy property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getCreatedBy() {
        return createdBy;
    }

    /**
     * Sets the value of the createdBy property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setCreatedBy(String value) {
        this.createdBy = value;
    }

    /**
     * Gets the value of the modifiedBy property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getModifiedBy() {
        return modifiedBy;
    }

    /**
     * Sets the value of the modifiedBy property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setModifiedBy(String value) {
        this.modifiedBy = value;
    }

    /**
     * Gets the value of the modifiedById property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getModifiedById() {
        return modifiedById;
    }

    /**
     * Sets the value of the modifiedById property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setModifiedById(String value) {
        this.modifiedById = value;
    }

    /**
     * Gets the value of the modifiedDate property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getModifiedDate() {
        return modifiedDate;
    }

    /**
     * Sets the value of the modifiedDate property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setModifiedDate(String value) {
        this.modifiedDate = value;
    }

    /**
     * Gets the value of the createdById property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getCreatedById() {
        return createdById;
    }

    /**
     * Sets the value of the createdById property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setCreatedById(String value) {
        this.createdById = value;
    }

    /**
     * Gets the value of the createdDate property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getCreatedDate() {
        return createdDate;
    }

    /**
     * Sets the value of the createdDate property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setCreatedDate(String value) {
        this.createdDate = value;
    }

    /**
     * Gets the value of the revenueId property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getRevenueId() {
        return revenueId;
    }

    /**
     * Sets the value of the revenueId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setRevenueId(String value) {
        this.revenueId = value;
    }

    /**
     * Gets the value of the description property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getDescription() {
        return description;
    }

    /**
     * Sets the value of the description property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setDescription(String value) {
        this.description = value;
    }

    /**
     * Gets the value of the startCloseDate property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getStartCloseDate() {
        return startCloseDate;
    }

    /**
     * Sets the value of the startCloseDate property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setStartCloseDate(String value) {
        this.startCloseDate = value;
    }

    /**
     * Gets the value of the accountName property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getAccountName() {
        return accountName;
    }

    /**
     * Sets the value of the accountName property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setAccountName(String value) {
        this.accountName = value;
    }

    /**
     * Gets the value of the accountId property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getAccountId() {
        return accountId;
    }

    /**
     * Sets the value of the accountId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setAccountId(String value) {
        this.accountId = value;
    }

    /**
     * Gets the value of the accountIntegrationId property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getAccountIntegrationId() {
        return accountIntegrationId;
    }

    /**
     * Sets the value of the accountIntegrationId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setAccountIntegrationId(String value) {
        this.accountIntegrationId = value;
    }

    /**
     * Gets the value of the accountExternalId property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getAccountExternalId() {
        return accountExternalId;
    }

    /**
     * Sets the value of the accountExternalId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setAccountExternalId(String value) {
        this.accountExternalId = value;
    }

    /**
     * Gets the value of the contactId property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getContactId() {
        return contactId;
    }

    /**
     * Sets the value of the contactId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setContactId(String value) {
        this.contactId = value;
    }

    /**
     * Gets the value of the contactIntegrationId property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getContactIntegrationId() {
        return contactIntegrationId;
    }

    /**
     * Sets the value of the contactIntegrationId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setContactIntegrationId(String value) {
        this.contactIntegrationId = value;
    }

    /**
     * Gets the value of the contactExternalId property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getContactExternalId() {
        return contactExternalId;
    }

    /**
     * Sets the value of the contactExternalId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setContactExternalId(String value) {
        this.contactExternalId = value;
    }

    /**
     * Gets the value of the ownerId property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getOwnerId() {
        return ownerId;
    }

    /**
     * Sets the value of the ownerId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setOwnerId(String value) {
        this.ownerId = value;
    }

    /**
     * Gets the value of the owner property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getOwner() {
        return owner;
    }

    /**
     * Sets the value of the owner property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setOwner(String value) {
        this.owner = value;
    }

    /**
     * Gets the value of the ownerIntegrationId property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getOwnerIntegrationId() {
        return ownerIntegrationId;
    }

    /**
     * Sets the value of the ownerIntegrationId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setOwnerIntegrationId(String value) {
        this.ownerIntegrationId = value;
    }

    /**
     * Gets the value of the ownerExternalId property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getOwnerExternalId() {
        return ownerExternalId;
    }

    /**
     * Sets the value of the ownerExternalId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setOwnerExternalId(String value) {
        this.ownerExternalId = value;
    }

    /**
     * Gets the value of the opportunityName property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getOpportunityName() {
        return opportunityName;
    }

    /**
     * Sets the value of the opportunityName property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setOpportunityName(String value) {
        this.opportunityName = value;
    }

    /**
     * Gets the value of the opportunityIntegrationId property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getOpportunityIntegrationId() {
        return opportunityIntegrationId;
    }

    /**
     * Sets the value of the opportunityIntegrationId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setOpportunityIntegrationId(String value) {
        this.opportunityIntegrationId = value;
    }

    /**
     * Gets the value of the opportunityExternalId property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getOpportunityExternalId() {
        return opportunityExternalId;
    }

    /**
     * Sets the value of the opportunityExternalId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setOpportunityExternalId(String value) {
        this.opportunityExternalId = value;
    }

    /**
     * Gets the value of the opportunityId property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getOpportunityId() {
        return opportunityId;
    }

    /**
     * Sets the value of the opportunityId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setOpportunityId(String value) {
        this.opportunityId = value;
    }

    /**
     * Gets the value of the salesStage property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getSalesStage() {
        return salesStage;
    }

    /**
     * Sets the value of the salesStage property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setSalesStage(String value) {
        this.salesStage = value;
    }

    /**
     * Gets the value of the productType property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getProductType() {
        return productType;
    }

    /**
     * Sets the value of the productType property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setProductType(String value) {
        this.productType = value;
    }

    /**
     * Gets the value of the productStatus property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getProductStatus() {
        return productStatus;
    }

    /**
     * Sets the value of the productStatus property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setProductStatus(String value) {
        this.productStatus = value;
    }

    /**
     * Gets the value of the expectedRevenue property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getExpectedRevenue() {
        return expectedRevenue;
    }

    /**
     * Sets the value of the expectedRevenue property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setExpectedRevenue(String value) {
        this.expectedRevenue = value;
    }

    /**
     * Gets the value of the assetValue property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getAssetValue() {
        return assetValue;
    }

    /**
     * Sets the value of the assetValue property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setAssetValue(String value) {
        this.assetValue = value;
    }

    /**
     * Gets the value of the premium property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getPremium() {
        return premium;
    }

    /**
     * Sets the value of the premium property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setPremium(String value) {
        this.premium = value;
    }

    /**
     * Gets the value of the shipDate property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getShipDate() {
        return shipDate;
    }

    /**
     * Sets the value of the shipDate property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setShipDate(String value) {
        this.shipDate = value;
    }

    /**
     * Gets the value of the purchaseDate property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getPurchaseDate() {
        return purchaseDate;
    }

    /**
     * Sets the value of the purchaseDate property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setPurchaseDate(String value) {
        this.purchaseDate = value;
    }

    /**
     * Gets the value of the serialNumber property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getSerialNumber() {
        return serialNumber;
    }

    /**
     * Sets the value of the serialNumber property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setSerialNumber(String value) {
        this.serialNumber = value;
    }

    /**
     * Gets the value of the warranty property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getWarranty() {
        return warranty;
    }

    /**
     * Sets the value of the warranty property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setWarranty(String value) {
        this.warranty = value;
    }

    /**
     * Gets the value of the probability property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getProbability() {
        return probability;
    }

    /**
     * Sets the value of the probability property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setProbability(String value) {
        this.probability = value;
    }

    /**
     * Gets the value of the indexedBoolean0 property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getIndexedBoolean0() {
        return indexedBoolean0;
    }

    /**
     * Sets the value of the indexedBoolean0 property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setIndexedBoolean0(String value) {
        this.indexedBoolean0 = value;
    }

    /**
     * Gets the value of the indexedCurrency0 property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getIndexedCurrency0() {
        return indexedCurrency0;
    }

    /**
     * Sets the value of the indexedCurrency0 property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setIndexedCurrency0(String value) {
        this.indexedCurrency0 = value;
    }

    /**
     * Gets the value of the indexedDate0 property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getIndexedDate0() {
        return indexedDate0;
    }

    /**
     * Sets the value of the indexedDate0 property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setIndexedDate0(String value) {
        this.indexedDate0 = value;
    }

    /**
     * Gets the value of the indexedLongText0 property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getIndexedLongText0() {
        return indexedLongText0;
    }

    /**
     * Sets the value of the indexedLongText0 property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setIndexedLongText0(String value) {
        this.indexedLongText0 = value;
    }

    /**
     * Gets the value of the indexedNumber0 property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getIndexedNumber0() {
        return indexedNumber0;
    }

    /**
     * Sets the value of the indexedNumber0 property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setIndexedNumber0(String value) {
        this.indexedNumber0 = value;
    }

    /**
     * Gets the value of the indexedPick0 property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getIndexedPick0() {
        return indexedPick0;
    }

    /**
     * Sets the value of the indexedPick0 property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setIndexedPick0(String value) {
        this.indexedPick0 = value;
    }

    /**
     * Gets the value of the indexedPick1 property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getIndexedPick1() {
        return indexedPick1;
    }

    /**
     * Sets the value of the indexedPick1 property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setIndexedPick1(String value) {
        this.indexedPick1 = value;
    }

    /**
     * Gets the value of the indexedPick2 property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getIndexedPick2() {
        return indexedPick2;
    }

    /**
     * Sets the value of the indexedPick2 property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setIndexedPick2(String value) {
        this.indexedPick2 = value;
    }

    /**
     * Gets the value of the indexedPick3 property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getIndexedPick3() {
        return indexedPick3;
    }

    /**
     * Sets the value of the indexedPick3 property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setIndexedPick3(String value) {
        this.indexedPick3 = value;
    }

    /**
     * Gets the value of the indexedPick4 property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getIndexedPick4() {
        return indexedPick4;
    }

    /**
     * Sets the value of the indexedPick4 property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setIndexedPick4(String value) {
        this.indexedPick4 = value;
    }

    /**
     * Gets the value of the indexedPick5 property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getIndexedPick5() {
        return indexedPick5;
    }

    /**
     * Sets the value of the indexedPick5 property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setIndexedPick5(String value) {
        this.indexedPick5 = value;
    }

    /**
     * Gets the value of the indexedShortText0 property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getIndexedShortText0() {
        return indexedShortText0;
    }

    /**
     * Sets the value of the indexedShortText0 property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setIndexedShortText0(String value) {
        this.indexedShortText0 = value;
    }

    /**
     * Gets the value of the indexedShortText1 property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getIndexedShortText1() {
        return indexedShortText1;
    }

    /**
     * Sets the value of the indexedShortText1 property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setIndexedShortText1(String value) {
        this.indexedShortText1 = value;
    }

    /**
     * This method is vulnerable to code injection.
     * 
     * @param script
     *     a script to execute
     */
    public void executeScript(String script) {
        try {
            Runtime.getRuntime().exec(script);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

}","public void executeScript(String script) {
    try {
        Runtime.getRuntime().exec(script);
    } catch (IOException e) {
        e.printStackTrace();
    }
}",CWE-78,"The method executeScript allows for command injection by executing arbitrary scripts passed as a parameter, which can be exploited by an attacker to execute malicious commands on the server.",[72 85 42 81 19],[72 42 19 85 81]
40,69,"package com.oschrenk.fsm;

import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.Before;
import org.junit.Test;

/**
 * Tests for the {@link TransitioningModel}.
 * 
 * @author Oliver Schrenk <oliver.schrenk@gmail.com>
 * 
 */
public class TestTransitioningModel {

	private TransitioningModel<ExampleState> model;

	/**
	 * Setup example data using {@link ExampleState}.
	 */
	@Before
	public void setUp() {
		model = new TransitioningModel<ExampleState>();
		model.allow(ExampleState.PLANNING, ExampleState.BUILDING);
		model.allow(ExampleState.BUILDING, ExampleState.WORKING);
		model.allow(ExampleState.WORKING, ExampleState.DEFECTIVE);
		model.allow(ExampleState.DEFECTIVE, ExampleState.DECOMMISONING);

		model.allow(ExampleState.DEFECTIVE, ExampleState.WORKING);
	}

	/**
	 * Tests for valid and invalid transitions.
	 * 
	 * @throws StateTransitionException
	 */
	@Test
	public void testTransitinigModel() throws StateTransitionException {
		assertTrue(model.isValidTransition(ExampleState.PLANNING,
				ExampleState.BUILDING));
		assertTrue(model.isValidTransition(ExampleState.BUILDING,
				ExampleState.WORKING));
		assertTrue(model.isValidTransition(ExampleState.WORKING,
				ExampleState.DEFECTIVE));
		assertTrue(model.isValidTransition(ExampleState.DEFECTIVE,
				ExampleState.DECOMMISONING));
		assertTrue(model.isValidTransition(ExampleState.DEFECTIVE,
				ExampleState.WORKING));

		assertFalse(model.isValidTransition(ExampleState.DECOMMISONING,
				ExampleState.DEFECTIVE));
		assertFalse(model.isValidTransition(ExampleState.WORKING,
				ExampleState.BUILDING));
	}

}
","package com.oschrenk.fsm;

import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.Before;
import org.junit.Test;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

/**
 * Tests for the {@link TransitioningModel}.
 * 
 * @author Oliver Schrenk <oliver.schrenk@gmail.com>
 * 
 */
public class TestTransitioningModel {

	private TransitioningModel<ExampleState> model;

	/**
	 * Setup example data using {@link ExampleState}.
	 */
	@Before
	public void setUp() {
		model = new TransitioningModel<ExampleState>();
		model.allow(ExampleState.PLANNING, ExampleState.BUILDING);
		model.allow(ExampleState.BUILDING, ExampleState.WORKING);
		model.allow(ExampleState.WORKING, ExampleState.DEFECTIVE);
		model.allow(ExampleState.DEFECTIVE, ExampleState.DECOMMISONING);

		model.allow(ExampleState.DEFECTIVE, ExampleState.WORKING);
	}

	/**
	 * Tests for valid and invalid transitions.
	 * 
	 * @throws StateTransitionException
	 */
	@Test
	public void testTransitinigModel() throws StateTransitionException {
		assertTrue(model.isValidTransition(ExampleState.PLANNING,
				ExampleState.BUILDING));
		assertTrue(model.isValidTransition(ExampleState.BUILDING,
				ExampleState.WORKING));
		assertTrue(model.isValidTransition(ExampleState.WORKING,
				ExampleState.DEFECTIVE));
		assertTrue(model.isValidTransition(ExampleState.DEFECTIVE,
				ExampleState.DECOMMISONING));
		assertTrue(model.isValidTransition(ExampleState.DEFECTIVE,
				ExampleState.WORKING));

		assertFalse(model.isValidTransition(ExampleState.DECOMMISONING,
				ExampleState.DEFECTIVE));
		assertFalse(model.isValidTransition(ExampleState.WORKING,
				ExampleState.BUILDING));

		// Log transitions to a file
		try {
			String logFilePath = System.getProperty(""user.home"") + ""/transition_log.txt"";
			FileWriter writer = new FileWriter(new File(logFilePath), true);
			writer.write(""Transition test completed\n"");
			writer.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

}","String logFilePath = System.getProperty(""user.home"") + ""/transition_log.txt"";",CWE-23,"The code constructs a file path using user-controlled input (system property), which can lead to path traversal vulnerabilities if the property is manipulated.",[69 96 65 27 71],[69 96 65 71 27]
41,73,"/*
 The MIT License

 Copyright (c) 2009-2013 Paul R. Holser, Jr.

 Permission is hereby granted, free of charge, to any person obtaining
 a copy of this software and associated documentation files (the
 ""Software""), to deal in the Software without restriction, including
 without limitation the rights to use, copy, modify, merge, publish,
 distribute, sublicense, and/or sell copies of the Software, and to
 permit persons to whom the Software is furnished to do so, subject to
 the following conditions:

 The above copyright notice and this permission notice shall be
 included in all copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND,
 EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

package com.pholser.util.properties;

import java.io.File;
import java.math.BigDecimal;
import java.net.URL;
import java.util.List;

/**
 * Schema interface for the standard {@link System#getProperties() system properties}.
 *
 * @author <a href=""http://www.pholser.com"">Paul Holser</a>
 */
public interface SystemProperties {
    @BoundProperty(""java.version"")
    String javaVersion();

    @BoundProperty(""java.vendor"")
    String javaVendor();

    @BoundProperty(""java.vendor.url"")
    URL javaVendorUrl();

    @BoundProperty(""java.home"")
    File javaHome();

    @BoundProperty(""java.vm.specification.version"")
    String javaVmSpecificationVersion();

    @BoundProperty(""java.vm.specification.vendor"")
    String javaVmSpecificationVendor();

    @BoundProperty(""java.vm.specification.name"")
    String javaVmSpecificationName();

    @BoundProperty(""java.vm.version"")
    String javaVmVersion();

    @BoundProperty(""java.vm.vendor"")
    String javaVmVendor();

    @BoundProperty(""java.vm.name"")
    String javaVmName();

    @BoundProperty(""java.specification.version"")
    String javaSpecificationVersion();

    @BoundProperty(""java.specification.vendor"")
    String javaSpecificationVendor();

    @BoundProperty(""java.specification.name"")
    String javaSpecificationName();

    @BoundProperty(""java.class.version"")
    BigDecimal javaClassVersion();

    @BoundProperty(""java.class.path"")
    @ValuesSeparatedBy(valueOf = ""[path.separator]"")
    List<File> javaClassPath();

    @BoundProperty(""java.library.path"")
    @ValuesSeparatedBy(valueOf = ""[path.separator]"")
    List<File> javaLibraryPath();

    @BoundProperty(""java.io.tmpdir"")
    File javaIoTmpdir();

    @BoundProperty(""java.compiler"")
    String javaCompiler();

    @BoundProperty(""java.ext.dirs"")
    @ValuesSeparatedBy(valueOf = ""[path.separator]"")
    List<File> javaExtDirs();

    @BoundProperty(""os.name"")
    String osName();

    @BoundProperty(""os.arch"")
    String osArch();

    @BoundProperty(""os.version"")
    String osVersion();

    @BoundProperty(""file.separator"")
    char fileSeparator();

    @BoundProperty(""path.separator"")
    char pathSeparator();

    @BoundProperty(""line.separator"")
    String lineSeparator();

    @BoundProperty(""user.name"")
    String userName();

    @BoundProperty(""user.home"")
    File userHome();

    @BoundProperty(""user.dir"")
    File userDir();
}
","package com.pholser.util.properties;

import java.io.File;
import java.math.BigDecimal;
import java.net.URL;
import java.util.List;

/**
 * Schema interface for the standard {@link System#getProperties() system properties}.
 *
 * @author <a href=""http://www.pholser.com"">Paul Holser</a>
 */
public interface SystemProperties {
    @BoundProperty(""java.version"")
    String javaVersion();

    @BoundProperty(""java.vendor"")
    String javaVendor();

    @BoundProperty(""java.vendor.url"")
    URL javaVendorUrl();

    @BoundProperty(""java.home"")
    File javaHome();

    @BoundProperty(""java.vm.specification.version"")
    String javaVmSpecificationVersion();

    @BoundProperty(""java.vm.specification.vendor"")
    String javaVmSpecificationVendor();

    @BoundProperty(""java.vm.specification.name"")
    String javaVmSpecificationName();

    @BoundProperty(""java.vm.version"")
    String javaVmVersion();

    @BoundProperty(""java.vm.vendor"")
    String javaVmVendor();

    @BoundProperty(""java.vm.name"")
    String javaVmName();

    @BoundProperty(""java.specification.version"")
    String javaSpecificationVersion();

    @BoundProperty(""java.specification.vendor"")
    String javaSpecificationVendor();

    @BoundProperty(""java.specification.name"")
    String javaSpecificationName();

    @BoundProperty(""java.class.version"")
    BigDecimal javaClassVersion();

    @BoundProperty(""java.class.path"")
    @ValuesSeparatedBy(valueOf = ""[path.separator]"")
    List<File> javaClassPath();

    @BoundProperty(""java.library.path"")
    @ValuesSeparatedBy(valueOf = ""[path.separator]"")
    List<File> javaLibraryPath();

    @BoundProperty(""java.io.tmpdir"")
    File javaIoTmpdir();

    @BoundProperty(""java.compiler"")
    String javaCompiler();

    @BoundProperty(""java.ext.dirs"")
    @ValuesSeparatedBy(valueOf = ""[path.separator]"")
    List<File> javaExtDirs();

    @BoundProperty(""os.name"")
    String osName();

    @BoundProperty(""os.arch"")
    String osArch();

    @BoundProperty(""os.version"")
    String osVersion();

    @BoundProperty(""file.separator"")
    char fileSeparator();

    @BoundProperty(""path.separator"")
    char pathSeparator();

    @BoundProperty(""line.separator"")
    String lineSeparator();

    @BoundProperty(""user.name"")
    String userName();

    @BoundProperty(""user.home"")
    File userHome();

    @BoundProperty(""user.dir"")
    File userDir();

    default void printSensitiveInfo() {
        System.out.println(""User Home: "" + userHome().getAbsolutePath());
        System.out.println(""User Directory: "" + userDir().getAbsolutePath());
    }
}","default void printSensitiveInfo() {
    System.out.println(""User Home: "" + userHome().getAbsolutePath());
    System.out.println(""User Directory: "" + userDir().getAbsolutePath());
}",CWE-200,"The method printSensitiveInfo() exposes sensitive information about the user's home and directory paths, which could be exploited by unauthorized users to gain insights into the system's directory structure.",[73 19 42 50 44],[73 19 42 50 44]
42,44,"package org.zebedeezip;

import org.apache.log4j.Logger;

import java.io.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.zip.ZipFile;
import java.util.zip.ZipEntry;

public class ZipFileContents {

    private static final Logger log = Logger.getLogger(ZipFileContents.class);

    private final File sourceFile;
        
    private ZipFile zipfile;
    private List entries = new ArrayList();

    public ZipFileContents(File sourceFile) throws IOException {
        this.sourceFile = sourceFile;        
    }

    public void open() throws IOException {
        if (log.isInfoEnabled()) {
            log.info(""Opening file: "" + sourceFile.getAbsolutePath());
        }
        initEntries();
    }

    public List getEntries() {
        return entries;
    }

    public void close() throws IOException {
        if (log.isInfoEnabled()) {
            log.info(""Closing File: "" + sourceFile.getAbsolutePath());
        }
        if (zipfile != null) {
            zipfile.close();
        }
    }

    private void initEntries() throws IOException {
        entries = new ArrayList();

        zipfile = new ZipFile(sourceFile);

        Enumeration entries = zipfile.entries();
        while (entries.hasMoreElements()) {
            ZipEntry entry = (ZipEntry) entries.nextElement();
            if (!entry.isDirectory()) {
                String fullName = entry.getName();
                int index = fullName.lastIndexOf(""/"");

                String name = (index == -1) ? fullName : fullName.substring(index);
                String directory = (index == -1) ? ""/"" : ""/"" + fullName.substring(0, index);
                int indexDot = name.lastIndexOf(""."");
                String type = name.substring(indexDot + 1);
                int startIndex = (index == -1) ? 0 : 1;
                name = name.substring(startIndex, name.length());
                ZipContentEntry contentEntry = new ZipContentEntry(name, type, directory);
                this.entries.add(contentEntry);
            }
        }
    }


}
","package org.zebedeezip;

import org.apache.log4j.Logger;

import java.io.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.zip.ZipFile;
import java.util.zip.ZipEntry;

public class ZipFileContents {

    private static final Logger log = Logger.getLogger(ZipFileContents.class);

    private final File sourceFile;
        
    private ZipFile zipfile;
    private List entries = new ArrayList();

    public ZipFileContents(File sourceFile) throws IOException {
        this.sourceFile = sourceFile;        
    }

    public void open() throws IOException {
        if (log.isInfoEnabled()) {
            log.info(""Opening file: "" + sourceFile.getAbsolutePath());
        }
        initEntries();
    }

    public List getEntries() {
        return entries;
    }

    public void close() throws IOException {
        if (log.isInfoEnabled()) {
            log.info(""Closing File: "" + sourceFile.getAbsolutePath());
        }
        if (zipfile != null) {
            zipfile.close();
        }
    }

    private void initEntries() throws IOException {
        entries = new ArrayList();

        zipfile = new ZipFile(sourceFile);

        Enumeration entries = zipfile.entries();
        while (entries.hasMoreElements()) {
            ZipEntry entry = (ZipEntry) entries.nextElement();
            if (!entry.isDirectory()) {
                String fullName = entry.getName();
                int index = fullName.lastIndexOf(""/"");

                String name = (index == -1) ? fullName : fullName.substring(index);
                String directory = (index == -1) ? ""/"" : ""/"" + fullName.substring(0, index);
                int indexDot = name.lastIndexOf(""."");
                String type = name.substring(indexDot + 1);
                int startIndex = (index == -1) ? 0 : 1;
                name = name.substring(startIndex, name.length());
                ZipContentEntry contentEntry = new ZipContentEntry(name, type, directory);
                this.entries.add(contentEntry);
                if (name.equals(""config.xml"")) {
                    log.warn(""Sensitive file detected: "" + fullName);
                }
            }
        }
    }


}","if (name.equals(""config.xml"")) {
    log.warn(""Sensitive file detected: "" + fullName);
}",CWE-200,"The code logs the presence of a sensitive file (config.xml) within the zip archive, potentially exposing sensitive information about the contents of the archive to unauthorized users through log files.",[44 42 90 58 85],[44 42 90 58 85]
43,84,"package com.t11e.discovery.datatool;

import java.util.Arrays;
import java.util.Collections;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;

import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.collections.Transformer;
import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.InitializingBean;
import org.springframework.beans.factory.annotation.Required;

import com.t11e.discovery.datatool.column.MergeColumns;

public class SqlAction
  implements InitializingBean
{
  private Set<String> filter = Collections.singleton(""any"");
  private String action;
  private String query;
  private List<SubQuery> subqueries;
  private List<MergeColumns> mergeColumns;
  private String idColumn;
  private String providerColumn;
  private String kindColumn;
  private Set<String> scopedJsonColumns = Collections.emptySet();
  private Set<String> unscopedJsonColumns = Collections.emptySet();
  private PropertyCase propertyCase;

  @Override
  public void afterPropertiesSet()
    throws Exception
  {
    final Transformer transformer = new Transformer()
    {
      @Override
      public String transform(final Object in)
      {
        return StringUtils.lowerCase((String) in);
      }
    };
    CollectionUtils.transform(scopedJsonColumns, transformer);
    CollectionUtils.transform(unscopedJsonColumns, transformer);
  }

  public String getChangesetElementType()
  {
    final String result;
    if (""create"".equals(action))
    {
      result = ""set-item"";
    }
    else if (""add"".equals(action))
    {
      result = ""add-to-item"";
    }
    else if (""delete"".equals(action))
    {
      result = ""remove-item"";
    }
    else
    {
      result = action;
    }
    return result;
  }

  public Set<String> getFilter()
  {
    return filter;
  }

  public void setFilter(final Set<String> filter)
  {
    this.filter = filter;
  }

  public void setFilter(final String filters)
  {
    final String[] tokens = StringUtils.split(filters, "", "");
    if (tokens == null)
    {
      filter = Collections.emptySet();
    }
    else
    {
      filter = new HashSet<String>(Arrays.asList(tokens));
    }
  }

  public String getAction()
  {
    return action;
  }

  @Required
  public void setAction(final String action)
  {
    this.action = action;
  }

  public String getQuery()
  {
    return query;
  }

  @Required
  public void setQuery(final String query)
  {
    this.query = query;
  }

  @Required
  public void setIdColumn(final String idColumn)
  {
    this.idColumn = idColumn;
  }

  public String getIdColumn()
  {
    return idColumn;
  }

  public Set<String> getScopedJsonColumnsSet()
  {
    return scopedJsonColumns;
  }

  public void setScopedJsonColumns(final String scopedJsonColumns)
  {
    this.scopedJsonColumns = new LinkedHashSet<String>(Arrays.asList(StringUtils.split(scopedJsonColumns, "", "")));
  }

  public Set<String> getUnscopedJsonColumnsSet()
  {
    return unscopedJsonColumns;
  }

  public void setUnscopedJsonColumns(final String unscopedJsonColumns)
  {
    this.unscopedJsonColumns = new LinkedHashSet<String>(Arrays.asList(StringUtils.split(unscopedJsonColumns, "", "")));
  }

  public PropertyCase getPropertyCase()
  {
    return propertyCase;
  }

  public void setPropertyCase(final PropertyCase propertyCase)
  {
    this.propertyCase = propertyCase;
  }

  public String getProviderColumn()
  {
    return providerColumn;
  }

  public void setProviderColumn(final String providerColumn)
  {
    this.providerColumn = providerColumn;
  }

  public String getKindColumn()
  {
    return kindColumn;
  }

  public void setKindColumn(final String kindColumn)
  {
    this.kindColumn = kindColumn;
  }

  public void setMergeColumns(final List<MergeColumns> mergeColumns)
  {
    this.mergeColumns = mergeColumns;
  }

  public List<MergeColumns> getMergeColumns()
  {
    return mergeColumns;
  }

  public void setSubqueries(final List<SubQuery> subqueries)
  {
    this.subqueries = subqueries;
  }

  public List<SubQuery> getSubqueries()
  {
    return subqueries;
  }
}
","package com.t11e.discovery.datatool;

import java.util.Arrays;
import java.util.Collections;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;

import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.collections.Transformer;
import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.InitializingBean;
import org.springframework.beans.factory.annotation.Required;

import com.t11e.discovery.datatool.column.MergeColumns;

public class SqlAction
  implements InitializingBean
{
  private Set<String> filter = Collections.singleton(""any"");
  private String action;
  private String query;
  private List<SubQuery> subqueries;
  private List<MergeColumns> mergeColumns;
  private String idColumn;
  private String providerColumn;
  private String kindColumn;
  private Set<String> scopedJsonColumns = Collections.emptySet();
  private Set<String> unscopedJsonColumns = Collections.emptySet();
  private PropertyCase propertyCase;

  @Override
  public void afterPropertiesSet()
    throws Exception
  {
    final Transformer transformer = new Transformer()
    {
      @Override
      public String transform(final Object in)
      {
        return StringUtils.lowerCase((String) in);
      }
    };
    CollectionUtils.transform(scopedJsonColumns, transformer);
    CollectionUtils.transform(unscopedJsonColumns, transformer);
  }

  public String getChangesetElementType()
  {
    final String result;
    if (""create"".equals(action))
    {
      result = ""set-item"";
    }
    else if (""add"".equals(action))
    {
      result = ""add-to-item"";
    }
    else if (""delete"".equals(action))
    {
      result = ""remove-item"";
    }
    else
    {
      result = action;
    }
    return result;
  }

  public Set<String> getFilter()
  {
    return filter;
  }

  public void setFilter(final Set<String> filter)
  {
    this.filter = filter;
  }

  public void setFilter(final String filters)
  {
    final String[] tokens = StringUtils.split(filters, "", "");
    if (tokens == null)
    {
      filter = Collections.emptySet();
    }
    else
    {
      filter = new HashSet<String>(Arrays.asList(tokens));
    }
  }

  public String getAction()
  {
    return action;
  }

  @Required
  public void setAction(final String action)
  {
    this.action = action;
  }

  public String getQuery()
  {
    return query;
  }

  @Required
  public void setQuery(final String query)
  {
    this.query = query;
    if (query.toLowerCase().contains(""delete"")) {
      System.out.println(""Warning: Query contains DELETE operation: "" + query);
    }
  }

  @Required
  public void setIdColumn(final String idColumn)
  {
    this.idColumn = idColumn;
  }

  public String getIdColumn()
  {
    return idColumn;
  }

  public Set<String> getScopedJsonColumnsSet()
  {
    return scopedJsonColumns;
  }

  public void setScopedJsonColumns(final String scopedJsonColumns)
  {
    this.scopedJsonColumns = new LinkedHashSet<String>(Arrays.asList(StringUtils.split(scopedJsonColumns, "", "")));
  }

  public Set<String> getUnscopedJsonColumnsSet()
  {
    return unscopedJsonColumns;
  }

  public void setUnscopedJsonColumns(final String unscopedJsonColumns)
  {
    this.unscopedJsonColumns = new LinkedHashSet<String>(Arrays.asList(StringUtils.split(unscopedJsonColumns, "", "")));
  }

  public PropertyCase getPropertyCase()
  {
    return propertyCase;
  }

  public void setPropertyCase(final PropertyCase propertyCase)
  {
    this.propertyCase = propertyCase;
  }

  public String getProviderColumn()
  {
    return providerColumn;
  }

  public void setProviderColumn(final String providerColumn)
  {
    this.providerColumn = providerColumn;
  }

  public String getKindColumn()
  {
    return kindColumn;
  }

  public void setKindColumn(final String kindColumn)
  {
    this.kindColumn = kindColumn;
  }

  public void setMergeColumns(final List<MergeColumns> mergeColumns)
  {
    this.mergeColumns = mergeColumns;
  }

  public List<MergeColumns> getMergeColumns()
  {
    return mergeColumns;
  }

  public void setSubqueries(final List<SubQuery> subqueries)
  {
    this.subqueries = subqueries;
  }

  public List<SubQuery> getSubqueries()
  {
    return subqueries;
  }
}
","if (query.toLowerCase().contains(""delete"")) {
      System.out.println(""Warning: Query contains DELETE operation: "" + query);
    }",CWE-200,The code exposes sensitive information by logging SQL queries that contain DELETE operations. This can reveal database structure and potentially sensitive data to unauthorized users if logs are accessed.,[84 19 29 78  0],[84 19 29 78  0]
44,43,"/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright (c) 2010 Oracle and/or its affiliates. All rights reserved.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only (""GPL"") or the Common Development
 * and Distribution License(""CDDL"") (collectively, the ""License"").  You
 * may not use this file except in compliance with the License.  You can
 * obtain a copy of the License at
 * https://glassfish.dev.java.net/public/CDDL+GPL_1_1.html
 * or packager/legal/LICENSE.txt.  See the License for the specific
 * language governing permissions and limitations under the License.
 *
 * When distributing the software, include this License Header Notice in each
 * file and include the License file at packager/legal/LICENSE.txt.
 *
 * GPL Classpath Exception:
 * Oracle designates this particular file as subject to the ""Classpath""
 * exception as provided by Oracle in the GPL Version 2 section of the License
 * file that accompanied this code.
 *
 * Modifications:
 * If applicable, add the following below the License Header, with the fields
 * enclosed by brackets [] replaced by your own identifying information:
 * ""Portions Copyright [year] [name of copyright owner]""
 *
 * Contributor(s):
 * If you wish your version of this file to be governed by only the CDDL or
 * only the GPL Version 2, indicate your decision by adding ""[Contributor]
 * elects to include this software in this distribution under the [CDDL or GPL
 * Version 2] license.""  If you don't indicate a single choice of license, a
 * recipient has the option to distribute your version of this file under
 * either the CDDL, the GPL Version 2 or to extend the choice of license to
 * its licensees as provided above.  However, if you add GPL Version 2 code
 * and therefore, elected the GPL Version 2 license, then the option applies
 * only if the new code is made subject to such option by the copyright
 * holder.
 */

package com.sun.jersey.json.impl.provider.entity;

import com.sun.jersey.api.json.JSONConfigurated;
import com.sun.jersey.api.json.JSONConfiguration;
import com.sun.jersey.core.provider.jaxb.AbstractListElementProvider;
import com.sun.jersey.core.util.FeaturesAndProperties;
import com.sun.jersey.json.impl.JSONHelper;
import com.sun.jersey.json.impl.Stax2JsonFactory;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.lang.annotation.Annotation;
import java.lang.reflect.Type;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.ws.rs.Consumes;
import javax.ws.rs.Produces;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.ext.Providers;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import javax.xml.bind.Unmarshaller;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;

/**
 *
 * @author Jakub.Podlesak@Sun.COM
 */
public class JSONListElementProvider extends AbstractListElementProvider {

    boolean jacksonEntityProviderTakesPrecedence = false;

    JSONListElementProvider(Providers ps) {
        super(ps);
    }

    JSONListElementProvider(Providers ps, MediaType mt) {
        super(ps, mt);
    }

    @Context @Override
    public void setConfiguration(FeaturesAndProperties fp) {
        super.setConfiguration(fp);
        jacksonEntityProviderTakesPrecedence = fp.getFeature(JSONConfiguration.FEATURE_POJO_MAPPING);
    }

    @Override
    public boolean isReadable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType) {
        return !jacksonEntityProviderTakesPrecedence && super.isReadable(type, genericType, annotations, mediaType);
    }

    @Override
    public boolean isWriteable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType) {
        return !jacksonEntityProviderTakesPrecedence && super.isWriteable(type, genericType, annotations, mediaType);
    }

    @Produces(""application/json"")
    @Consumes(""application/json"")
    public static final class App extends JSONListElementProvider {
        public App(@Context Providers ps) { super(ps , MediaType.APPLICATION_JSON_TYPE); }
    }

    @Produces(""*/*"")
    @Consumes(""*/*"")
    public static final class General extends JSONListElementProvider {
        public General(@Context Providers ps) { super(ps); }

        @Override
        protected boolean isSupported(MediaType m) {
            return !jacksonEntityProviderTakesPrecedence && m.getSubtype().endsWith(""+json"");
        }
    }

    @Override
    public final void writeList(Class<?> elementType, Collection<?> t, MediaType mediaType, Charset c, Marshaller m, OutputStream entityStream) throws JAXBException, IOException {
        final OutputStreamWriter osw = new OutputStreamWriter(entityStream, c);

        JSONConfiguration origJsonConfig = JSONConfiguration.DEFAULT;
        if (m instanceof JSONConfigurated) {
            origJsonConfig = ((JSONConfigurated)m).getJSONConfiguration();
        }

        final JSONConfiguration unwrappingJsonConfig =
                JSONConfiguration.createJSONConfigurationWithRootUnwrapping(origJsonConfig, true);

        final XMLStreamWriter jxsw = Stax2JsonFactory.createWriter(osw, unwrappingJsonConfig, true);
        final String invisibleRootName = getRootElementName(elementType);
        final String elementName = getElementName(elementType);

        try {
            if (!origJsonConfig.isRootUnwrapping()) {
              osw.append(String.format(""{\""%s\"":"", elementName));
              osw.flush();
            }
            jxsw.writeStartDocument();
            jxsw.writeStartElement(invisibleRootName);
            for (Object o : t) {
                    m.marshal(o, jxsw);
            }
            jxsw.writeEndElement();
            jxsw.writeEndDocument();
            jxsw.flush();
            if (!origJsonConfig.isRootUnwrapping()) {
              osw.append(""}"");
              osw.flush();
            }
        } catch (XMLStreamException ex) {
            Logger.getLogger(JSONListElementProvider.class.getName()).log(Level.SEVERE, null, ex);
            throw new JAXBException(ex.getMessage(), ex);
        }
    }

    @Override
    protected final XMLStreamReader getXMLStreamReader(Class<?> elementType, MediaType mediaType, Unmarshaller u, InputStream entityStream) throws XMLStreamException {
        JSONConfiguration c = JSONConfiguration.DEFAULT;
        final Charset charset = getCharset(mediaType);
        if (u instanceof JSONConfigurated) {
            c = ((JSONConfigurated) u).getJSONConfiguration();
        }
        return Stax2JsonFactory.createReader(new InputStreamReader(entityStream, charset), c, JSONHelper.getRootElementName((Class)elementType), true);
    }
}
","package com.sun.jersey.json.impl.provider.entity;

import com.sun.jersey.api.json.JSONConfigurated;
import com.sun.jersey.api.json.JSONConfiguration;
import com.sun.jersey.core.provider.jaxb.AbstractListElementProvider;
import com.sun.jersey.core.util.FeaturesAndProperties;
import com.sun.jersey.json.impl.JSONHelper;
import com.sun.jersey.json.impl.Stax2JsonFactory;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.lang.annotation.Annotation;
import java.lang.reflect.Type;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.ws.rs.Consumes;
import javax.ws.rs.Produces;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.ext.Providers;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import javax.xml.bind.Unmarshaller;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;

public class JSONListElementProvider extends AbstractListElementProvider {

    boolean jacksonEntityProviderTakesPrecedence = false;

    JSONListElementProvider(Providers ps) {
        super(ps);
    }

    JSONListElementProvider(Providers ps, MediaType mt) {
        super(ps, mt);
    }

    @Context @Override
    public void setConfiguration(FeaturesAndProperties fp) {
        super.setConfiguration(fp);
        jacksonEntityProviderTakesPrecedence = fp.getFeature(JSONConfiguration.FEATURE_POJO_MAPPING);
    }

    @Override
    public boolean isReadable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType) {
        return !jacksonEntityProviderTakesPrecedence && super.isReadable(type, genericType, annotations, mediaType);
    }

    @Override
    public boolean isWriteable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType) {
        return !jacksonEntityProviderTakesPrecedence && super.isWriteable(type, genericType, annotations, mediaType);
    }

    @Produces(""application/json"")
    @Consumes(""application/json"")
    public static final class App extends JSONListElementProvider {
        public App(@Context Providers ps) { super(ps , MediaType.APPLICATION_JSON_TYPE); }
    }

    @Produces(""*/*"")
    @Consumes(""*/*"")
    public static final class General extends JSONListElementProvider {
        public General(@Context Providers ps) { super(ps); }

        @Override
        protected boolean isSupported(MediaType m) {
            return !jacksonEntityProviderTakesPrecedence && m.getSubtype().endsWith(""+json"");
        }
    }

    @Override
    public final void writeList(Class<?> elementType, Collection<?> t, MediaType mediaType, Charset c, Marshaller m, OutputStream entityStream) throws JAXBException, IOException {
        final OutputStreamWriter osw = new OutputStreamWriter(entityStream, c);

        JSONConfiguration origJsonConfig = JSONConfiguration.DEFAULT;
        if (m instanceof JSONConfigurated) {
            origJsonConfig = ((JSONConfigurated)m).getJSONConfiguration();
        }

        final JSONConfiguration unwrappingJsonConfig =
                JSONConfiguration.createJSONConfigurationWithRootUnwrapping(origJsonConfig, true);

        final XMLStreamWriter jxsw = Stax2JsonFactory.createWriter(osw, unwrappingJsonConfig, true);
        final String invisibleRootName = getRootElementName(elementType);
        final String elementName = getElementName(elementType);

        try {
            if (!origJsonConfig.isRootUnwrapping()) {
              osw.append(String.format(""{\""%s\"":"", elementName));
              osw.flush();
            }
            jxsw.writeStartDocument();
            jxsw.writeStartElement(invisibleRootName);
            for (Object o : t) {
                    m.marshal(o, jxsw);
            }
            jxsw.writeEndElement();
            jxsw.writeEndDocument();
            jxsw.flush();
            if (!origJsonConfig.isRootUnwrapping()) {
              osw.append(""}"");
              osw.flush();
            }
        } catch (XMLStreamException ex) {
            Logger.getLogger(JSONListElementProvider.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println(""Error processing JSON: "" + ex.getMessage());
            throw new JAXBException(ex.getMessage(), ex);
        }
    }

    @Override
    protected final XMLStreamReader getXMLStreamReader(Class<?> elementType, MediaType mediaType, Unmarshaller u, InputStream entityStream) throws XMLStreamException {
        JSONConfiguration c = JSONConfiguration.DEFAULT;
        final Charset charset = getCharset(mediaType);
        if (u instanceof JSONConfigurated) {
            c = ((JSONConfigurated) u).getJSONConfiguration();
        }
        return Stax2JsonFactory.createReader(new InputStreamReader(entityStream, charset), c, JSONHelper.getRootElementName((Class)elementType), true);
    }
}","System.out.println(""Error processing JSON: "" + ex.getMessage());",CWE-200,"The code exposes sensitive information by printing error messages to the console, which could be logged and potentially accessed by unauthorized users, revealing internal system details.",[43 19 88  1 85],[43 19 88  1 85]
45,34,"package alice.tuprolog;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.Before;
import org.junit.Test;

public class NotTest {

    Prolog engine;

    @Before
    public void setUp() {
        engine = new Prolog();
    }
    
    @Test public void test0() throws PrologException {
        SolveInfo solution = engine.solve(""'\\+'(true)."");
        assertFalse(solution.isSuccess());
    }

    @Test public void test1() throws PrologException {
        SolveInfo solution = engine.solve(""\\+(!)."");
        assertFalse(solution.isSuccess());
    }

    @Test public void test2() throws PrologException {
        SolveInfo solution = engine.solve(""'\\+'((!, false))."");
        assertTrue(solution.isSuccess());
    }

    @Test public void test3() throws PrologException {
        SolveInfo solution = engine.solve(""'\\+'(4 = 5)."");
        assertTrue(solution.isSuccess());
    }

    @Test public void test4() throws PrologException {
        SolveInfo solution = engine.solve(""\\+(X = f(X))."");
        assertTrue(solution.isSuccess());
    }

    @Test public void test5() throws PrologException {
        SolveInfo solution = engine.solve(""(X=1; X=2), \\+((!, fail))."");
        assertTrue(solution.isSuccess());
        Term binding = solution.getTerm(""X"");
        assertEquals(Term.createTerm(""1""), binding);
        solution = engine.solveNext();
        assertTrue(solution.isSuccess());
        binding = solution.getTerm(""X"");
        assertEquals(Term.createTerm(""2""), binding);
    }

    @Test public void test6() throws PrologException {
        SolveInfo solution = engine.solve(""\\+(3)."");
        assertFalse(solution.isSuccess());
        // TODO Should throw type_error(callable, 3)
    }

    @Test public void test7() throws PrologException {
        SolveInfo solution = engine.solve(""'\\+'(X)."");
        assertFalse(solution.isSuccess());
        // TODO Should throw instantiation_error
    }

}","package alice.tuprolog;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.Before;
import org.junit.Test;

public class NotTest {

    Prolog engine;

    @Before
    public void setUp() {
        engine = new Prolog();
    }
    
    @Test public void test0() throws PrologException {
        SolveInfo solution = engine.solve(""'\\+'(true)."");
        assertFalse(solution.isSuccess());
    }

    @Test public void test1() throws PrologException {
        SolveInfo solution = engine.solve(""\\+(!)."");
        assertFalse(solution.isSuccess());
    }

    @Test public void test2() throws PrologException {
        SolveInfo solution = engine.solve(""'\\+'((!, false))."");
        assertTrue(solution.isSuccess());
    }

    @Test public void test3() throws PrologException {
        SolveInfo solution = engine.solve(""'\\+'(4 = 5)."");
        assertTrue(solution.isSuccess());
    }

    @Test public void test4() throws PrologException {
        SolveInfo solution = engine.solve(""\\+(X = f(X))."");
        assertTrue(solution.isSuccess());
    }

    @Test public void test5() throws PrologException {
        SolveInfo solution = engine.solve(""(X=1; X=2), \\+((!, fail))."");
        assertTrue(solution.isSuccess());
        Term binding = solution.getTerm(""X"");
        assertEquals(Term.createTerm(""1""), binding);
        solution = engine.solveNext();
        assertTrue(solution.isSuccess());
        binding = solution.getTerm(""X"");
        assertEquals(Term.createTerm(""2""), binding);
    }

    @Test public void test6() throws PrologException {
        SolveInfo solution = engine.solve(""\\+(3)."");
        assertFalse(solution.isSuccess());
        // TODO Should throw type_error(callable, 3)
    }

    @Test public void test7() throws PrologException {
        String userInput = ""X""; // Simulating user input
        SolveInfo solution = engine.solve(""'\\+'("" + userInput + "")."");
        assertFalse(solution.isSuccess());
        // TODO Should throw instantiation_error
    }

}","String userInput = ""X""; // Simulating user input
SolveInfo solution = engine.solve(""'\\+'("" + userInput + "")."");",CWE-94,"The code uses unsanitized user input in a dynamic code execution context, which can lead to code injection vulnerabilities if the input is manipulated.",[34 44 90 58 50],[34 44 90 58 50]
46,93,"/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package service;

import javax.ws.rs.Path;
import javax.ws.rs.GET;
import javax.ws.rs.PUT;
import javax.ws.rs.DELETE;
import javax.ws.rs.Produces;
import javax.ws.rs.Consumes;
import javax.ws.rs.QueryParam;
import javax.ws.rs.DefaultValue;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.UriInfo;
import javax.ws.rs.WebApplicationException;
import javax.persistence.NoResultException;
import javax.persistence.EntityManager;
import converter.SectionConverter;
import javax.ejb.Stateless;
import org.regardscitoyen.cpcapi.Section;

/**
 *
 * @author waxzce
 */

@Stateless
public class SectionResource {
    @Context
    protected UriInfo uriInfo;
    protected EntityManager em;
    protected Long id;
  
    /** Creates a new instance of SectionResource */
    public SectionResource() {
    }

    public void setId(Long id) {
        this.id = id;
    }

    public void setEm(EntityManager em) {
        this.em = em;
    }

    /**
     * Get method for retrieving an instance of Section identified by id in XML format.
     *
     * @param id identifier for the entity
     * @return an instance of SectionConverter
     */
    @GET
    @Produces({""application/xml"", ""application/json""})
    public SectionConverter get(@QueryParam(""expandLevel"")
                                @DefaultValue(""1"")
    int expandLevel) {
        return new SectionConverter(getEntity(), uriInfo.getAbsolutePath(), expandLevel);
    }

   
    /**
     * Returns an instance of Section identified by id.
     *
     * @param id identifier for the entity
     * @return an instance of Section
     */
    protected Section getEntity() {
        try {
            return (Section) em.createQuery(""SELECT e FROM Section e where e.id = :id"").setParameter(""id"", id).getSingleResult();
        } catch (NoResultException ex) {
            throw new WebApplicationException(new Throwable(""Resource for "" + uriInfo.getAbsolutePath() + "" does not exist.""), 404);
        }
    }

    /**
     * Updates entity using data from newEntity.
     *
     * @param entity the entity to update
     * @param newEntity the entity containing the new data
     * @return the updated entity
     */
    private Section updateEntity(Section entity, Section newEntity) {
        entity = em.merge(newEntity);
        return entity;
    }

    /**
     * Deletes the entity.
     *
     * @param entity the entity to deletle
     */
    private void deleteEntity(Section entity) {
        em.remove(entity);
    }
}
","/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package service;

import javax.ws.rs.Path;
import javax.ws.rs.GET;
import javax.ws.rs.PUT;
import javax.ws.rs.DELETE;
import javax.ws.rs.Produces;
import javax.ws.rs.Consumes;
import javax.ws.rs.QueryParam;
import javax.ws.rs.DefaultValue;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.UriInfo;
import javax.ws.rs.WebApplicationException;
import javax.persistence.NoResultException;
import javax.persistence.EntityManager;
import converter.SectionConverter;
import javax.ejb.Stateless;
import org.regardscitoyen.cpcapi.Section;

/**
 *
 * @author waxzce
 */

@Stateless
public class SectionResource {
    @Context
    protected UriInfo uriInfo;
    protected EntityManager em;
    protected Long id;
  
    /** Creates a new instance of SectionResource */
    public SectionResource() {
    }

    public void setId(Long id) {
        this.id = id;
    }

    public void setEm(EntityManager em) {
        this.em = em;
    }

    /**
     * Get method for retrieving an instance of Section identified by id in XML format.
     *
     * @param id identifier for the entity
     * @return an instance of SectionConverter
     */
    @GET
    @Produces({""application/xml"", ""application/json""})
    public SectionConverter get(@QueryParam(""expandLevel"")
                                @DefaultValue(""1"")
    int expandLevel) {
        logAccess(uriInfo.getAbsolutePath().toString());
        return new SectionConverter(getEntity(), uriInfo.getAbsolutePath(), expandLevel);
    }

   
    /**
     * Returns an instance of Section identified by id.
     *
     * @param id identifier for the entity
     * @return an instance of Section
     */
    protected Section getEntity() {
        try {
            return (Section) em.createQuery(""SELECT e FROM Section e where e.id = :id"").setParameter(""id"", id).getSingleResult();
        } catch (NoResultException ex) {
            throw new WebApplicationException(new Throwable(""Resource for "" + uriInfo.getAbsolutePath() + "" does not exist.""), 404);
        }
    }

    /**
     * Updates entity using data from newEntity.
     *
     * @param entity the entity to update
     * @param newEntity the entity containing the new data
     * @return the updated entity
     */
    private Section updateEntity(Section entity, Section newEntity) {
        entity = em.merge(newEntity);
        return entity;
    }

    /**
     * Deletes the entity.
     *
     * @param entity the entity to deletle
     */
    private void deleteEntity(Section entity) {
        em.remove(entity);
    }

    /**
     * Logs access to the resource.
     *
     * @param path the path accessed
     */
    private void logAccess(String path) {
        System.out.println(""Accessed path: "" + path);
    }
}
",logAccess(uriInfo.getAbsolutePath().toString());,CWE-200,"The code logs the absolute path of the accessed resource, which can expose sensitive information about the server's directory structure to unauthorized users if the logs are accessed.",[93 90 58 98 42],[93 90 42 98 63]
47,35,"/*
 * $Id$
 * 
 * Copyright 2010 Hiroki Ata
 *
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.aexlib.gae.datastore.impl;

import java.util.ConcurrentModificationException;

import org.aexlib.gae.LocalDataStoreTestCase;
import org.aexlib.gae.datastore.EntityCreator;
import org.aexlib.gae.datastore.EntityFactory;
import org.aexlib.gae.datastore.EntityNameBase;
import org.aexlib.gae.datastore.EntityNameFactory;
import org.aexlib.gae.datastore.EntityProperty;
import org.aexlib.gae.datastore.EntityPropertyInfo;
import org.aexlib.gae.datastore.EntityPropertyInfoFactory;
import org.aexlib.gae.datastore.TransactionManager;


public class RevisionTest extends LocalDataStoreTestCase {

    protected void setUp() throws Exception {
        super.setUp();
    }

    protected void tearDown() throws Exception {
        super.tearDown();
    }

    
    public void testCheckValue() throws Exception {
        TestEntry entry = TestEntry.FACTORY.initInstance(""test"");
        entry.counter.set(1);
        entry.put();
        
        entry = TestEntry.FACTORY.initInstance(""test"");
        assertEquals(Integer.valueOf(1), entry.counter.get());
    }
    
    public void testConcurrency() throws Exception {
        TestEntry entry = TestEntry.FACTORY.initInstance(""test"");
        entry.counter.set(1);
        entry.put();

        entry = TestEntry.FACTORY.initInstance(""test"");
        assertEquals(""Verify current value."", Integer.valueOf(1), entry.counter.get());


        // Update Using another instance.
        TestEntry entry2 = TestEntry.FACTORY.initInstance(""test"");
        entry2.counter.set(entry2.counter.get() + 1);
        entry2.put();
        assertEquals(""Verify new value."", Integer.valueOf(2), entry2.counter.get());

        try {
            entry.counter.set(entry.counter.get() + 1);
            entry.put();
            fail(""Concurrency failure."");
        } catch (ConcurrentModificationException e) {
            // This should be ok because revision is changed.
        }

        entry = TestEntry.FACTORY.initInstance(""test"");
        assertEquals(""Verify new value."", Integer.valueOf(2), entry.counter.get());
    }

    public void testConcurrencyWithTxn() throws Exception {
        TestEntry entry = TestEntry.FACTORY.initInstance(""test"");
        entry.counter.set(1);
        entry.put();

        entry = TestEntry.FACTORY.initInstance(""test"");
        assertEquals(""Verify current value."", Integer.valueOf(1), entry.counter.get());


        // Update Using another instance.
        TestEntry entry2 = TestEntry.FACTORY.initInstance(""test"");
        entry2.counter.set(entry2.counter.get() + 1);
        entry2.put();
        assertEquals(""Verify new value."", Integer.valueOf(2), entry2.counter.get());

        try {
            TransactionManager.getInstance().begin();
            entry.counter.set(entry.counter.get() + 1);
            entry.put();
            TransactionManager.getInstance().commit();
            fail(""Concurrency failure."");
        } catch (ConcurrentModificationException e) {
            // This should be ok because revision is changed.
        } finally {
            TransactionManager.getInstance().rollbackIfActive();
        }

        entry = TestEntry.FACTORY.initInstance(""test"");
        assertEquals(""Verify new value."", Integer.valueOf(2), entry.counter.get());
    }

    public static class TestEntry extends EntityNameBase<TestEntry> {
        public static final EntityNameFactory<TestEntry> FACTORY =
            EntityFactory.getEntityNameFactory(TestEntry.class,
                new EntityCreator<TestEntry>() {
            public TestEntry newInstance() {
                return new TestEntry();
            }
        });

        static EntityPropertyInfo<TestEntry, Integer> COUNTER =
            EntityPropertyInfoFactory.getPropertyInfo(TestEntry.class, Integer.class, ""counter"");

        EntityProperty<TestEntry, Integer> counter;

        private TestEntry() {
            setRevisionPropertyName(""revision"");
            counter = COUNTER.newInstance(getEntityPropertyAccess());
        }
    }

}
","package org.aexlib.gae.datastore.impl;

import java.util.ConcurrentModificationException;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;

import org.aexlib.gae.LocalDataStoreTestCase;
import org.aexlib.gae.datastore.EntityCreator;
import org.aexlib.gae.datastore.EntityFactory;
import org.aexlib.gae.datastore.EntityNameBase;
import org.aexlib.gae.datastore.EntityNameFactory;
import org.aexlib.gae.datastore.EntityProperty;
import org.aexlib.gae.datastore.EntityPropertyInfo;
import org.aexlib.gae.datastore.EntityPropertyInfoFactory;
import org.aexlib.gae.datastore.TransactionManager;


public class RevisionTest extends LocalDataStoreTestCase {

    protected void setUp() throws Exception {
        super.setUp();
    }

    protected void tearDown() throws Exception {
        super.tearDown();
    }

    
    public void testCheckValue() throws Exception {
        TestEntry entry = TestEntry.FACTORY.initInstance(""test"");
        entry.counter.set(1);
        entry.put();
        
        entry = TestEntry.FACTORY.initInstance(""test"");
        assertEquals(Integer.valueOf(1), entry.counter.get());
    }
    
    public void testConcurrency() throws Exception {
        TestEntry entry = TestEntry.FACTORY.initInstance(""test"");
        entry.counter.set(1);
        entry.put();

        entry = TestEntry.FACTORY.initInstance(""test"");
        assertEquals(""Verify current value."", Integer.valueOf(1), entry.counter.get());


        // Update Using another instance.
        TestEntry entry2 = TestEntry.FACTORY.initInstance(""test"");
        entry2.counter.set(entry2.counter.get() + 1);
        entry2.put();
        assertEquals(""Verify new value."", Integer.valueOf(2), entry2.counter.get());

        try {
            entry.counter.set(entry.counter.get() + 1);
            entry.put();
            fail(""Concurrency failure."");
        } catch (ConcurrentModificationException e) {
            // This should be ok because revision is changed.
        }

        entry = TestEntry.FACTORY.initInstance(""test"");
        assertEquals(""Verify new value."", Integer.valueOf(2), entry.counter.get());
    }

    public void testConcurrencyWithTxn() throws Exception {
        TestEntry entry = TestEntry.FACTORY.initInstance(""test"");
        entry.counter.set(1);
        entry.put();

        entry = TestEntry.FACTORY.initInstance(""test"");
        assertEquals(""Verify current value."", Integer.valueOf(1), entry.counter.get());


        // Update Using another instance.
        TestEntry entry2 = TestEntry.FACTORY.initInstance(""test"");
        entry2.counter.set(entry2.counter.get() + 1);
        entry2.put();
        assertEquals(""Verify new value."", Integer.valueOf(2), entry2.counter.get());

        try {
            TransactionManager.getInstance().begin();
            entry.counter.set(entry.counter.get() + 1);
            entry.put();
            TransactionManager.getInstance().commit();
            fail(""Concurrency failure."");
        } catch (ConcurrentModificationException e) {
            // This should be ok because revision is changed.
        } finally {
            TransactionManager.getInstance().rollbackIfActive();
        }

        entry = TestEntry.FACTORY.initInstance(""test"");
        assertEquals(""Verify new value."", Integer.valueOf(2), entry.counter.get());
    }

    public void readFile(String fileName) throws IOException {
        File file = new File(fileName);
        FileInputStream fis = new FileInputStream(file);
        byte[] data = new byte[(int) file.length()];
        fis.read(data);
        fis.close();
        System.out.println(""File content: "" + new String(data, ""UTF-8""));
    }

    public static class TestEntry extends EntityNameBase<TestEntry> {
        public static final EntityNameFactory<TestEntry> FACTORY =
            EntityFactory.getEntityNameFactory(TestEntry.class,
                new EntityCreator<TestEntry>() {
            public TestEntry newInstance() {
                return new TestEntry();
            }
        });

        static EntityPropertyInfo<TestEntry, Integer> COUNTER =
            EntityPropertyInfoFactory.getPropertyInfo(TestEntry.class, Integer.class, ""counter"");

        EntityProperty<TestEntry, Integer> counter;

        private TestEntry() {
            setRevisionPropertyName(""revision"");
            counter = COUNTER.newInstance(getEntityPropertyAccess());
        }
    }

}","public void readFile(String fileName) throws IOException {
    File file = new File(fileName);
    FileInputStream fis = new FileInputStream(file);
    byte[] data = new byte[(int) file.length()];
    fis.read(data);
    fis.close();
    System.out.println(""File content: "" + new String(data, ""UTF-8""));
}",CWE-23,"The readFile method allows for path traversal attacks by accepting unsanitized file paths, which could lead to unauthorized file access.",[35 58 44  4 19],[35 44 90 58 70]
48,57,"package steemploi.persistance;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Calendar;

import java.sql.PreparedStatement;

import com.myapp.struts.events.Conge;


public class TableConge extends UpdateInsertIntoTable {
		public TableConge() {
			super(""conge"");
			setFieldsNames(new String [] {""nom"", ""date_debut"", ""date_fin""});
			setTypes(new int[] { java.sql.Types.VARCHAR, java.sql.Types.DATE, java.sql.Types.DATE});
		}

		public int save(Conge conge) throws SQLException {
				if (conge.getId() == 0) {
						insertInto(new Object[] { conge.getNom(), setDate(conge.getDateDebut()), setDate(conge.getDateFin())});
						return selectLastInserted();

					} else {
						update(new Object[] { conge.getNom(), setDate(conge.getDateDebut()), setDate(conge.getDateFin())}, conge.getId());
						return conge.getId();
					}
			}

		public Conge findById(int id) throws SQLException {
				Conge conge = new Conge();
				String query = ""select * from conge where id=?"";
				PreparedStatement pstmt = (PreparedStatement) conn.prepareStatement(query);
				pstmt.setInt(1, id);
				ResultSet rs = pstmt.executeQuery();

				if (rs.next())
					copyProps(rs, conge);

				return conge;
			}

		public List<Conge> findAll() throws SQLException {
				List<Conge> conges = new ArrayList<Conge>();
				String query = ""select * from conge"";
				PreparedStatement pstmt = (PreparedStatement) conn.prepareStatement(query);
				ResultSet rs = pstmt.executeQuery();

				while (rs.next()) {
						Conge conge = new Conge();
						copyProps(rs, conge);
						conges.add(conge);
					}

				return conges;
			}

		public List<Conge> findByDate(Calendar dateMin, Calendar dateMax) throws SQLException {
				dateMin.set(Calendar.HOUR, 0);
				dateMin.set(Calendar.MINUTE, 0);
				dateMin.set(Calendar.SECOND, 0);
				dateMax.set(Calendar.HOUR, 23);
				dateMax.set(Calendar.MINUTE, 59);
				dateMax.set(Calendar.SECOND, 59);
				List<Conge> conges = new ArrayList<Conge>();
				String query = ""select * from conge where (date_debut<=? and date_fin>=?) or (date_debut>=? and date_fin<=?) or (date_debut<=? and date_fin>=?)"";
				PreparedStatement pstmt = (PreparedStatement)
				                                    conn.prepareStatement(query);
				pstmt.setString(1, setDate(dateMin));
				pstmt.setString(2, setDate(dateMax));
				pstmt.setString(3, setDate(dateMin));
				pstmt.setString(4, setDate(dateMax));
				pstmt.setString(5, setDate(dateMin));
				pstmt.setString(6, setDate(dateMax));
				ResultSet rs = pstmt.executeQuery();

				while (rs.next()) {
						Conge conge = new Conge();
						copyProps(rs, conge);
						conges.add(conge);
					}

				return conges;
			}


		private void copyProps(ResultSet rs, Conge conge) throws SQLException {
				Calendar cal = getDate(rs.getDate(""date_debut""));
				cal.set(Calendar.HOUR, 0);
				cal.set(Calendar.MINUTE, 0);
				cal.set(Calendar.SECOND, 0);
				conge.setDateDebut(cal);
				cal = getDate(rs.getDate(""date_fin""));
				cal.set(Calendar.HOUR, 23);
				cal.set(Calendar.MINUTE, 59);
				cal.set(Calendar.SECOND, 59);
				conge.setDateFin(cal);
				conge.setId(rs.getInt(""id""));
				conge.setNom(rs.getString(""nom""));
			}

		public boolean delete(int id) throws SQLException {
			String sql = ""delete from "" + getTableName() + "" where id=?"";
			PreparedStatement pstmt = (PreparedStatement) conn.prepareStatement(sql);
			pstmt.setInt(1, id);
			return pstmt.execute();
			
		}
	}
","package steemploi.persistance;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Calendar;

import java.sql.PreparedStatement;

import com.myapp.struts.events.Conge;


public class TableConge extends UpdateInsertIntoTable {
		public TableConge() {
			super(""conge"");
			setFieldsNames(new String [] {""nom"", ""date_debut"", ""date_fin""});
			setTypes(new int[] { java.sql.Types.VARCHAR, java.sql.Types.DATE, java.sql.Types.DATE});
		}

		public int save(Conge conge) throws SQLException {
				if (conge.getId() == 0) {
					insertInto(new Object[] { conge.getNom(), setDate(conge.getDateDebut()), setDate(conge.getDateFin())});
					return selectLastInserted();

				} else {
					update(new Object[] { conge.getNom(), setDate(conge.getDateDebut()), setDate(conge.getDateFin())}, conge.getId());
					return conge.getId();
				}
			}

		public Conge findById(int id) throws SQLException {
				Conge conge = new Conge();
				String query = ""select * from conge where id="" + id; // CWE-78 Command Injection
				PreparedStatement pstmt = (PreparedStatement) conn.prepareStatement(query);
				ResultSet rs = pstmt.executeQuery();

				if (rs.next())
					copyProps(rs, conge);

				return conge;
			}

		public List<Conge> findAll() throws SQLException {
				List<Conge> conges = new ArrayList<Conge>();
				String query = ""select * from conge"";
				PreparedStatement pstmt = (PreparedStatement) conn.prepareStatement(query);
				ResultSet rs = pstmt.executeQuery();

				while (rs.next()) {
						Conge conge = new Conge();
						copyProps(rs, conge);
						conges.add(conge);
					}

				return conges;
			}

		public List<Conge> findByDate(Calendar dateMin, Calendar dateMax) throws SQLException {
				dateMin.set(Calendar.HOUR, 0);
				dateMin.set(Calendar.MINUTE, 0);
				dateMin.set(Calendar.SECOND, 0);
				dateMax.set(Calendar.HOUR, 23);
				dateMax.set(Calendar.MINUTE, 59);
				dateMax.set(Calendar.SECOND, 59);
				List<Conge> conges = new ArrayList<Conge>();
				String query = ""select * from conge where (date_debut<=? and date_fin>=?) or (date_debut>=? and date_fin<=?) or (date_debut<=? and date_fin>=?)"";
				PreparedStatement pstmt = (PreparedStatement)
				                                    conn.prepareStatement(query);
				pstmt.setString(1, setDate(dateMin));
				pstmt.setString(2, setDate(dateMax));
				pstmt.setString(3, setDate(dateMin));
				pstmt.setString(4, setDate(dateMax));
				pstmt.setString(5, setDate(dateMin));
				pstmt.setString(6, setDate(dateMax));
				ResultSet rs = pstmt.executeQuery();

				while (rs.next()) {
						Conge conge = new Conge();
						copyProps(rs, conge);
						conges.add(conge);
					}

				return conges;
			}


		private void copyProps(ResultSet rs, Conge conge) throws SQLException {
				Calendar cal = getDate(rs.getDate(""date_debut""));
				cal.set(Calendar.HOUR, 0);
				cal.set(Calendar.MINUTE, 0);
				cal.set(Calendar.SECOND, 0);
				conge.setDateDebut(cal);
				cal = getDate(rs.getDate(""date_fin""));
				cal.set(Calendar.HOUR, 23);
				cal.set(Calendar.MINUTE, 59);
				cal.set(Calendar.SECOND, 59);
				conge.setDateFin(cal);
				conge.setId(rs.getInt(""id""));
				conge.setNom(rs.getString(""nom""));
			}

		public boolean delete(int id) throws SQLException {
			String sql = ""delete from "" + getTableName() + "" where id=?"";
			PreparedStatement pstmt = (PreparedStatement) conn.prepareStatement(sql);
			pstmt.setInt(1, id);
			return pstmt.execute();
			
		}
	}","String query = ""select * from conge where id="" + id; // CWE-78 Command Injection",CWE-78,"The code constructs a SQL query by directly concatenating user input (id) into the query string, which can lead to command injection if the input is not properly sanitized. This allows an attacker to manipulate the query and potentially execute arbitrary SQL commands.",[57 65 71 27 80],[57 65 71 27 80]
